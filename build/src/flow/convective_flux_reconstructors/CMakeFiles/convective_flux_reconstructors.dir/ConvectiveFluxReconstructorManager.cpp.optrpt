Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: FlowModel::getNumberOfEquations(const FlowModel *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (FlowModel::getNumberOfEquations(const FlowModel *) const) /home/akula/HAMeRS_IB/HAMeRS/include/flow/flow_models/FlowModel.hpp(97,9)

===========================================================================

Begin optimization report for: ConvectiveFluxReconstructorManager::ConvectiveFluxReconstructorManager(ConvectiveFluxReconstructorManager *const, const std::string &, const SAMRAI::tbox::Dimension &, const std::shared_ptr<SAMRAI::geom::CartesianGridGeometry> &, const int &, const FLOW_MODEL::TYPE &, const std::shared_ptr<FlowModel> &, const std::shared_ptr<SAMRAI::tbox::Database> &, const std::string &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ConvectiveFluxReconstructorManager::ConvectiveFluxReconstructorManager(ConvectiveFluxReconstructorManager *const, const std::string &, const SAMRAI::tbox::Dimension &, const std::shared_ptr<SAMRAI::geom::CartesianGridGeometry> &, const int &, const FLOW_MODEL::TYPE &, const std::shared_ptr<FlowModel> &, const std::shared_ptr<SAMRAI::tbox::Database> &, const std::string &)) [4] /home/akula/HAMeRS_IB/HAMeRS/src/flow/convective_flux_reconstructors/ConvectiveFluxReconstructorManager.cpp(3,37)
  -> (3,37) ConvectiveFluxReconstructorManager::ConvectiveFluxReconstructorManager(ConvectiveFluxReconstructorManager *, const std::string &, const SAMRAI::tbox::Dimension &, const std::shared_ptr<SAMRAI::geom::CartesianGridGeometry> &, const int &, const FLOW_MODEL::TYPE &, const std::shared_ptr<FlowModel> &, const std::shared_ptr<SAMRAI::tbox::Database> &, const std::string &)


    Report from: Code generation optimizations [cg]

/home/akula/HAMeRS_IB/HAMeRS/src/flow/convective_flux_reconstructors/ConvectiveFluxReconstructorManager.cpp(3,37):remark #34051: REGISTER ALLOCATION : [_ZN34ConvectiveFluxReconstructorManagerC2ERKSsRKN6SAMRAI4tbox9DimensionERKSt10shared_ptrINS2_4geom21CartesianGridGeometryEERKiRKN10FLOW_MODEL4TYPEERKS7_I9FlowModelERKS7_INS3_8DatabaseEES1_] /home/akula/HAMeRS_IB/HAMeRS/src/flow/convective_flux_reconstructors/ConvectiveFluxReconstructorManager.cpp:3

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      24
            Global    :       0
            Local     :      24
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: ConvectiveFluxReconstructorManager::ConvectiveFluxReconstructorManager(ConvectiveFluxReconstructorManager *, const std::string &, const SAMRAI::tbox::Dimension &, const std::shared_ptr<SAMRAI::geom::CartesianGridGeometry> &, const int &, const FLOW_MODEL::TYPE &, const std::shared_ptr<FlowModel> &, const std::shared_ptr<SAMRAI::tbox::Database> &, const std::string &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ConvectiveFluxReconstructorManager::ConvectiveFluxReconstructorManager(ConvectiveFluxReconstructorManager *, const std::string &, const SAMRAI::tbox::Dimension &, const std::shared_ptr<SAMRAI::geom::CartesianGridGeometry> &, const int &, const FLOW_MODEL::TYPE &, const std::shared_ptr<FlowModel> &, const std::shared_ptr<SAMRAI::tbox::Database> &, const std::string &)) [5] /home/akula/HAMeRS_IB/HAMeRS/src/flow/convective_flux_reconstructors/ConvectiveFluxReconstructorManager.cpp(13,1)
  -> (3,37) std::shared_ptr<ConvectiveFluxReconstructor>::~shared_ptr(std::shared_ptr<ConvectiveFluxReconstructor> *)
  -> INLINE: (3,37) std::shared_ptr<ConvectiveFluxReconstructor>::shared_ptr(std::shared_ptr<ConvectiveFluxReconstructor> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12,23) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (14,43) std::operator==<char, std::char_traits<char>, std::allocator<char>>(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &, const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (18,35) std::__shared_ptr<ConvectiveFluxReconstructor, __gnu_cxx::_S_atomic>::reset<ConvectiveFluxReconstructorFirstOrderLLF>(std::__shared_ptr<ConvectiveFluxReconstructor, __gnu_cxx::_S_atomic> *, ConvectiveFluxReconstructorFirstOrderLLF *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (18,35) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (18,35) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (19,13) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (19,13) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (19,13) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (22,23) std::__shared_ptr<FlowModel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<FlowModel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (22,25) FlowModel::getNumberOfEquations(const FlowModel *) const
  -> INLINE: (27,48) std::operator==<char, std::char_traits<char>, std::allocator<char>>(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &, const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (31,35) std::__shared_ptr<ConvectiveFluxReconstructor, __gnu_cxx::_S_atomic>::reset<ConvectiveFluxReconstructorFirstOrderHLLC>(std::__shared_ptr<ConvectiveFluxReconstructor, __gnu_cxx::_S_atomic> *, ConvectiveFluxReconstructorFirstOrderHLLC *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (31,35) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (31,35) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (32,13) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (32,13) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (32,13) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (35,23) std::__shared_ptr<FlowModel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<FlowModel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (35,25) FlowModel::getNumberOfEquations(const FlowModel *) const
  -> INLINE: (40,48) std::operator==<char, std::char_traits<char>, std::allocator<char>>(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &, const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (44,35) std::__shared_ptr<ConvectiveFluxReconstructor, __gnu_cxx::_S_atomic>::reset<ConvectiveFluxReconstructorWCNS5_JS_HLLC_HLL>(std::__shared_ptr<ConvectiveFluxReconstructor, __gnu_cxx::_S_atomic> *, ConvectiveFluxReconstructorWCNS5_JS_HLLC_HLL *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (44,35) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (44,35) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (45,13) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (45,13) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (45,13) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (48,23) std::__shared_ptr<FlowModel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<FlowModel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (48,25) FlowModel::getNumberOfEquations(const FlowModel *) const
  -> INLINE: (53,48) std::operator==<char, std::char_traits<char>, std::allocator<char>>(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &, const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (57,35) std::__shared_ptr<ConvectiveFluxReconstructor, __gnu_cxx::_S_atomic>::reset<ConvectiveFluxReconstructorWCNS5_Z_HLLC_HLL>(std::__shared_ptr<ConvectiveFluxReconstructor, __gnu_cxx::_S_atomic> *, ConvectiveFluxReconstructorWCNS5_Z_HLLC_HLL *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (57,35) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (57,35) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (58,13) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (58,13) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (58,13) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (61,23) std::__shared_ptr<FlowModel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<FlowModel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (61,25) FlowModel::getNumberOfEquations(const FlowModel *) const
  -> INLINE: (66,48) std::operator==<char, std::char_traits<char>, std::allocator<char>>(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &, const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (70,35) std::__shared_ptr<ConvectiveFluxReconstructor, __gnu_cxx::_S_atomic>::reset<ConvectiveFluxReconstructorWCNS6_CU_M2_HLLC_HLL>(std::__shared_ptr<ConvectiveFluxReconstructor, __gnu_cxx::_S_atomic> *, ConvectiveFluxReconstructorWCNS6_CU_M2_HLLC_HLL *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (70,35) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (70,35) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (71,13) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (71,13) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (71,13) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (74,23) std::__shared_ptr<FlowModel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<FlowModel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (74,25) FlowModel::getNumberOfEquations(const FlowModel *) const
  -> INLINE: (79,48) std::operator==<char, std::char_traits<char>, std::allocator<char>>(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &, const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (83,35) std::__shared_ptr<ConvectiveFluxReconstructor, __gnu_cxx::_S_atomic>::reset<ConvectiveFluxReconstructorWCNS6_LD_HLLC_HLL>(std::__shared_ptr<ConvectiveFluxReconstructor, __gnu_cxx::_S_atomic> *, ConvectiveFluxReconstructorWCNS6_LD_HLLC_HLL *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (83,35) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (83,35) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (84,13) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (84,13) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (84,13) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (87,23) std::__shared_ptr<FlowModel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<FlowModel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (87,25) FlowModel::getNumberOfEquations(const FlowModel *) const
  -> INLINE: (92,48) std::operator==<char, std::char_traits<char>, std::allocator<char>>(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &, const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (96,35) std::__shared_ptr<ConvectiveFluxReconstructor, __gnu_cxx::_S_atomic>::reset<ConvectiveFluxReconstructorWCNS6_Test>(std::__shared_ptr<ConvectiveFluxReconstructor, __gnu_cxx::_S_atomic> *, ConvectiveFluxReconstructorWCNS6_Test *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (96,35) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (96,35) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (97,13) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (97,13) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (97,13) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (100,23) std::__shared_ptr<FlowModel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<FlowModel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (100,25) FlowModel::getNumberOfEquations(const FlowModel *) const
  -> INLINE: (105,48) std::operator==<char, std::char_traits<char>, std::allocator<char>>(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &, const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (109,35) std::__shared_ptr<ConvectiveFluxReconstructor, __gnu_cxx::_S_atomic>::reset<ConvectiveFluxReconstructorCentral>(std::__shared_ptr<ConvectiveFluxReconstructor, __gnu_cxx::_S_atomic> *, ConvectiveFluxReconstructorCentral *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (109,35) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (109,35) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (110,13) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (110,13) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (110,13) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (113,23) std::__shared_ptr<FlowModel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<FlowModel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (113,25) FlowModel::getNumberOfEquations(const FlowModel *) const
  -> INLINE: (118,48) std::operator==<char, std::char_traits<char>, std::allocator<char>>(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &, const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (122,35) std::__shared_ptr<ConvectiveFluxReconstructor, __gnu_cxx::_S_atomic>::reset<ConvectiveFluxReconstructorDRP4>(std::__shared_ptr<ConvectiveFluxReconstructor, __gnu_cxx::_S_atomic> *, ConvectiveFluxReconstructorDRP4 *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (122,35) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (122,35) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (123,13) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (123,13) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (123,13) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (126,23) std::__shared_ptr<FlowModel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<FlowModel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (126,25) FlowModel::getNumberOfEquations(const FlowModel *) const
  -> INLINE: (131,48) std::operator==<char, std::char_traits<char>, std::allocator<char>>(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &, const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (135,35) std::__shared_ptr<ConvectiveFluxReconstructor, __gnu_cxx::_S_atomic>::reset<ConvectiveFluxReconstructorKEP>(std::__shared_ptr<ConvectiveFluxReconstructor, __gnu_cxx::_S_atomic> *, ConvectiveFluxReconstructorKEP *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (135,35) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (135,35) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (136,13) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (136,13) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (136,13) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (139,23) std::__shared_ptr<FlowModel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<FlowModel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (139,25) FlowModel::getNumberOfEquations(const FlowModel *) const
  -> INLINE: (146,9) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (146,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (146,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (146,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (146,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (146,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (146,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (146,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (146,9) std::operator<<<char, std::char_traits<char>, std::allocator<char>>(std::basic_ostream<char, std::char_traits<char>> &, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)
  -> (146,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (146,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (146,9) std::operator<<<char, std::char_traits<char>, std::allocator<char>>(std::basic_ostream<char, std::char_traits<char>> &, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)
  -> (146,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (146,9) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> INLINE: (146,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (146,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (146,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(733,17):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/basic_string.h(1725,18):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/basic_string.h(1725,18):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/home/akula/HAMeRS_IB/HAMeRS/src/flow/convective_flux_reconstructors/ConvectiveFluxReconstructorManager.cpp(13,1):remark #34051: REGISTER ALLOCATION : [_ZN34ConvectiveFluxReconstructorManagerC1ERKSsRKN6SAMRAI4tbox9DimensionERKSt10shared_ptrINS2_4geom21CartesianGridGeometryEERKiRKN10FLOW_MODEL4TYPEERKS7_I9FlowModelERKS7_INS3_8DatabaseEES1_] /home/akula/HAMeRS_IB/HAMeRS/src/flow/convective_flux_reconstructors/ConvectiveFluxReconstructorManager.cpp:13

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rbp rsi rdi r8-r10 r12-r15]
        
    Routine temporaries
        Total         :    1160
            Global    :     307
            Local     :     853
        Regenerable   :     366
        Spilled       :      18
        
    Routine stack
        Variables     :     574 bytes*
            Reads     :      54 [1.01e+00 ~ 1.0%]
            Writes    :     102 [1.04e+00 ~ 1.0%]
        Spills        :      96 bytes*
            Reads     :      70 [3.99e+00 ~ 4.0%]
            Writes    :      12 [3.00e+00 ~ 3.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: __gnu_cxx::__exchange_and_add_dispatch(_Atomic_word *, int)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/ext/atomicity.h(79,3):remark #34051: REGISTER ALLOCATION : [_ZN17_INTERNALeda446c69__gnu_cxx27__exchange_and_add_dispatchEPii] /usr/include/c++/4.8.5/ext/atomicity.h:79

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rdx rsi rdi]
        
    Routine temporaries
        Total         :      16
            Global    :       8
            Local     :       8
        Regenerable   :       2
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_S_construct<char *>(char *, char *, const std::allocator<char> &, std::forward_iterator_tag)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/basic_string.tcc(126,7):remark #34051: REGISTER ALLOCATION : [_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag] /usr/include/c++/4.8.5/bits/basic_string.tcc:126

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rsi rdi r12-r15]
        
    Routine temporaries
        Total         :      30
            Global    :      13
            Local     :      17
        Regenerable   :       7
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::char_traits<char>::length(const std::char_traits<char>::char_type *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/char_traits.h(259,7):remark #34051: REGISTER ALLOCATION : [_ZNSt11char_traitsIcE6lengthEPKc] /usr/include/c++/4.8.5/bits/char_traits.h:259

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      12
            Global    :       7
            Local     :       5
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::__enable_shared_from_this_helper<__gnu_cxx::_S_atomic>(const std::__shared_count<__gnu_cxx::_S_atomic> &, ...)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(724,5):remark #34051: REGISTER ALLOCATION : [_ZSt32__enable_shared_from_this_helperILN9__gnu_cxx12_Lock_policyE2EEvRKSt14__shared_countIXT_EEz] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:724

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       7
            Global    :       0
            Local     :       7
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :     176 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>>::~basic_stringbuf(std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/iosfwd(93,11):remark #34051: REGISTER ALLOCATION : [_ZNSt15basic_stringbufIcSt11char_traitsIcESaIcEED1Ev] /usr/include/c++/4.8.5/iosfwd:93

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rbp rsi rdi]
        
    Routine temporaries
        Total         :      21
            Global    :      11
            Local     :      10
        Regenerable   :       5
        Spilled       :       1
        
    Routine stack
        Variables     :       1 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::shared_ptr<ConvectiveFluxReconstructor>::~shared_ptr(std::shared_ptr<ConvectiveFluxReconstructor> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr.h(93,11):remark #34051: REGISTER ALLOCATION : [_ZNSt10shared_ptrI27ConvectiveFluxReconstructorED1Ev] /usr/include/c++/4.8.5/bits/shared_ptr.h:93

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rdi r12-r13]
        
    Routine temporaries
        Total         :      24
            Global    :      12
            Local     :      12
        Regenerable   :       3
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: ConvectiveFluxReconstructorManager::printClassData(const ConvectiveFluxReconstructorManager *, std::ostream &) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ConvectiveFluxReconstructorManager::printClassData(const ConvectiveFluxReconstructorManager *, std::ostream &) const) [22] /home/akula/HAMeRS_IB/HAMeRS/src/flow/convective_flux_reconstructors/ConvectiveFluxReconstructorManager.cpp(161,1)
  -> (162,8) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (163,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> (165,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> (167,8) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (168,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, const void *)
  -> (169,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> (171,8) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (172,8) std::operator<<<char, std::char_traits<char>, std::allocator<char>>(std::basic_ostream<char, std::char_traits<char>> &, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)
  -> (173,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> (175,8) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (176,8) operator<<(std::ostream &, const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE &)
  -> (177,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))


    Report from: Code generation optimizations [cg]

/home/akula/HAMeRS_IB/HAMeRS/src/flow/convective_flux_reconstructors/ConvectiveFluxReconstructorManager.cpp(161,1):remark #34051: REGISTER ALLOCATION : [_ZNK34ConvectiveFluxReconstructorManager14printClassDataERSo] /home/akula/HAMeRS_IB/HAMeRS/src/flow/convective_flux_reconstructors/ConvectiveFluxReconstructorManager.cpp:161

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    5[ rax rbp rsi rdi r12]
        
    Routine temporaries
        Total         :      54
            Global    :      23
            Local     :      31
        Regenerable   :      14
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: operator<<(std::ostream &, const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (operator<<(std::ostream &, const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE &)) [24] /home/akula/HAMeRS_IB/HAMeRS/include/flow/convective_flux_reconstructors/ConvectiveFluxReconstructors.hpp(36,1)
  -> INLINE: (37,71) std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::map(std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (39,17) std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::size(const std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (42,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::operator=(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *, const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (42,9) std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::operator[](std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>> *, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::key_type &&)
  -> INLINE: (43,9) std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::operator[](std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>> *, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::key_type &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (43,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::operator=(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *, const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (44,9) std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::operator[](std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>> *, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::key_type &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (44,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::operator=(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *, const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (45,9) std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::operator[](std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>> *, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::key_type &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (45,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::operator=(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *, const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (46,9) std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::operator[](std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>> *, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::key_type &&)
  -> INLINE: (46,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::operator=(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *, const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (47,9) std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::operator[](std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>> *, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::key_type &&)
  -> INLINE: (47,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::operator=(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *, const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (48,9) std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::operator[](std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>> *, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::key_type &&)
  -> INLINE: (48,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::operator=(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *, const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (49,9) std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::operator[](std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>> *, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::key_type &&)
  -> INLINE: (49,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::operator=(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *, const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (50,9) std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::operator[](std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>> *, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::key_type &&)
  -> INLINE: (50,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::operator=(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *, const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (51,9) std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::operator[](std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>> *, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::key_type &&)
  -> INLINE: (51,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::operator=(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *, const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (55,15) std::operator<<<char, std::char_traits<char>, std::allocator<char>>(std::basic_ostream<char, std::char_traits<char>> &, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)
  -> INLINE: (55,25) std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::operator[](std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>> *, const std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::key_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1140,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/include/flow/convective_flux_reconstructors/ConvectiveFluxReconstructors.hpp(44,9)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   remark #25478: While Loop Unrolled by 2  
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1140,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/include/flow/convective_flux_reconstructors/ConvectiveFluxReconstructors.hpp(45,9)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   remark #25478: While Loop Unrolled by 2  
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1140,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/include/flow/convective_flux_reconstructors/ConvectiveFluxReconstructors.hpp(46,9)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   remark #25478: While Loop Unrolled by 2  
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1140,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/include/flow/convective_flux_reconstructors/ConvectiveFluxReconstructors.hpp(56,25)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   remark #25478: While Loop Unrolled by 2  
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_tree.h(445,4):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (8, 0)
/usr/include/c++/4.8.5/bits/stl_tree.h(140,51):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/stl_tree.h(140,51):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/stl_tree.h(140,51):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/stl_tree.h(140,51):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
/home/akula/HAMeRS_IB/HAMeRS/include/flow/convective_flux_reconstructors/ConvectiveFluxReconstructors.hpp(36,1):remark #34051: REGISTER ALLOCATION : [_ZlsRSoRKN29CONVECTIVE_FLUX_RECONSTRUCTOR4TYPEE] /home/akula/HAMeRS_IB/HAMeRS/include/flow/convective_flux_reconstructors/ConvectiveFluxReconstructors.hpp:36

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rsi rdi r12-r14 zmm0]
        
    Routine temporaries
        Total         :     277
            Global    :      82
            Local     :     195
        Regenerable   :     103
        Spilled       :       3
        
    Routine stack
        Variables     :     136 bytes*
            Reads     :       9 [1.54e+00 ~ 1.1%]
            Writes    :      20 [5.67e+00 ~ 4.2%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::key_type, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::value_type, std::_Select1st<std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::value_type>, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::key_compare, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::_Pair_alloc_type>::_M_put_node(std::_Rb_tree<std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::key_type, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::value_type, std::_Select1st<std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::value_type>, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::key_compare, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::key_type, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::value_type, std::_Select1st<std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::value_type>, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::key_compare, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::_Pair_alloc_type>::_Link_type)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_tree.h(374,7):remark #34051: REGISTER ALLOCATION : [_ZNSt8_Rb_treeIN29CONVECTIVE_FLUX_RECONSTRUCTOR4TYPEESt4pairIKS1_SsESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E] /usr/include/c++/4.8.5/bits/stl_tree.h:374

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rsi rdi]
        
    Routine temporaries
        Total         :      10
            Global    :       0
            Local     :      10
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::key_type, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::value_type, std::_Select1st<std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::value_type>, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::key_compare, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::_Pair_alloc_type>::_M_get_insert_hint_unique_pos(std::_Rb_tree<std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::key_type, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::value_type, std::_Select1st<std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::value_type>, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::key_compare, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::key_type, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::value_type, std::_Select1st<std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::value_type>, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::key_compare, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::_Pair_alloc_type>::const_iterator, const std::_Rb_tree<std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::key_type, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::value_type, std::_Select1st<std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::value_type>, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::key_compare, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::_Pair_alloc_type>::key_type &)

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1321,7) inlined into /usr/include/c++/4.8.5/bits/stl_tree.h(1426,38)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   remark #25478: While Loop Unrolled by 2  
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1321,7) inlined into /usr/include/c++/4.8.5/bits/stl_tree.h(1442,38)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   remark #25478: While Loop Unrolled by 2  
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1321,7) inlined into /usr/include/c++/4.8.5/bits/stl_tree.h(1458,38)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   remark #25478: While Loop Unrolled by 2  
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_tree.h(1414,5):remark #34051: REGISTER ALLOCATION : [_ZNSt8_Rb_treeIN29CONVECTIVE_FLUX_RECONSTRUCTOR4TYPEESt4pairIKS1_SsESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS3_] /usr/include/c++/4.8.5/bits/stl_tree.h:1414

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rbx rbp rsi rdi r12 r14-r15]
        
    Routine temporaries
        Total         :      66
            Global    :      28
            Local     :      38
        Regenerable   :       5
        Spilled       :       5
        
    Routine stack
        Variables     :      48 bytes*
            Reads     :       6 [5.92e-01 ~ 1.1%]
            Writes    :      18 [5.92e-01 ~ 1.1%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::key_type, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::value_type, std::_Select1st<std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::value_type>, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::key_compare, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::_Pair_alloc_type>::_M_destroy_node(std::_Rb_tree<std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::key_type, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::value_type, std::_Select1st<std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::value_type>, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::key_compare, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::key_type, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::value_type, std::_Select1st<std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::value_type>, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::key_compare, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::_Pair_alloc_type>::_Link_type)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_tree.h(420,7):remark #34051: REGISTER ALLOCATION : [_ZNSt8_Rb_treeIN29CONVECTIVE_FLUX_RECONSTRUCTOR4TYPEESt4pairIKS1_SsESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E] /usr/include/c++/4.8.5/bits/stl_tree.h:420

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rbp rsi rdi]
        
    Routine temporaries
        Total         :      21
            Global    :      11
            Local     :      10
        Regenerable   :       5
        Spilled       :       1
        
    Routine stack
        Variables     :       1 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::operator[](std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>> *, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::key_type &&)

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1140,7) inlined into /usr/include/c++/4.8.5/bits/stl_map.h(482,29)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   remark #25478: While Loop Unrolled by 2  
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1321,7) inlined into /usr/include/c++/4.8.5/bits/stl_map.h(487,6)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   remark #25478: While Loop Unrolled by 2  
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1321,7) inlined into /usr/include/c++/4.8.5/bits/stl_map.h(487,6)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   remark #25478: While Loop Unrolled by 2  
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1321,7) inlined into /usr/include/c++/4.8.5/bits/stl_map.h(487,6)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   remark #25478: While Loop Unrolled by 2  
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_tree.h(140,51):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/stl_map.h(477,7):remark #34051: REGISTER ALLOCATION : [_ZNSt3mapIN29CONVECTIVE_FLUX_RECONSTRUCTOR4TYPEESsSt4lessIS1_ESaISt4pairIKS1_SsEEEixEOS1_] /usr/include/c++/4.8.5/bits/stl_map.h:477

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rbp rsi rdi r8 r12-r15 zmm0]
        
    Routine temporaries
        Total         :      74
            Global    :      34
            Local     :      40
        Regenerable   :      10
        Spilled       :       7
        
    Routine stack
        Variables     :       1 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       5 [1.88e-01 ~ 0.2%]
            Writes    :       5 [1.88e-01 ~ 0.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_base<__gnu_cxx::_S_atomic>::~_Sp_counted_base(std::_Sp_counted_base<__gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(114,7):remark #34051: REGISTER ALLOCATION : [_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EED1Ev] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:114

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       8
            Global    :       0
            Local     :       8
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_base<__gnu_cxx::_S_atomic>::~_Sp_counted_base(std::_Sp_counted_base<__gnu_cxx::_S_atomic> *const)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(113,7):remark #34051: REGISTER ALLOCATION : [_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EED0Ev] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:113

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_base<__gnu_cxx::_S_atomic>::_M_destroy(std::_Sp_counted_base<__gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(124,7):remark #34051: REGISTER ALLOCATION : [_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:124

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      19
            Global    :       7
            Local     :      12
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::~map(std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>> *)

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1123,7) inlined into /usr/include/c++/4.8.5/bits/stl_map.h(97,11)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_map.h(96,11):remark #34051: REGISTER ALLOCATION : [_ZNSt3mapIN29CONVECTIVE_FLUX_RECONSTRUCTOR4TYPEESsSt4lessIS1_ESaISt4pairIKS1_SsEEED1Ev] /usr/include/c++/4.8.5/bits/stl_map.h:96

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rsi rdi r8 r12-r15]
        
    Routine temporaries
        Total         :      25
            Global    :      13
            Local     :      12
        Regenerable   :       5
        Spilled       :       4
        
    Routine stack
        Variables     :       1 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      32 bytes*
            Reads     :       4 [3.99e+00 ~ 3.8%]
            Writes    :       4 [3.99e+00 ~ 3.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::key_type, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::value_type, std::_Select1st<std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::value_type>, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::key_compare, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::_Pair_alloc_type>::_M_erase(std::_Rb_tree<std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::key_type, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::value_type, std::_Select1st<std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::value_type>, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::key_compare, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::key_type, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::value_type, std::_Select1st<std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::value_type>, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::key_compare, std::map<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string, std::less<CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE>, std::allocator<std::pair<const CONVECTIVE_FLUX_RECONSTRUCTOR::TYPE, std::string>>>::_Pair_alloc_type>::_Link_type)

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1123,7)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_tree.h(1121,5):remark #34051: REGISTER ALLOCATION : [_ZNSt8_Rb_treeIN29CONVECTIVE_FLUX_RECONSTRUCTOR4TYPEESt4pairIKS1_SsESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E] /usr/include/c++/4.8.5/bits/stl_tree.h:1121

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rsi rdi r8 r12-r15]
        
    Routine temporaries
        Total         :      26
            Global    :      13
            Local     :      13
        Regenerable   :       5
        Spilled       :       4
        
    Routine stack
        Variables     :       1 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      32 bytes*
            Reads     :       4 [3.99e+00 ~ 3.8%]
            Writes    :       4 [3.99e+00 ~ 3.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorFirstOrderLLF *, __gnu_cxx::_S_atomic>::_M_dispose(std::_Sp_counted_ptr<ConvectiveFluxReconstructorFirstOrderLLF *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(290,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP40ConvectiveFluxReconstructorFirstOrderLLFLN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:290

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      20
            Global    :       7
            Local     :      13
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorFirstOrderLLF *, __gnu_cxx::_S_atomic>::_M_destroy(std::_Sp_counted_ptr<ConvectiveFluxReconstructorFirstOrderLLF *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(294,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP40ConvectiveFluxReconstructorFirstOrderLLFLN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:294

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      19
            Global    :       7
            Local     :      12
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorFirstOrderLLF *, __gnu_cxx::_S_atomic>::_M_get_deleter(std::_Sp_counted_ptr<ConvectiveFluxReconstructorFirstOrderLLF *, __gnu_cxx::_S_atomic> *, const std::type_info &)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(298,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP40ConvectiveFluxReconstructorFirstOrderLLFLN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:298

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rsi rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorFirstOrderLLF *, __gnu_cxx::_S_atomic>::~_Sp_counted_ptr(std::_Sp_counted_ptr<ConvectiveFluxReconstructorFirstOrderLLF *, __gnu_cxx::_S_atomic> *const)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(281,11):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP40ConvectiveFluxReconstructorFirstOrderLLFLN9__gnu_cxx12_Lock_policyE2EED0Ev] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:281

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorFirstOrderLLF *, __gnu_cxx::_S_atomic>::~_Sp_counted_ptr(std::_Sp_counted_ptr<ConvectiveFluxReconstructorFirstOrderLLF *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(281,11):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP40ConvectiveFluxReconstructorFirstOrderLLFLN9__gnu_cxx12_Lock_policyE2EED1Ev] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:281

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       7
            Global    :       0
            Local     :       7
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorFirstOrderHLLC *, __gnu_cxx::_S_atomic>::_M_dispose(std::_Sp_counted_ptr<ConvectiveFluxReconstructorFirstOrderHLLC *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(290,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP41ConvectiveFluxReconstructorFirstOrderHLLCLN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:290

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      20
            Global    :       7
            Local     :      13
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorFirstOrderHLLC *, __gnu_cxx::_S_atomic>::_M_destroy(std::_Sp_counted_ptr<ConvectiveFluxReconstructorFirstOrderHLLC *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(294,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP41ConvectiveFluxReconstructorFirstOrderHLLCLN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:294

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      19
            Global    :       7
            Local     :      12
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorFirstOrderHLLC *, __gnu_cxx::_S_atomic>::_M_get_deleter(std::_Sp_counted_ptr<ConvectiveFluxReconstructorFirstOrderHLLC *, __gnu_cxx::_S_atomic> *, const std::type_info &)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(298,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP41ConvectiveFluxReconstructorFirstOrderHLLCLN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:298

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rsi rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorFirstOrderHLLC *, __gnu_cxx::_S_atomic>::~_Sp_counted_ptr(std::_Sp_counted_ptr<ConvectiveFluxReconstructorFirstOrderHLLC *, __gnu_cxx::_S_atomic> *const)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(281,11):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP41ConvectiveFluxReconstructorFirstOrderHLLCLN9__gnu_cxx12_Lock_policyE2EED0Ev] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:281

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorFirstOrderHLLC *, __gnu_cxx::_S_atomic>::~_Sp_counted_ptr(std::_Sp_counted_ptr<ConvectiveFluxReconstructorFirstOrderHLLC *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(281,11):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP41ConvectiveFluxReconstructorFirstOrderHLLCLN9__gnu_cxx12_Lock_policyE2EED1Ev] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:281

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       7
            Global    :       0
            Local     :       7
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS5_JS_HLLC_HLL *, __gnu_cxx::_S_atomic>::_M_dispose(std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS5_JS_HLLC_HLL *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(290,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP44ConvectiveFluxReconstructorWCNS5_JS_HLLC_HLLLN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:290

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      20
            Global    :       7
            Local     :      13
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS5_JS_HLLC_HLL *, __gnu_cxx::_S_atomic>::_M_destroy(std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS5_JS_HLLC_HLL *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(294,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP44ConvectiveFluxReconstructorWCNS5_JS_HLLC_HLLLN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:294

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      19
            Global    :       7
            Local     :      12
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS5_JS_HLLC_HLL *, __gnu_cxx::_S_atomic>::_M_get_deleter(std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS5_JS_HLLC_HLL *, __gnu_cxx::_S_atomic> *, const std::type_info &)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(298,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP44ConvectiveFluxReconstructorWCNS5_JS_HLLC_HLLLN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:298

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rsi rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS5_JS_HLLC_HLL *, __gnu_cxx::_S_atomic>::~_Sp_counted_ptr(std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS5_JS_HLLC_HLL *, __gnu_cxx::_S_atomic> *const)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(281,11):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP44ConvectiveFluxReconstructorWCNS5_JS_HLLC_HLLLN9__gnu_cxx12_Lock_policyE2EED0Ev] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:281

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS5_JS_HLLC_HLL *, __gnu_cxx::_S_atomic>::~_Sp_counted_ptr(std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS5_JS_HLLC_HLL *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(281,11):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP44ConvectiveFluxReconstructorWCNS5_JS_HLLC_HLLLN9__gnu_cxx12_Lock_policyE2EED1Ev] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:281

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       7
            Global    :       0
            Local     :       7
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS5_Z_HLLC_HLL *, __gnu_cxx::_S_atomic>::_M_dispose(std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS5_Z_HLLC_HLL *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(290,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP43ConvectiveFluxReconstructorWCNS5_Z_HLLC_HLLLN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:290

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      20
            Global    :       7
            Local     :      13
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS5_Z_HLLC_HLL *, __gnu_cxx::_S_atomic>::_M_destroy(std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS5_Z_HLLC_HLL *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(294,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP43ConvectiveFluxReconstructorWCNS5_Z_HLLC_HLLLN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:294

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      19
            Global    :       7
            Local     :      12
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS5_Z_HLLC_HLL *, __gnu_cxx::_S_atomic>::_M_get_deleter(std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS5_Z_HLLC_HLL *, __gnu_cxx::_S_atomic> *, const std::type_info &)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(298,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP43ConvectiveFluxReconstructorWCNS5_Z_HLLC_HLLLN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:298

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rsi rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS5_Z_HLLC_HLL *, __gnu_cxx::_S_atomic>::~_Sp_counted_ptr(std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS5_Z_HLLC_HLL *, __gnu_cxx::_S_atomic> *const)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(281,11):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP43ConvectiveFluxReconstructorWCNS5_Z_HLLC_HLLLN9__gnu_cxx12_Lock_policyE2EED0Ev] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:281

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS5_Z_HLLC_HLL *, __gnu_cxx::_S_atomic>::~_Sp_counted_ptr(std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS5_Z_HLLC_HLL *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(281,11):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP43ConvectiveFluxReconstructorWCNS5_Z_HLLC_HLLLN9__gnu_cxx12_Lock_policyE2EED1Ev] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:281

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       7
            Global    :       0
            Local     :       7
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS6_CU_M2_HLLC_HLL *, __gnu_cxx::_S_atomic>::_M_dispose(std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS6_CU_M2_HLLC_HLL *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(290,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP47ConvectiveFluxReconstructorWCNS6_CU_M2_HLLC_HLLLN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:290

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      20
            Global    :       7
            Local     :      13
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS6_CU_M2_HLLC_HLL *, __gnu_cxx::_S_atomic>::_M_destroy(std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS6_CU_M2_HLLC_HLL *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(294,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP47ConvectiveFluxReconstructorWCNS6_CU_M2_HLLC_HLLLN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:294

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      19
            Global    :       7
            Local     :      12
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS6_CU_M2_HLLC_HLL *, __gnu_cxx::_S_atomic>::_M_get_deleter(std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS6_CU_M2_HLLC_HLL *, __gnu_cxx::_S_atomic> *, const std::type_info &)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(298,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP47ConvectiveFluxReconstructorWCNS6_CU_M2_HLLC_HLLLN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:298

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rsi rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS6_CU_M2_HLLC_HLL *, __gnu_cxx::_S_atomic>::~_Sp_counted_ptr(std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS6_CU_M2_HLLC_HLL *, __gnu_cxx::_S_atomic> *const)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(281,11):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP47ConvectiveFluxReconstructorWCNS6_CU_M2_HLLC_HLLLN9__gnu_cxx12_Lock_policyE2EED0Ev] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:281

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS6_CU_M2_HLLC_HLL *, __gnu_cxx::_S_atomic>::~_Sp_counted_ptr(std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS6_CU_M2_HLLC_HLL *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(281,11):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP47ConvectiveFluxReconstructorWCNS6_CU_M2_HLLC_HLLLN9__gnu_cxx12_Lock_policyE2EED1Ev] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:281

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       7
            Global    :       0
            Local     :       7
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS6_LD_HLLC_HLL *, __gnu_cxx::_S_atomic>::_M_dispose(std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS6_LD_HLLC_HLL *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(290,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP44ConvectiveFluxReconstructorWCNS6_LD_HLLC_HLLLN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:290

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      20
            Global    :       7
            Local     :      13
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS6_LD_HLLC_HLL *, __gnu_cxx::_S_atomic>::_M_destroy(std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS6_LD_HLLC_HLL *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(294,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP44ConvectiveFluxReconstructorWCNS6_LD_HLLC_HLLLN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:294

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      19
            Global    :       7
            Local     :      12
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS6_LD_HLLC_HLL *, __gnu_cxx::_S_atomic>::_M_get_deleter(std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS6_LD_HLLC_HLL *, __gnu_cxx::_S_atomic> *, const std::type_info &)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(298,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP44ConvectiveFluxReconstructorWCNS6_LD_HLLC_HLLLN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:298

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rsi rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS6_LD_HLLC_HLL *, __gnu_cxx::_S_atomic>::~_Sp_counted_ptr(std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS6_LD_HLLC_HLL *, __gnu_cxx::_S_atomic> *const)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(281,11):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP44ConvectiveFluxReconstructorWCNS6_LD_HLLC_HLLLN9__gnu_cxx12_Lock_policyE2EED0Ev] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:281

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS6_LD_HLLC_HLL *, __gnu_cxx::_S_atomic>::~_Sp_counted_ptr(std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS6_LD_HLLC_HLL *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(281,11):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP44ConvectiveFluxReconstructorWCNS6_LD_HLLC_HLLLN9__gnu_cxx12_Lock_policyE2EED1Ev] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:281

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       7
            Global    :       0
            Local     :       7
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS6_Test *, __gnu_cxx::_S_atomic>::_M_dispose(std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS6_Test *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(290,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP37ConvectiveFluxReconstructorWCNS6_TestLN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:290

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      20
            Global    :       7
            Local     :      13
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS6_Test *, __gnu_cxx::_S_atomic>::_M_destroy(std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS6_Test *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(294,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP37ConvectiveFluxReconstructorWCNS6_TestLN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:294

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      19
            Global    :       7
            Local     :      12
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS6_Test *, __gnu_cxx::_S_atomic>::_M_get_deleter(std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS6_Test *, __gnu_cxx::_S_atomic> *, const std::type_info &)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(298,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP37ConvectiveFluxReconstructorWCNS6_TestLN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:298

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rsi rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS6_Test *, __gnu_cxx::_S_atomic>::~_Sp_counted_ptr(std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS6_Test *, __gnu_cxx::_S_atomic> *const)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(281,11):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP37ConvectiveFluxReconstructorWCNS6_TestLN9__gnu_cxx12_Lock_policyE2EED0Ev] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:281

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS6_Test *, __gnu_cxx::_S_atomic>::~_Sp_counted_ptr(std::_Sp_counted_ptr<ConvectiveFluxReconstructorWCNS6_Test *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(281,11):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP37ConvectiveFluxReconstructorWCNS6_TestLN9__gnu_cxx12_Lock_policyE2EED1Ev] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:281

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       7
            Global    :       0
            Local     :       7
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorCentral *, __gnu_cxx::_S_atomic>::_M_dispose(std::_Sp_counted_ptr<ConvectiveFluxReconstructorCentral *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(290,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP34ConvectiveFluxReconstructorCentralLN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:290

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      20
            Global    :       7
            Local     :      13
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorCentral *, __gnu_cxx::_S_atomic>::_M_destroy(std::_Sp_counted_ptr<ConvectiveFluxReconstructorCentral *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(294,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP34ConvectiveFluxReconstructorCentralLN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:294

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      19
            Global    :       7
            Local     :      12
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorCentral *, __gnu_cxx::_S_atomic>::_M_get_deleter(std::_Sp_counted_ptr<ConvectiveFluxReconstructorCentral *, __gnu_cxx::_S_atomic> *, const std::type_info &)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(298,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP34ConvectiveFluxReconstructorCentralLN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:298

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rsi rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorCentral *, __gnu_cxx::_S_atomic>::~_Sp_counted_ptr(std::_Sp_counted_ptr<ConvectiveFluxReconstructorCentral *, __gnu_cxx::_S_atomic> *const)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(281,11):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP34ConvectiveFluxReconstructorCentralLN9__gnu_cxx12_Lock_policyE2EED0Ev] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:281

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorCentral *, __gnu_cxx::_S_atomic>::~_Sp_counted_ptr(std::_Sp_counted_ptr<ConvectiveFluxReconstructorCentral *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(281,11):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP34ConvectiveFluxReconstructorCentralLN9__gnu_cxx12_Lock_policyE2EED1Ev] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:281

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       7
            Global    :       0
            Local     :       7
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorDRP4 *, __gnu_cxx::_S_atomic>::_M_dispose(std::_Sp_counted_ptr<ConvectiveFluxReconstructorDRP4 *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(290,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP31ConvectiveFluxReconstructorDRP4LN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:290

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      20
            Global    :       7
            Local     :      13
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorDRP4 *, __gnu_cxx::_S_atomic>::_M_destroy(std::_Sp_counted_ptr<ConvectiveFluxReconstructorDRP4 *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(294,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP31ConvectiveFluxReconstructorDRP4LN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:294

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      19
            Global    :       7
            Local     :      12
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorDRP4 *, __gnu_cxx::_S_atomic>::_M_get_deleter(std::_Sp_counted_ptr<ConvectiveFluxReconstructorDRP4 *, __gnu_cxx::_S_atomic> *, const std::type_info &)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(298,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP31ConvectiveFluxReconstructorDRP4LN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:298

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rsi rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorDRP4 *, __gnu_cxx::_S_atomic>::~_Sp_counted_ptr(std::_Sp_counted_ptr<ConvectiveFluxReconstructorDRP4 *, __gnu_cxx::_S_atomic> *const)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(281,11):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP31ConvectiveFluxReconstructorDRP4LN9__gnu_cxx12_Lock_policyE2EED0Ev] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:281

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorDRP4 *, __gnu_cxx::_S_atomic>::~_Sp_counted_ptr(std::_Sp_counted_ptr<ConvectiveFluxReconstructorDRP4 *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(281,11):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP31ConvectiveFluxReconstructorDRP4LN9__gnu_cxx12_Lock_policyE2EED1Ev] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:281

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       7
            Global    :       0
            Local     :       7
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorKEP *, __gnu_cxx::_S_atomic>::_M_dispose(std::_Sp_counted_ptr<ConvectiveFluxReconstructorKEP *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(290,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP30ConvectiveFluxReconstructorKEPLN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:290

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      20
            Global    :       7
            Local     :      13
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorKEP *, __gnu_cxx::_S_atomic>::_M_destroy(std::_Sp_counted_ptr<ConvectiveFluxReconstructorKEP *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(294,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP30ConvectiveFluxReconstructorKEPLN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:294

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      19
            Global    :       7
            Local     :      12
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorKEP *, __gnu_cxx::_S_atomic>::_M_get_deleter(std::_Sp_counted_ptr<ConvectiveFluxReconstructorKEP *, __gnu_cxx::_S_atomic> *, const std::type_info &)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(298,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP30ConvectiveFluxReconstructorKEPLN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:298

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rsi rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorKEP *, __gnu_cxx::_S_atomic>::~_Sp_counted_ptr(std::_Sp_counted_ptr<ConvectiveFluxReconstructorKEP *, __gnu_cxx::_S_atomic> *const)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(281,11):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP30ConvectiveFluxReconstructorKEPLN9__gnu_cxx12_Lock_policyE2EED0Ev] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:281

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ConvectiveFluxReconstructorKEP *, __gnu_cxx::_S_atomic>::~_Sp_counted_ptr(std::_Sp_counted_ptr<ConvectiveFluxReconstructorKEP *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(281,11):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP30ConvectiveFluxReconstructorKEPLN9__gnu_cxx12_Lock_policyE2EED1Ev] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:281

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       7
            Global    :       0
            Local     :       7
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: __sti__$E()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (__sti__$E()) [308] <compiler generated>


    Report from: Code generation optimizations [cg]

<compiler generated>:remark #34051: REGISTER ALLOCATION : [__sti__$E] (null):0

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdx rsi rdi]
        
    Routine temporaries
        Total         :      13
            Global    :       7
            Local     :       6
        Regenerable   :       7
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
