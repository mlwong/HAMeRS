Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: NonconservativeDiffusiveFluxDivergenceOperator::NonconservativeDiffusiveFluxDivergenceOperator(NonconservativeDiffusiveFluxDivergenceOperator *, const std::string &, const SAMRAI::tbox::Dimension &, const std::shared_ptr<SAMRAI::geom::CartesianGridGeometry> &, const int &, const std::shared_ptr<FlowModel> &, const std::shared_ptr<SAMRAI::tbox::Database> &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (NonconservativeDiffusiveFluxDivergenceOperator::NonconservativeDiffusiveFluxDivergenceOperator(NonconservativeDiffusiveFluxDivergenceOperator *, const std::string &, const SAMRAI::tbox::Dimension &, const std::shared_ptr<SAMRAI::geom::CartesianGridGeometry> &, const int &, const std::shared_ptr<FlowModel> &, const std::shared_ptr<SAMRAI::tbox::Database> &)) /home/akula/HAMeRS_IB/HAMeRS/include/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperator.hpp(41,9)

===========================================================================

Begin optimization report for: NonconservativeDiffusiveFluxDivergenceOperator::NonconservativeDiffusiveFluxDivergenceOperator(NonconservativeDiffusiveFluxDivergenceOperator *const, const std::string &, const SAMRAI::tbox::Dimension &, const std::shared_ptr<SAMRAI::geom::CartesianGridGeometry> &, const int &, const std::shared_ptr<FlowModel> &, const std::shared_ptr<SAMRAI::tbox::Database> &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (NonconservativeDiffusiveFluxDivergenceOperator::NonconservativeDiffusiveFluxDivergenceOperator(NonconservativeDiffusiveFluxDivergenceOperator *const, const std::string &, const SAMRAI::tbox::Dimension &, const std::shared_ptr<SAMRAI::geom::CartesianGridGeometry> &, const int &, const std::shared_ptr<FlowModel> &, const std::shared_ptr<SAMRAI::tbox::Database> &)) /home/akula/HAMeRS_IB/HAMeRS/include/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperator.hpp(26,9)

===========================================================================

Begin optimization report for: NonconservativeDiffusiveFluxDivergenceOperator::~NonconservativeDiffusiveFluxDivergenceOperator(NonconservativeDiffusiveFluxDivergenceOperator *const)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (NonconservativeDiffusiveFluxDivergenceOperator::~NonconservativeDiffusiveFluxDivergenceOperator(NonconservativeDiffusiveFluxDivergenceOperator *const)) [6] /home/akula/HAMeRS_IB/HAMeRS/include/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperator.hpp(43,17)
  -> INLINE: (43,17) NonconservativeDiffusiveFluxDivergenceOperator::~NonconservativeDiffusiveFluxDivergenceOperator(NonconservativeDiffusiveFluxDivergenceOperator *)
    -> INLINE: (43,68) std::shared_ptr<SAMRAI::tbox::Database>::~shared_ptr(std::shared_ptr<SAMRAI::tbox::Database> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: (43,68) std::shared_ptr<FlowModel>::~shared_ptr(std::shared_ptr<FlowModel> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: (43,68) std::shared_ptr<SAMRAI::geom::CartesianGridGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianGridGeometry> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: (43,68) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

/home/akula/HAMeRS_IB/HAMeRS/include/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperator.hpp(43,17):remark #34051: REGISTER ALLOCATION : [_ZN46NonconservativeDiffusiveFluxDivergenceOperatorD0Ev] /home/akula/HAMeRS_IB/HAMeRS/include/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperator.hpp:43

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rbx rbp rsi rdi r12]
        
    Routine temporaries
        Total         :      64
            Global    :      29
            Local     :      35
        Regenerable   :      14
        Spilled       :       3
        
    Routine stack
        Variables     :       1 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: NonconservativeDiffusiveFluxDivergenceOperator::~NonconservativeDiffusiveFluxDivergenceOperator(NonconservativeDiffusiveFluxDivergenceOperator *const)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (NonconservativeDiffusiveFluxDivergenceOperator::~NonconservativeDiffusiveFluxDivergenceOperator(NonconservativeDiffusiveFluxDivergenceOperator *const)) /home/akula/HAMeRS_IB/HAMeRS/include/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperator.hpp(43,17)

===========================================================================

Begin optimization report for: NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder::NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder(NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder *, const std::string &, const SAMRAI::tbox::Dimension &, const std::shared_ptr<SAMRAI::geom::CartesianGridGeometry> &, const int &, const std::shared_ptr<FlowModel> &, const std::shared_ptr<SAMRAI::tbox::Database> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder::NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder(NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder *, const std::string &, const SAMRAI::tbox::Dimension &, const std::shared_ptr<SAMRAI::geom::CartesianGridGeometry> &, const int &, const std::shared_ptr<FlowModel> &, const std::shared_ptr<SAMRAI::tbox::Database> &)) [8] /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(21,1)
  -> INLINE: (20,13) NonconservativeDiffusiveFluxDivergenceOperator::~NonconservativeDiffusiveFluxDivergenceOperator(NonconservativeDiffusiveFluxDivergenceOperator *const)
    -> /home/akula/HAMeRS_IB/HAMeRS/include/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperator.hpp:(43,17) NonconservativeDiffusiveFluxDivergenceOperator::~NonconservativeDiffusiveFluxDivergenceOperator(NonconservativeDiffusiveFluxDivergenceOperator *)
  -> INLINE: (20,13) NonconservativeDiffusiveFluxDivergenceOperator::NonconservativeDiffusiveFluxDivergenceOperator(NonconservativeDiffusiveFluxDivergenceOperator *const, const std::string &, const SAMRAI::tbox::Dimension &, const std::shared_ptr<SAMRAI::geom::CartesianGridGeometry> &, const int &, const std::shared_ptr<FlowModel> &, const std::shared_ptr<SAMRAI::tbox::Database> &)
    -> INLINE: /home/akula/HAMeRS_IB/HAMeRS/include/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperator.hpp:(26,9) NonconservativeDiffusiveFluxDivergenceOperator::NonconservativeDiffusiveFluxDivergenceOperator(NonconservativeDiffusiveFluxDivergenceOperator *, const std::string &, const SAMRAI::tbox::Dimension &, const std::shared_ptr<SAMRAI::geom::CartesianGridGeometry> &, const int &, const std::shared_ptr<FlowModel> &, const std::shared_ptr<SAMRAI::tbox::Database> &)
      -> INLINE: (33,31) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
         {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
      -> INLINE: (35,33) std::shared_ptr<SAMRAI::geom::CartesianGridGeometry>::shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianGridGeometry> *, const std::shared_ptr<SAMRAI::geom::CartesianGridGeometry> &)
         {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
      -> (35,33) std::shared_ptr<SAMRAI::geom::CartesianGridGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianGridGeometry> *)
      -> INLINE: (36,35) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(1133,28) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (38,30) std::shared_ptr<FlowModel>::shared_ptr(std::shared_ptr<FlowModel> *, const std::shared_ptr<FlowModel> &)
         {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
      -> INLINE: (40,21) std::shared_ptr<SAMRAI::tbox::Database>::shared_ptr(std::shared_ptr<SAMRAI::tbox::Database> *, const std::shared_ptr<SAMRAI::tbox::Database> &)
         {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (22,23) SAMRAI::hier::IntVector::operator=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(189,16) std::vector<int, std::allocator<int>>::operator=(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>> &)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (22,25) SAMRAI::hier::IntVector::getOne(const SAMRAI::tbox::Dimension &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(1146,27) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (22,55) SAMRAI::hier::IntVector::operator*(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(571,11) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, int)
      -> INLINE: (556,44) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (558,18) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(557,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(22,55)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between *(Ueb_V.Ueb_V.Ueb_V.Ueb_V.Ueb_V+i*4) (558:18) and *(Ueb_V.Ueb_V.Ueb_V.Ueb_V.Ueb_V+i*4) (558:18)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(557,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(22,55)
<Remainder>
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(21,1):remark #34051: REGISTER ALLOCATION : [_ZN57NonconservativeDiffusiveFluxDivergenceOperatorEighthOrderC1ERKSsRKN6SAMRAI4tbox9DimensionERKSt10shared_ptrINS2_4geom21CartesianGridGeometryEERKiRKS7_I9FlowModelERKS7_INS3_8DatabaseEE] /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp:21

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rbp rsi rdi r8-r10 r12-r15]
        
    Routine temporaries
        Total         :     149
            Global    :      41
            Local     :     108
        Regenerable   :      17
        Spilled       :       7
        
    Routine stack
        Variables     :      57 bytes*
            Reads     :      12 [1.07e+01 ~ 6.5%]
            Writes    :       4 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       2 [2.19e-02 ~ 0.0%]
            Writes    :       2 [2.19e-02 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::shared_ptr<SAMRAI::geom::CartesianGridGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianGridGeometry> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr.h(93,11):remark #34051: REGISTER ALLOCATION : [_ZNSt10shared_ptrIN6SAMRAI4geom21CartesianGridGeometryEED1Ev] /usr/include/c++/4.8.5/bits/shared_ptr.h:93

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rdi r12-r13]
        
    Routine temporaries
        Total         :      24
            Global    :      12
            Local     :      12
        Regenerable   :       3
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Vector_base<int, std::allocator<int>>::_M_deallocate(std::_Vector_base<int, std::allocator<int>> *, std::_Vector_base<int, std::allocator<int>>::pointer, std::size_t)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(172,7):remark #34051: REGISTER ALLOCATION : [_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPim] /usr/include/c++/4.8.5/bits/stl_vector.h:172

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdx rsi rdi]
        
    Routine temporaries
        Total         :      11
            Global    :       7
            Local     :       4
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: NonconservativeDiffusiveFluxDivergenceOperator::~NonconservativeDiffusiveFluxDivergenceOperator(NonconservativeDiffusiveFluxDivergenceOperator *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (NonconservativeDiffusiveFluxDivergenceOperator::~NonconservativeDiffusiveFluxDivergenceOperator(NonconservativeDiffusiveFluxDivergenceOperator *)) [15] /home/akula/HAMeRS_IB/HAMeRS/include/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperator.hpp(43,67)
  -> INLINE: (43,68) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (43,68) std::shared_ptr<SAMRAI::geom::CartesianGridGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianGridGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (43,68) std::shared_ptr<FlowModel>::~shared_ptr(std::shared_ptr<FlowModel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (43,68) std::shared_ptr<SAMRAI::tbox::Database>::~shared_ptr(std::shared_ptr<SAMRAI::tbox::Database> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

/home/akula/HAMeRS_IB/HAMeRS/include/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperator.hpp(43,67):remark #34051: REGISTER ALLOCATION : [_ZN46NonconservativeDiffusiveFluxDivergenceOperatorD1Ev] /home/akula/HAMeRS_IB/HAMeRS/include/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperator.hpp:43

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rbx rbp rsi rdi r12]
        
    Routine temporaries
        Total         :      63
            Global    :      29
            Local     :      34
        Regenerable   :      14
        Spilled       :       3
        
    Routine stack
        Variables     :       1 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder::NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder(NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder *const, const std::string &, const SAMRAI::tbox::Dimension &, const std::shared_ptr<SAMRAI::geom::CartesianGridGeometry> &, const int &, const std::shared_ptr<FlowModel> &, const std::shared_ptr<SAMRAI::tbox::Database> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder::NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder(NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder *const, const std::string &, const SAMRAI::tbox::Dimension &, const std::shared_ptr<SAMRAI::geom::CartesianGridGeometry> &, const int &, const std::shared_ptr<FlowModel> &, const std::shared_ptr<SAMRAI::tbox::Database> &)) [16] /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(7,60)
  -> INLINE: (7,60) NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder::NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder(NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder *, const std::string &, const SAMRAI::tbox::Dimension &, const std::shared_ptr<SAMRAI::geom::CartesianGridGeometry> &, const int &, const std::shared_ptr<FlowModel> &, const std::shared_ptr<SAMRAI::tbox::Database> &)
    -> INLINE: (20,13) NonconservativeDiffusiveFluxDivergenceOperator::NonconservativeDiffusiveFluxDivergenceOperator(NonconservativeDiffusiveFluxDivergenceOperator *const, const std::string &, const SAMRAI::tbox::Dimension &, const std::shared_ptr<SAMRAI::geom::CartesianGridGeometry> &, const int &, const std::shared_ptr<FlowModel> &, const std::shared_ptr<SAMRAI::tbox::Database> &)
      -> INLINE: /home/akula/HAMeRS_IB/HAMeRS/include/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperator.hpp:(26,9) NonconservativeDiffusiveFluxDivergenceOperator::NonconservativeDiffusiveFluxDivergenceOperator(NonconservativeDiffusiveFluxDivergenceOperator *, const std::string &, const SAMRAI::tbox::Dimension &, const std::shared_ptr<SAMRAI::geom::CartesianGridGeometry> &, const int &, const std::shared_ptr<FlowModel> &, const std::shared_ptr<SAMRAI::tbox::Database> &)
        -> INLINE: (33,31) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
           {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
        -> INLINE: (35,33) std::shared_ptr<SAMRAI::geom::CartesianGridGeometry>::shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianGridGeometry> *, const std::shared_ptr<SAMRAI::geom::CartesianGridGeometry> &)
           {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
        -> (35,33) std::shared_ptr<SAMRAI::geom::CartesianGridGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianGridGeometry> *)
        -> INLINE: (36,35) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(1133,28) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (38,30) std::shared_ptr<FlowModel>::shared_ptr(std::shared_ptr<FlowModel> *, const std::shared_ptr<FlowModel> &)
           {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
        -> INLINE: (40,21) std::shared_ptr<SAMRAI::tbox::Database>::shared_ptr(std::shared_ptr<SAMRAI::tbox::Database> *, const std::shared_ptr<SAMRAI::tbox::Database> &)
           {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: (20,13) NonconservativeDiffusiveFluxDivergenceOperator::~NonconservativeDiffusiveFluxDivergenceOperator(NonconservativeDiffusiveFluxDivergenceOperator *const)
      -> /home/akula/HAMeRS_IB/HAMeRS/include/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperator.hpp:(43,17) NonconservativeDiffusiveFluxDivergenceOperator::~NonconservativeDiffusiveFluxDivergenceOperator(NonconservativeDiffusiveFluxDivergenceOperator *)
    -> INLINE: (22,23) SAMRAI::hier::IntVector::operator=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(189,16) std::vector<int, std::allocator<int>>::operator=(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>> &)
         {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: (22,25) SAMRAI::hier::IntVector::getOne(const SAMRAI::tbox::Dimension &)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(1146,27) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: (22,55) SAMRAI::hier::IntVector::operator*(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(571,11) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, int)
        -> INLINE: (556,44) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (558,18) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(557,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(7,60)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between *(Ueb_V.Ueb_V.Ueb_V.Ueb_V.Ueb_V+i*4) (558:18) and *(Ueb_V.Ueb_V.Ueb_V.Ueb_V.Ueb_V+i*4) (558:18)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(557,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(7,60)
<Remainder>
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(7,60):remark #34051: REGISTER ALLOCATION : [_ZN57NonconservativeDiffusiveFluxDivergenceOperatorEighthOrderC2ERKSsRKN6SAMRAI4tbox9DimensionERKSt10shared_ptrINS2_4geom21CartesianGridGeometryEERKiRKS7_I9FlowModelERKS7_INS3_8DatabaseEE] /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp:7

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rbp rsi rdi r8-r10 r12-r15]
        
    Routine temporaries
        Total         :     149
            Global    :      41
            Local     :     108
        Regenerable   :      17
        Spilled       :       7
        
    Routine stack
        Variables     :      57 bytes*
            Reads     :      12 [1.07e+01 ~ 6.5%]
            Writes    :       4 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       2 [2.19e-02 ~ 0.0%]
            Writes    :       2 [2.19e-02 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder::~NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder(NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder::~NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder(NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder *)) [17] /home/akula/HAMeRS_IB/HAMeRS/include/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.hpp(17,70)
  -> INLINE: (17,71) NonconservativeDiffusiveFluxDivergenceOperator::~NonconservativeDiffusiveFluxDivergenceOperator(NonconservativeDiffusiveFluxDivergenceOperator *const)
    -> INLINE: /home/akula/HAMeRS_IB/HAMeRS/include/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperator.hpp:(43,17) NonconservativeDiffusiveFluxDivergenceOperator::~NonconservativeDiffusiveFluxDivergenceOperator(NonconservativeDiffusiveFluxDivergenceOperator *)
      -> INLINE: (43,68) std::shared_ptr<SAMRAI::tbox::Database>::~shared_ptr(std::shared_ptr<SAMRAI::tbox::Database> *)
         {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
      -> INLINE: (43,68) std::shared_ptr<FlowModel>::~shared_ptr(std::shared_ptr<FlowModel> *)
         {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
      -> INLINE: (43,68) std::shared_ptr<SAMRAI::geom::CartesianGridGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianGridGeometry> *)
         {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
      -> INLINE: (43,68) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
         {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

/home/akula/HAMeRS_IB/HAMeRS/include/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.hpp(17,70):remark #34051: REGISTER ALLOCATION : [_ZN57NonconservativeDiffusiveFluxDivergenceOperatorEighthOrderD1Ev] /home/akula/HAMeRS_IB/HAMeRS/include/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.hpp:17

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rbx rbp rsi rdi r12]
        
    Routine temporaries
        Total         :      63
            Global    :      29
            Local     :      34
        Regenerable   :      14
        Spilled       :       3
        
    Routine stack
        Variables     :       1 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder::~NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder(NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder *const)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder::~NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder(NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder *const)) [18] /home/akula/HAMeRS_IB/HAMeRS/include/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.hpp(17,9)
  -> INLINE: (17,9) NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder::~NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder(NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder *)
    -> INLINE: (17,71) NonconservativeDiffusiveFluxDivergenceOperator::~NonconservativeDiffusiveFluxDivergenceOperator(NonconservativeDiffusiveFluxDivergenceOperator *const)
      -> INLINE: /home/akula/HAMeRS_IB/HAMeRS/include/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperator.hpp:(43,17) NonconservativeDiffusiveFluxDivergenceOperator::~NonconservativeDiffusiveFluxDivergenceOperator(NonconservativeDiffusiveFluxDivergenceOperator *)
        -> INLINE: (43,68) std::shared_ptr<SAMRAI::tbox::Database>::~shared_ptr(std::shared_ptr<SAMRAI::tbox::Database> *)
           {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
        -> INLINE: (43,68) std::shared_ptr<FlowModel>::~shared_ptr(std::shared_ptr<FlowModel> *)
           {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
        -> INLINE: (43,68) std::shared_ptr<SAMRAI::geom::CartesianGridGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianGridGeometry> *)
           {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
        -> INLINE: (43,68) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
           {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

/home/akula/HAMeRS_IB/HAMeRS/include/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.hpp(17,9):remark #34051: REGISTER ALLOCATION : [_ZN57NonconservativeDiffusiveFluxDivergenceOperatorEighthOrderD0Ev] /home/akula/HAMeRS_IB/HAMeRS/include/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.hpp:17

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rbx rbp rsi rdi r12]
        
    Routine temporaries
        Total         :      64
            Global    :      29
            Local     :      35
        Regenerable   :      14
        Spilled       :       3
        
    Routine stack
        Variables     :       1 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder::printClassData(const NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder *, std::ostream &) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder::printClassData(const NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder *, std::ostream &) const) [19] /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(32,1)
  -> (33,8) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (34,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> (36,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> (38,8) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (39,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, const void *)
  -> (40,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> (41,8) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (42,8) std::operator<<<char, std::char_traits<char>, std::allocator<char>>(std::basic_ostream<char, std::char_traits<char>> &, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)
  -> (43,8) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))


    Report from: Code generation optimizations [cg]

/home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(32,1):remark #34051: REGISTER ALLOCATION : [_ZNK57NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder14printClassDataERSo] /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp:32

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    5[ rax rsi rdi r12-r13]
        
    Routine temporaries
        Total         :      43
            Global    :      19
            Local     :      24
        Regenerable   :      11
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder::putToRestart(const NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder *, const std::shared_ptr<SAMRAI::tbox::Database> &) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder::putToRestart(const NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder *, const std::shared_ptr<SAMRAI::tbox::Database> &) const) [21] /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(54,1)
  -> INLINE: (55,15) std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (55,27) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (55,27) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (55,27) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (55,83) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (55,83) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (55,83) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (55,83) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INDIRECT- (VIRTUAL): (55,83)  EXPR_CONV.SI64.P64(*((SI64*) (__$Uf0_V$eae.0.667->__vptr_V$a61 + EXPR_CONV.SI32.I64(70(SI32)) * 8(I64))))
  -> INLINE: (55,83) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (55,83) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (55,83) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

/home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(54,1):remark #34051: REGISTER ALLOCATION : [_ZNK57NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder12putToRestartERKSt10shared_ptrIN6SAMRAI4tbox8DatabaseEE] /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp:54

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rsi rdi r14]
        
    Routine temporaries
        Total         :      82
            Global    :      27
            Local     :      55
        Regenerable   :      30
        Spilled       :       1
        
    Routine stack
        Variables     :      30 bytes*
            Reads     :       5 [2.00e+00 ~ 4.6%]
            Writes    :       3 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder::computeFirstDerivativesInX(NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> &, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> &, const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> &, const std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> &, const SAMRAI::hier::Patch &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder::computeFirstDerivativesInX(NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> &, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> &, const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> &, const std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> &, const SAMRAI::hier::Patch &)) [22] /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(69,1)
  -> INLINE: (78,18) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::resize(std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (81,36) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> (82,56) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> (87,20) SAMRAI::hier::Box::grow(SAMRAI::hier::Box *, const SAMRAI::hier::IntVector &)
  -> (88,64) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (91,59) std::shared_ptr<SAMRAI::hier::PatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (92,9) std::static_pointer_cast<SAMRAI::geom::CartesianPatchGeometry, SAMRAI::hier::PatchGeometry>(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *, const std::shared_ptr<SAMRAI::hier::PatchGeometry> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (92,9) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
  -> INLINE: (93,19) SAMRAI::hier::Patch::getPatchGeometry(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const SAMRAI::hier::Patch *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Patch.h:(346,14) std::shared_ptr<SAMRAI::hier::PatchGeometry>::shared_ptr(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const std::shared_ptr<SAMRAI::hier::PatchGeometry> &)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (95,40) std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (95,42) SAMRAI::geom::CartesianPatchGeometry::getDx(const SAMRAI::geom::CartesianPatchGeometry *) const
  -> INLINE: (104,5) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (104,15) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (110,49) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (112,56) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (116,25) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type)
  -> (116,30) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::reserve(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (116,61) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (116,66) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size(const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *) const
  -> INLINE: (118,58) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (118,58) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (118,63) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size(const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *) const
  -> INLINE: (118,63) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size(const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *) const
  -> INLINE: (121,55) std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>>::operator[](const std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> *, std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>>::size_type) const
  -> INLINE: (121,59) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (123,48) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::find(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *, const std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (123,54) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (123,58) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (123,62) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (123,64) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (124,21) std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type>::operator==(const std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (124,24) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::end(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (127,37) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (127,41) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (127,45) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (127,47) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> (132,46) SAMRAI::pdat::CellData<Real>::CellData(SAMRAI::pdat::CellData<Real> *, const SAMRAI::hier::Box &, int, const SAMRAI::hier::IntVector &)
  -> INLINE: (132,46) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::shared_ptr<SAMRAI::pdat::CellData<Real>>(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *, SAMRAI::pdat::CellData<Real> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (132,46) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (135,44) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (135,46) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (142,31) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (142,35) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (142,39) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (142,41) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (144,72) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (170,25) std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>::pair<Real *&, std::shared_ptr<SAMRAI::pdat::CellData<Real>> &, void>(std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> *, Real *&, std::shared_ptr<SAMRAI::pdat::CellData<Real>> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (170,25) std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>::~pair(std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> *)
  -> INLINE: (172,50) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::insert<std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> &, void>(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *, std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (173,17) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (173,17) std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>::~pair(std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (175,29) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type)
  -> INLINE: (175,34) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::push_back(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (176,48) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::find(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *, const std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (176,54) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (176,58) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (176,62) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (176,64) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (176,82) std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (181,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (187,49) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (188,49) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (190,56) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (191,56) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (193,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (197,25) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type)
  -> (197,30) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::reserve(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (197,61) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (197,66) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size(const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *) const
  -> INLINE: (199,58) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (199,58) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (199,63) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size(const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *) const
  -> INLINE: (199,63) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size(const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *) const
  -> INLINE: (202,55) std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>>::operator[](const std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> *, std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>>::size_type) const
  -> INLINE: (202,59) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (204,48) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::find(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *, const std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (204,54) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (204,58) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (204,62) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (204,64) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (205,21) std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type>::operator==(const std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (205,24) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::end(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (208,37) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (208,41) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (208,45) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (208,47) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> (213,46) SAMRAI::pdat::CellData<Real>::CellData(SAMRAI::pdat::CellData<Real> *, const SAMRAI::hier::Box &, int, const SAMRAI::hier::IntVector &)
  -> INLINE: (213,46) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::shared_ptr<SAMRAI::pdat::CellData<Real>>(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *, SAMRAI::pdat::CellData<Real> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (213,46) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (216,44) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (216,46) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (223,31) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (223,35) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (223,39) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (223,41) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (226,31) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (226,35) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (226,39) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (226,41) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (226,55) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (228,72) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (229,72) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (230,79) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (275,25) std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>::pair<Real *&, std::shared_ptr<SAMRAI::pdat::CellData<Real>> &, void>(std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> *, Real *&, std::shared_ptr<SAMRAI::pdat::CellData<Real>> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (275,25) std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>::~pair(std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> *)
  -> INLINE: (277,50) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::insert<std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> &, void>(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *, std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (278,17) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (278,17) std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>::~pair(std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (280,29) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type)
  -> INLINE: (280,34) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::push_back(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (281,48) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::find(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *, const std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (281,54) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (281,58) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (281,62) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (281,64) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (281,82) std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (286,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (292,49) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (293,49) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (294,49) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (296,56) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (297,56) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (298,56) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (300,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (301,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (305,25) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type)
  -> (305,30) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::reserve(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (305,61) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (305,66) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size(const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *) const
  -> INLINE: (307,58) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (307,58) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (307,63) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size(const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *) const
  -> INLINE: (307,63) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size(const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *) const
  -> INLINE: (310,55) std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>>::operator[](const std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> *, std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>>::size_type) const
  -> INLINE: (310,59) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (312,48) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::find(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *, const std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (312,54) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (312,58) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (312,62) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (312,64) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (313,21) std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type>::operator==(const std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (313,24) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::end(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (316,37) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (316,41) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (316,45) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (316,47) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> (321,46) SAMRAI::pdat::CellData<Real>::CellData(SAMRAI::pdat::CellData<Real> *, const SAMRAI::hier::Box &, int, const SAMRAI::hier::IntVector &)
  -> INLINE: (321,46) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::shared_ptr<SAMRAI::pdat::CellData<Real>>(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *, SAMRAI::pdat::CellData<Real> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (321,46) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (324,44) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (324,46) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (331,31) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (331,35) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (331,39) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (331,41) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (334,31) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (334,35) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (334,39) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (334,41) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (334,55) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (336,72) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (337,72) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (338,72) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (339,79) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (340,79) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (406,25) std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>::pair<Real *&, std::shared_ptr<SAMRAI::pdat::CellData<Real>> &, void>(std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> *, Real *&, std::shared_ptr<SAMRAI::pdat::CellData<Real>> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (406,25) std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>::~pair(std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> *)
  -> INLINE: (408,50) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::insert<std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> &, void>(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *, std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (409,17) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (409,17) std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>::~pair(std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (411,29) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type)
  -> INLINE: (411,34) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::push_back(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (412,48) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::find(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *, const std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (412,54) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (412,58) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (412,62) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (412,64) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (412,82) std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(78,18)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(118,63)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(147,21)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between dudx[i+num_diff_ghosts_0] (161:25) and u[i+1+num_subghosts_0_data] (161:25)
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(199,63)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(232,21)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between dudx[i+num_diff_ghosts_0+(j+num_diff_ghosts_1)*diff_ghostcell_di (265:29) and dudx[i+num_diff_ghosts_0+(j+num_diff_ghosts_1)*diff_ghostcell_di (265:29)

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(235,25)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed FLOW dependence between dudx[i+num_diff_ghosts_0+(j+num_diff_ghosts_1)*diff_ghostcell_di (265:29) and u[i+1+num_subghosts_0_data+(j+num_subghosts_1_data)*subghostcell (265:29)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(307,63)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(342,21)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between dudx[i+num_diff_ghosts_0+(j+num_diff_ghosts_1)*diff_ghostcell_di (395:33) and dudx[i+num_diff_ghosts_0+(j+num_diff_ghosts_1)*diff_ghostcell_di (395:33)

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(344,25)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed OUTPUT dependence between dudx[i+num_diff_ghosts_0+(j+num_diff_ghosts_1)*diff_ghostcell_di (395:33) and dudx[i+num_diff_ghosts_0+(j+num_diff_ghosts_1)*diff_ghostcell_di (395:33)

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(347,29)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed FLOW dependence between dudx[i+num_diff_ghosts_0+(j+num_diff_ghosts_1)*diff_ghostcell_di (395:33) and u[i+1+num_subghosts_0_data+(j+num_subghosts_1_data)*subghostcell (395:33)
         LOOP END
      LOOP END
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(114,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(116,30) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(195,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(197,30) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(303,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(305,30) ]
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_map.h(603,40):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
/usr/include/c++/4.8.5/bits/stl_pair.h(145,10):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
/usr/include/c++/4.8.5/bits/stl_map.h(603,40):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
/usr/include/c++/4.8.5/bits/stl_pair.h(145,10):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
/usr/include/c++/4.8.5/bits/stl_map.h(603,40):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
/usr/include/c++/4.8.5/bits/stl_map.h(603,40):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
/usr/include/c++/4.8.5/bits/stl_map.h(603,40):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
/usr/include/c++/4.8.5/bits/stl_map.h(603,40):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
/home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(69,1):remark #34051: REGISTER ALLOCATION : [_ZN57NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder26computeFirstDerivativesInXERSt6vectorIS0_ISt10shared_ptrIN6SAMRAI4pdat8CellDataIdEEESaIS6_EESaIS8_EERSt3mapIPdS6_St4lessISD_ESaISt4pairIKSD_S6_EEERKSA_RKS0_IS0_IiSaIiEESaISP_EERKNS2_4hier5PatchE] /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp:69

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm14]
        
    Routine temporaries
        Total         :     831
            Global    :     231
            Local     :     600
        Regenerable   :     169
        Spilled       :      66
        
    Routine stack
        Variables     :     676 bytes*
            Reads     :      38 [8.55e+01 ~ 0.8%]
            Writes    :      54 [1.32e+02 ~ 1.2%]
        Spills        :     472 bytes*
            Reads     :     133 [4.10e+02 ~ 3.8%]
            Writes    :      68 [1.61e+02 ~ 1.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::_M_insert_<std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> &>(std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::_Base_ptr, std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::_Base_ptr, std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> &)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_tree.h(140,51):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/stl_tree.h(1018,5):remark #34051: REGISTER ALLOCATION : [_ZNSt8_Rb_treeIPdSt4pairIKS0_St10shared_ptrIN6SAMRAI4pdat8CellDataIdEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE10_M_insert_IRS1_IS0_S8_EEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSM_OT_] /usr/include/c++/4.8.5/bits/stl_tree.h:1018

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rbp rsi rdi r8-r9 r12-r15 zmm0]
        
    Routine temporaries
        Total         :      33
            Global    :      15
            Local     :      18
        Regenerable   :       5
        Spilled       :       6
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::find(std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type> *, const std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::key_type &)

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1140,7) inlined into /usr/include/c++/4.8.5/bits/stl_tree.h(1793,59)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   remark #25478: While Loop Unrolled by 2  
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_tree.h(1791,5):remark #34051: REGISTER ALLOCATION : [_ZNSt8_Rb_treeIPdSt4pairIKS0_St10shared_ptrIN6SAMRAI4pdat8CellDataIdEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE4findERS2_] /usr/include/c++/4.8.5/bits/stl_tree.h:1791

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rsi rdi r8]
        
    Routine temporaries
        Total         :      22
            Global    :      12
            Local     :      10
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       1 [1.00e+00 ~ 2.4%]
            Writes    :       2 [1.00e+00 ~ 2.4%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::_M_emplace_back_aux<const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::value_type &>(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::value_type &)

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_uninitialized.h(74,23) inlined into /usr/include/c++/4.8.5/bits/vector.tcc(414,10)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between __cur->_M_ptr (790:16) and __first.__first->_M_ptr (793:2)
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.8.5/bits/vector.tcc(429,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between __first->_M_refcount->_M_pi (545:2) and *__mem (68:6)
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(789,7):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/vector.tcc(401,7):remark #34051: REGISTER ALLOCATION : [_ZNSt6vectorISt10shared_ptrIN6SAMRAI4pdat8CellDataIdEEESaIS5_EE19_M_emplace_back_auxIIRKS5_EEEvDpOT_] /usr/include/c++/4.8.5/bits/vector.tcc:401

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rbx rbp rsi rdi r12-r15]
        
    Routine temporaries
        Total         :      51
            Global    :      23
            Local     :      28
        Regenerable   :       7
        Spilled       :       8
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      32 bytes*
            Reads     :       4 [3.94e+00 ~ 1.9%]
            Writes    :       4 [3.94e+00 ~ 1.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size(const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *) const

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(646,7):remark #34051: REGISTER ALLOCATION : [_ZNKSt6vectorISt10shared_ptrIN6SAMRAI4pdat8CellDataIdEEESaIS5_EE4sizeEv] /usr/include/c++/4.8.5/bits/stl_vector.h:646

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rax rdi]
        
    Routine temporaries
        Total         :      12
            Global    :       0
            Local     :      12
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Vector_base<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::_M_get_Tp_allocator(std::_Vector_base<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(114,7):remark #34051: REGISTER ALLOCATION : [_ZNSt12_Vector_baseISt10shared_ptrIN6SAMRAI4pdat8CellDataIdEEESaIS5_EE19_M_get_Tp_allocatorEv] /usr/include/c++/4.8.5/bits/stl_vector.h:114

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rax rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Destroy_aux<false>::__destroy<std::_Vector_base<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::pointer>(std::_Vector_base<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::pointer, std::_Vector_base<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::pointer)

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between __first->_M_refcount->_M_pi (545:2) and *__mem (68:6)
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_construct.h(101,2):remark #34051: REGISTER ALLOCATION : [_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrIN6SAMRAI4pdat8CellDataIdEEEEEvT_S9_] /usr/include/c++/4.8.5/bits/stl_construct.h:101

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rsi rdi r12-r15]
        
    Routine temporaries
        Total         :      24
            Global    :      12
            Local     :      12
        Regenerable   :       3
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      32 bytes*
            Reads     :       4 [3.94e+00 ~ 4.0%]
            Writes    :       4 [3.94e+00 ~ 4.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Vector_base<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::_M_deallocate(std::_Vector_base<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::_Vector_base<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::pointer, std::size_t)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(172,7):remark #34051: REGISTER ALLOCATION : [_ZNSt12_Vector_baseISt10shared_ptrIN6SAMRAI4pdat8CellDataIdEEESaIS5_EE13_M_deallocateEPS5_m] /usr/include/c++/4.8.5/bits/stl_vector.h:172

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdx rsi rdi]
        
    Routine temporaries
        Total         :      11
            Global    :       7
            Local     :       4
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::allocator_traits<std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::_S_destroy<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>(std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>> &, std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/alloc_traits.h(281,2):remark #34051: REGISTER ALLOCATION : [_ZNSt16allocator_traitsISaISt10shared_ptrIN6SAMRAI4pdat8CellDataIdEEEEE10_S_destroyIS5_EENSt9enable_ifIXsrNS7_16__destroy_helperIT_EE5valueEvE4typeERS6_PSB_] /usr/include/c++/4.8.5/bits/alloc_traits.h:281

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rbp rsi rdi r12]
        
    Routine temporaries
        Total         :      25
            Global    :      12
            Local     :      13
        Regenerable   :       3
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::_M_get_insert_unique_pos(std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type> *, const std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::key_type &)

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1321,7)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   remark #25478: While Loop Unrolled by 2  
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_tree.h(1316,5):remark #34051: REGISTER ALLOCATION : [_ZNSt8_Rb_treeIPdSt4pairIKS0_St10shared_ptrIN6SAMRAI4pdat8CellDataIdEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE24_M_get_insert_unique_posERS2_] /usr/include/c++/4.8.5/bits/stl_tree.h:1316

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rbx rbp rsi rdi r15]
        
    Routine temporaries
        Total         :      22
            Global    :      13
            Local     :       9
        Regenerable   :       1
        Spilled       :       3
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::__enable_shared_from_this_helper<__gnu_cxx::_S_atomic>(const std::__shared_count<__gnu_cxx::_S_atomic> &, ...)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(724,5):remark #34051: REGISTER ALLOCATION : [_ZSt32__enable_shared_from_this_helperILN9__gnu_cxx12_Lock_policyE2EEvRKSt14__shared_countIXT_EEz] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:724

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       7
            Global    :       0
            Local     :       7
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :     176 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellData<Real>::CellData(SAMRAI::pdat::CellData<Real> *, const SAMRAI::hier::Box &, int, const SAMRAI::hier::IntVector &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::pdat::CellData<Real>::CellData(SAMRAI::pdat::CellData<Real> *, const SAMRAI::hier::Box &, int, const SAMRAI::hier::IntVector &)) [35] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(79,1)
  -> (73,17) std::shared_ptr<SAMRAI::pdat::ArrayData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::ArrayData<Real>> *)
  -> INLINE: (73,17) std::shared_ptr<SAMRAI::pdat::ArrayData<Real>>::shared_ptr(std::shared_ptr<SAMRAI::pdat::ArrayData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (84,11) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (84,11) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (84,11) std::shared_ptr<SAMRAI::tbox::Timer>::~shared_ptr(std::shared_ptr<SAMRAI::tbox::Timer> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (84,11) std::shared_ptr<SAMRAI::tbox::Timer>::operator=(std::shared_ptr<SAMRAI::tbox::Timer> *, std::shared_ptr<SAMRAI::tbox::Timer> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (85,16) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (85,16) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (85,16) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (87,11) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::reset<SAMRAI::pdat::ArrayData<Real>>(std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *, SAMRAI::pdat::ArrayData<Real> *)
    -> INLINE: /usr/include/c++/4.8.5/bits/shared_ptr_base.h:(890,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::__shared_ptr<SAMRAI::pdat::ArrayData<Real>>(std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *, SAMRAI::pdat::ArrayData<Real> *)
      -> INLINE: (739,36) std::__shared_count<__gnu_cxx::_S_atomic>::__shared_count<SAMRAI::pdat::ArrayData<Real> *>(std::__shared_count<__gnu_cxx::_S_atomic> *, SAMRAI::pdat::ArrayData<Real> *)
        -> (456,8) SAMRAI::pdat::ArrayData<Real>::~ArrayData(SAMRAI::pdat::ArrayData<Real> *)
  -> INLINE: (87,37) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> INLINE: (87,52) SAMRAI::pdat::ArrayData<Real>::ArrayData(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::hier::Box &, unsigned int)
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(91,18) std::allocator<double>::~allocator(std::allocator<double> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(94,40) SAMRAI::hier::Box::size(const SAMRAI::hier::Box *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(654,12) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(655,44) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(655,54) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(657,48) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(657,58) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(102,45) std::allocator<double>::allocator(std::allocator<double> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(102,45) std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type, const std::vector<double, std::allocator<double>>::allocator_type &)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(102,45) std::allocator<double>::~allocator(std::allocator<double> *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(88,52)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(656,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(88,52)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 2  
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(88,52)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(88,52)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(88,52)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(733,17):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/shared_ptr_base.h(789,7):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 8)
/usr/include/c++/4.8.5/bits/stl_algobase.h(749,7):remark #34026: call to memset implemented as a call to optimized library version
/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(79,1):remark #34051: REGISTER ALLOCATION : [_ZN6SAMRAI4pdat8CellDataIdEC1ERKNS_4hier3BoxEiRKNS3_9IntVectorE] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:79

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rsi rdi r8-r9 r12-r15 zmm0]
        
    Routine temporaries
        Total         :     188
            Global    :      52
            Local     :     136
        Regenerable   :      35
        Spilled       :       6
        
    Routine stack
        Variables     :      51 bytes*
            Reads     :       9 [5.67e+00 ~ 2.5%]
            Writes    :      13 [6.00e+00 ~ 2.7%]
        Spills        :       8 bytes*
            Reads     :       1 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::shared_ptr<SAMRAI::pdat::ArrayData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::ArrayData<Real>> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr.h(93,11):remark #34051: REGISTER ALLOCATION : [_ZNSt10shared_ptrIN6SAMRAI4pdat9ArrayDataIdEEED1Ev] /usr/include/c++/4.8.5/bits/shared_ptr.h:93

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rdi r12-r13]
        
    Routine temporaries
        Total         :      24
            Global    :      12
            Local     :      12
        Regenerable   :       3
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::~ArrayData(SAMRAI::pdat::ArrayData<Real> *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::pdat::ArrayData<Real>::~ArrayData(SAMRAI::pdat::ArrayData<Real> *)) [38] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(155,1)
  -> INLINE: (159,1) std::vector<double, std::allocator<double>>::~vector(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(155,1):remark #34051: REGISTER ALLOCATION : [_ZN6SAMRAI4pdat9ArrayDataIdED1Ev] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:155

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rdi r13]
        
    Routine temporaries
        Total         :      12
            Global    :       8
            Local     :       4
        Regenerable   :       0
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const) [42] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(636,4)
  -> INLINE: (637,11) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
    -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (638,17) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(1133,28) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (638,36) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
    -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
  -> INLINE: (640,32) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(284,11) SAMRAI::hier::Index::operator-=(SAMRAI::hier::Index *, const SAMRAI::hier::Index &)
      -> INLINE: (267,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (267,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (640,39) SAMRAI::hier::Index::operator+(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(253,11) SAMRAI::hier::Index::operator+=(SAMRAI::hier::Index *, int)
      -> INLINE: (239,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (239,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(638,11)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(267,42) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(641,32)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 2  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(239,42) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(641,39)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 8  
LOOP END

    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(636,4):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4hier3Box11numberCellsEv] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:636

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rbx rsi rdi r8 r13]
        
    Routine temporaries
        Total         :      79
            Global    :      17
            Local     :      62
        Regenerable   :      13
        Spilled       :       2
        
    Routine stack
        Variables     :      56 bytes*
            Reads     :      13 [3.69e+00 ~ 4.7%]
            Writes    :      12 [2.25e+00 ~ 2.9%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::reserve(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_uninitialized.h(74,23) inlined into /usr/include/c++/4.8.5/bits/vector.tcc(74,20)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between __cur->_M_ptr (790:16) and __first.__first->_M_ptr (793:2)
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.8.5/bits/vector.tcc(77,4)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between __first->_M_refcount->_M_pi (545:2) and call:__atomic_fetch_add_4(volatile void *, unsigned int, int) (49:12)
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(789,7):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/vector.tcc(67,5):remark #34051: REGISTER ALLOCATION : [_ZNSt6vectorISt10shared_ptrIN6SAMRAI4pdat8CellDataIdEEESaIS5_EE7reserveEm] /usr/include/c++/4.8.5/bits/vector.tcc:67

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rbx rbp rsi rdi r12-r15]
        
    Routine temporaries
        Total         :      48
            Global    :      22
            Local     :      26
        Regenerable   :       6
        Spilled       :       9
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      32 bytes*
            Reads     :       4 [1.96e-01 ~ 0.5%]
            Writes    :       4 [1.96e-01 ~ 0.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::~vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.8.5/bits/stl_vector.h(416,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between __first->_M_refcount->_M_pi (545:2) and *__mem (68:6)
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(415,7):remark #34051: REGISTER ALLOCATION : [_ZNSt6vectorISt10shared_ptrIN6SAMRAI4pdat8CellDataIdEEESaIS5_EED1Ev] /usr/include/c++/4.8.5/bits/stl_vector.h:415

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rbx rbp rsi rdi r13-r15]
        
    Routine temporaries
        Total         :      25
            Global    :      13
            Local     :      12
        Regenerable   :       3
        Spilled       :       5
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      40 bytes*
            Reads     :       5 [4.93e+00 ~ 4.5%]
            Writes    :       5 [4.93e+00 ~ 4.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr.h(93,11):remark #34051: REGISTER ALLOCATION : [_ZNSt10shared_ptrIN6SAMRAI4pdat8CellDataIdEEED1Ev] /usr/include/c++/4.8.5/bits/shared_ptr.h:93

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rdi r12-r13]
        
    Routine temporaries
        Total         :      24
            Global    :      12
            Local     :      12
        Regenerable   :       3
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>::~pair(std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_pair.h(96,12):remark #34051: REGISTER ALLOCATION : [_ZNSt4pairIPdSt10shared_ptrIN6SAMRAI4pdat8CellDataIdEEEED1Ev] /usr/include/c++/4.8.5/bits/stl_pair.h:96

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rdi r12-r13]
        
    Routine temporaries
        Total         :      24
            Global    :      12
            Local     :      12
        Regenerable   :       3
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::Box::grow(SAMRAI::hier::Box *, const SAMRAI::hier::IntVector &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::Box::grow(SAMRAI::hier::Box *, const SAMRAI::hier::IntVector &)) [47] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(901,4)
  -> INLINE: (903,12) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
    -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (904,21) SAMRAI::hier::IntVector::getNumBlocks(const SAMRAI::hier::IntVector *) const
  -> INLINE: (905,45) SAMRAI::hier::BlockId::getBlockValue(const SAMRAI::hier::BlockId *) const
  -> INLINE: (906,42) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
    -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
  -> INLINE: (906,42) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
    -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
  -> INLINE: (906,51) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (906,51) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (907,20) SAMRAI::hier::Index::operator()(SAMRAI::hier::Index *, unsigned int)
  -> INLINE: (907,33) SAMRAI::hier::IntVector::operator()(const SAMRAI::hier::IntVector *, SAMRAI::hier::BlockId::block_t, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(343,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(343,31) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (908,20) SAMRAI::hier::Index::operator()(SAMRAI::hier::Index *, unsigned int)
  -> INLINE: (908,33) SAMRAI::hier::IntVector::operator()(const SAMRAI::hier::IntVector *, SAMRAI::hier::BlockId::block_t, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(343,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(343,31) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (911,18) SAMRAI::hier::Index::operator-=(SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(300,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(300,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(301,27) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (912,18) SAMRAI::hier::Index::operator+=(SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(178,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(178,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(179,27) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(904,12)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(906,51)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 8  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(300,42) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(912,18)
   remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(300,42) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(912,18)
<Remainder>
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(178,42) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(913,18)
   remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(178,42) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(913,18)
<Remainder>
LOOP END

    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(901,4):remark #34051: REGISTER ALLOCATION : [_ZN6SAMRAI4hier3Box4growERKNS0_9IntVectorE] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:901

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rsi rdi r8-r11]
        
    Routine temporaries
        Total         :     101
            Global    :      25
            Local     :      76
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr.h(93,11):remark #34051: REGISTER ALLOCATION : [_ZNSt10shared_ptrIN6SAMRAI4geom22CartesianPatchGeometryEED1Ev] /usr/include/c++/4.8.5/bits/shared_ptr.h:93

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rdi r12-r13]
        
    Routine temporaries
        Total         :      24
            Global    :      12
            Local     :      12
        Regenerable   :       3
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder::computeFirstDerivativesInY(NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> &, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> &, const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> &, const std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> &, const SAMRAI::hier::Patch &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder::computeFirstDerivativesInY(NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> &, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> &, const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> &, const std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> &, const SAMRAI::hier::Patch &)) [49] /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(430,1)
  -> INLINE: (439,18) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::resize(std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (442,36) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> (443,56) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> (448,20) SAMRAI::hier::Box::grow(SAMRAI::hier::Box *, const SAMRAI::hier::IntVector &)
  -> (449,64) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (452,59) std::shared_ptr<SAMRAI::hier::PatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (453,9) std::static_pointer_cast<SAMRAI::geom::CartesianPatchGeometry, SAMRAI::hier::PatchGeometry>(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *, const std::shared_ptr<SAMRAI::hier::PatchGeometry> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (453,9) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
  -> INLINE: (454,19) SAMRAI::hier::Patch::getPatchGeometry(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const SAMRAI::hier::Patch *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Patch.h:(346,14) std::shared_ptr<SAMRAI::hier::PatchGeometry>::shared_ptr(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const std::shared_ptr<SAMRAI::hier::PatchGeometry> &)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (456,40) std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (456,42) SAMRAI::geom::CartesianPatchGeometry::getDx(const SAMRAI::geom::CartesianPatchGeometry *) const
  -> INLINE: (465,5) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (465,15) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (467,9) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (467,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (467,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (467,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (467,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (467,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (467,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (467,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (467,9) std::operator<<<char, std::char_traits<char>, std::allocator<char>>(std::basic_ostream<char, std::char_traits<char>> &, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)
  -> (467,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (467,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (467,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (467,9) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> INLINE: (467,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (467,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (467,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (473,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (479,49) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (480,49) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (482,56) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (483,56) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (485,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (489,25) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type)
  -> (489,30) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::reserve(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (489,61) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (489,66) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size(const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *) const
  -> INLINE: (491,58) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (491,58) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (491,63) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size(const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *) const
  -> INLINE: (491,63) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size(const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *) const
  -> INLINE: (494,55) std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>>::operator[](const std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> *, std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>>::size_type) const
  -> INLINE: (494,59) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (496,48) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::find(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *, const std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (496,54) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (496,58) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (496,62) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (496,64) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (497,21) std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type>::operator==(const std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (497,24) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::end(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (500,37) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (500,41) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (500,45) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (500,47) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> (505,46) SAMRAI::pdat::CellData<Real>::CellData(SAMRAI::pdat::CellData<Real> *, const SAMRAI::hier::Box &, int, const SAMRAI::hier::IntVector &)
  -> INLINE: (505,46) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::shared_ptr<SAMRAI::pdat::CellData<Real>>(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *, SAMRAI::pdat::CellData<Real> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (505,46) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (508,44) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (508,46) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (515,31) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (515,35) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (515,39) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (515,41) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (518,31) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (518,35) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (518,39) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (518,41) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (518,55) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (520,72) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (521,72) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (522,79) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (567,25) std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>::pair<Real *&, std::shared_ptr<SAMRAI::pdat::CellData<Real>> &, void>(std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> *, Real *&, std::shared_ptr<SAMRAI::pdat::CellData<Real>> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (567,25) std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>::~pair(std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> *)
  -> INLINE: (569,50) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::insert<std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> &, void>(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *, std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (570,17) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (570,17) std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>::~pair(std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (572,29) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type)
  -> INLINE: (572,34) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::push_back(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (573,48) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::find(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *, const std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (573,54) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (573,58) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (573,62) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (573,64) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (573,82) std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (578,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (584,49) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (585,49) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (586,49) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (588,56) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (589,56) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (590,56) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (592,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (593,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (597,25) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type)
  -> (597,30) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::reserve(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (597,61) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (597,66) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size(const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *) const
  -> INLINE: (599,58) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (599,58) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (599,63) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size(const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *) const
  -> INLINE: (599,63) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size(const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *) const
  -> INLINE: (602,55) std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>>::operator[](const std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> *, std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>>::size_type) const
  -> INLINE: (602,59) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (604,48) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::find(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *, const std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (604,54) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (604,58) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (604,62) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (604,64) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (605,21) std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type>::operator==(const std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (605,24) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::end(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (608,37) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (608,41) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (608,45) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (608,47) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> (613,46) SAMRAI::pdat::CellData<Real>::CellData(SAMRAI::pdat::CellData<Real> *, const SAMRAI::hier::Box &, int, const SAMRAI::hier::IntVector &)
  -> INLINE: (613,46) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::shared_ptr<SAMRAI::pdat::CellData<Real>>(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *, SAMRAI::pdat::CellData<Real> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (613,46) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (616,44) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (616,46) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (623,31) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (623,35) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (623,39) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (623,41) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (626,31) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (626,35) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (626,39) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (626,41) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (626,55) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (628,72) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (629,72) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (630,72) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (631,79) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (632,79) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (698,25) std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>::pair<Real *&, std::shared_ptr<SAMRAI::pdat::CellData<Real>> &, void>(std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> *, Real *&, std::shared_ptr<SAMRAI::pdat::CellData<Real>> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (698,25) std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>::~pair(std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> *)
  -> INLINE: (700,50) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::insert<std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> &, void>(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *, std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (701,17) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (701,17) std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>::~pair(std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (703,29) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type)
  -> INLINE: (703,34) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::push_back(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (704,48) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::find(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *, const std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (704,54) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (704,58) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (704,62) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (704,64) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (704,82) std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(439,18)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(491,63)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1140,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(496,48)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      remark #25478: While Loop Unrolled by 8  
   LOOP END

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(524,21)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between dudy[i+num_diff_ghosts_0+(j+num_diff_ghosts_1)*diff_ghostcell_di (557:29) and dudy[i+num_diff_ghosts_0+(j+num_diff_ghosts_1)*diff_ghostcell_di (557:29)

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(527,25)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed FLOW dependence between dudy[i+num_diff_ghosts_0+(j+num_diff_ghosts_1)*diff_ghostcell_di (557:29) and u[i+num_subghosts_0_data+(j+1+num_subghosts_1_data)*subghostcell (557:29)
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1140,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(573,48)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      remark #25478: While Loop Unrolled by 8  
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(599,63)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(634,21)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between dudy[i+num_diff_ghosts_0+(j+num_diff_ghosts_1)*diff_ghostcell_di (687:33) and dudy[i+num_diff_ghosts_0+(j+num_diff_ghosts_1)*diff_ghostcell_di (687:33)

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(636,25)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed OUTPUT dependence between dudy[i+num_diff_ghosts_0+(j+num_diff_ghosts_1)*diff_ghostcell_di (687:33) and dudy[i+num_diff_ghosts_0+(j+num_diff_ghosts_1)*diff_ghostcell_di (687:33)

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(639,29)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed FLOW dependence between dudy[i+num_diff_ghosts_0+(j+num_diff_ghosts_1)*diff_ghostcell_di (687:33) and u[i+num_subghosts_0_data+(j+1+num_subghosts_1_data)*subghostcell (687:33)
         LOOP END
      LOOP END
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(487,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(489,30) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(595,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(597,30) ]
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_map.h(603,40):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
/usr/include/c++/4.8.5/bits/stl_map.h(603,40):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
/usr/include/c++/4.8.5/bits/stl_map.h(603,40):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
/usr/include/c++/4.8.5/bits/stl_map.h(603,40):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
/home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(430,1):remark #34051: REGISTER ALLOCATION : [_ZN57NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder26computeFirstDerivativesInYERSt6vectorIS0_ISt10shared_ptrIN6SAMRAI4pdat8CellDataIdEEESaIS6_EESaIS8_EERSt3mapIPdS6_St4lessISD_ESaISt4pairIKSD_S6_EEERKSA_RKS0_IS0_IiSaIiEESaISP_EERKNS2_4hier5PatchE] /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp:430

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm14]
        
    Routine temporaries
        Total         :    1056
            Global    :     296
            Local     :     760
        Regenerable   :     254
        Spilled       :      85
        
    Routine stack
        Variables     :    1001 bytes*
            Reads     :      53 [1.20e+01 ~ 1.3%]
            Writes    :      92 [3.41e+01 ~ 3.7%]
        Spills        :     616 bytes*
            Reads     :     146 [8.35e+01 ~ 9.1%]
            Writes    :      97 [1.94e+01 ~ 2.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::_M_create_node<std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> &>(std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type> *, std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> &)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_tree.h(140,51):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/stl_tree.h(402,2):remark #34051: REGISTER ALLOCATION : [_ZNSt8_Rb_treeIPdSt4pairIKS0_St10shared_ptrIN6SAMRAI4pdat8CellDataIdEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE14_M_create_nodeIIRS1_IS0_S8_EEEEPSt13_Rb_tree_nodeIS9_EDpOT_] /usr/include/c++/4.8.5/bits/stl_tree.h:402

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r12 zmm0]
        
    Routine temporaries
        Total         :      20
            Global    :      11
            Local     :       9
        Regenerable   :       4
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder::computeFirstDerivativesInZ(NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> &, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> &, const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> &, const std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> &, const SAMRAI::hier::Patch &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder::computeFirstDerivativesInZ(NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> &, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> &, const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> &, const std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> &, const SAMRAI::hier::Patch &)) [51] /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(722,1)
  -> INLINE: (731,18) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::resize(std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (734,36) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> (735,56) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> (740,20) SAMRAI::hier::Box::grow(SAMRAI::hier::Box *, const SAMRAI::hier::IntVector &)
  -> (741,64) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (744,59) std::shared_ptr<SAMRAI::hier::PatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (745,9) std::static_pointer_cast<SAMRAI::geom::CartesianPatchGeometry, SAMRAI::hier::PatchGeometry>(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *, const std::shared_ptr<SAMRAI::hier::PatchGeometry> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (745,9) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
  -> INLINE: (746,19) SAMRAI::hier::Patch::getPatchGeometry(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const SAMRAI::hier::Patch *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Patch.h:(346,14) std::shared_ptr<SAMRAI::hier::PatchGeometry>::shared_ptr(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const std::shared_ptr<SAMRAI::hier::PatchGeometry> &)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (748,40) std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (748,42) SAMRAI::geom::CartesianPatchGeometry::getDx(const SAMRAI::geom::CartesianPatchGeometry *) const
  -> INLINE: (757,5) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (757,15) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (759,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (759,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (759,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (759,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (759,9) std::operator<<<char, std::char_traits<char>, std::allocator<char>>(std::basic_ostream<char, std::char_traits<char>> &, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)
  -> (759,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (759,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (759,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (759,9) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> INLINE: (759,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (759,9) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (759,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (759,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (759,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (759,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (759,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (765,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (767,9) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (767,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (767,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (767,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (767,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (767,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (767,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (767,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (767,9) std::operator<<<char, std::char_traits<char>, std::allocator<char>>(std::basic_ostream<char, std::char_traits<char>> &, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)
  -> (767,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (767,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (767,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (767,9) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> INLINE: (767,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (767,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (767,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (773,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (779,49) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (780,49) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (781,49) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (783,56) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (784,56) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (785,56) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (787,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (788,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (792,25) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type)
  -> (792,30) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::reserve(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (792,61) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (792,66) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size(const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *) const
  -> INLINE: (794,58) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (794,58) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (794,63) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size(const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *) const
  -> INLINE: (794,63) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size(const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *) const
  -> INLINE: (797,55) std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>>::operator[](const std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> *, std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>>::size_type) const
  -> INLINE: (797,59) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (799,48) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::find(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *, const std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (799,54) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (799,58) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (799,62) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (799,64) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (800,21) std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type>::operator==(const std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (800,24) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::end(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (803,37) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (803,41) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (803,45) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (803,47) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> (808,46) SAMRAI::pdat::CellData<Real>::CellData(SAMRAI::pdat::CellData<Real> *, const SAMRAI::hier::Box &, int, const SAMRAI::hier::IntVector &)
  -> INLINE: (808,46) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::shared_ptr<SAMRAI::pdat::CellData<Real>>(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *, SAMRAI::pdat::CellData<Real> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (808,46) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (811,44) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (811,46) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (818,31) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (818,35) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (818,39) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (818,41) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (821,31) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (821,35) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (821,39) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (821,41) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (821,55) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (823,72) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (824,72) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (825,72) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (826,79) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (827,79) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (893,25) std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>::pair<Real *&, std::shared_ptr<SAMRAI::pdat::CellData<Real>> &, void>(std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> *, Real *&, std::shared_ptr<SAMRAI::pdat::CellData<Real>> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (893,25) std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>::~pair(std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> *)
  -> INLINE: (895,50) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::insert<std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> &, void>(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *, std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (896,17) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (896,17) std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>::~pair(std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (898,29) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type)
  -> INLINE: (898,34) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::push_back(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (899,48) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::find(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *, const std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (899,54) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (899,58) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (899,62) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (899,64) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (899,82) std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(731,18)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between __first->_M_start (415:9) and call:operator delete(void *) (110:9)

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(731,18)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between __first->_M_refcount->_M_pi (545:2) and *__mem (68:6)
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(794,63)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1140,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(799,48)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      remark #25478: While Loop Unrolled by 8  
   LOOP END

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(829,21)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between dudz[i+num_diff_ghosts_0+(j+num_diff_ghosts_1)*diff_ghostcell_di (882:33) and dudz[i+num_diff_ghosts_0+(j+num_diff_ghosts_1)*diff_ghostcell_di (882:33)

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(831,25)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed OUTPUT dependence between dudz[i+num_diff_ghosts_0+(j+num_diff_ghosts_1)*diff_ghostcell_di (882:33) and dudz[i+num_diff_ghosts_0+(j+num_diff_ghosts_1)*diff_ghostcell_di (882:33)

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(834,29)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed FLOW dependence between dudz[i+num_diff_ghosts_0+(j+num_diff_ghosts_1)*diff_ghostcell_di (882:33) and u[i+num_subghosts_0_data+(j+num_subghosts_1_data)*subghostcell_d (882:33)
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1321,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(895,50)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      remark #25478: While Loop Unrolled by 8  
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1140,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(899,48)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      remark #25478: While Loop Unrolled by 8  
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(790,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(792,30) ]
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_tree.h(140,51):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/stl_map.h(603,40):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
/usr/include/c++/4.8.5/bits/stl_map.h(603,40):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
/home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(722,1):remark #34051: REGISTER ALLOCATION : [_ZN57NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder26computeFirstDerivativesInZERSt6vectorIS0_ISt10shared_ptrIN6SAMRAI4pdat8CellDataIdEEESaIS6_EESaIS8_EERSt3mapIPdS6_St4lessISD_ESaISt4pairIKSD_S6_EEERKSA_RKS0_IS0_IiSaIiEESaISP_EERKNS2_4hier5PatchE] /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp:722

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm14]
        
    Routine temporaries
        Total         :    1088
            Global    :     290
            Local     :     798
        Regenerable   :     336
        Spilled       :      61
        
    Routine stack
        Variables     :    1230 bytes*
            Reads     :      66 [9.61e+00 ~ 2.7%]
            Writes    :     125 [3.18e+01 ~ 9.0%]
        Spills        :     432 bytes*
            Reads     :      94 [5.15e+00 ~ 1.5%]
            Writes    :      98 [3.97e+00 ~ 1.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::_M_put_node(std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::_Link_type)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_tree.h(374,7):remark #34051: REGISTER ALLOCATION : [_ZNSt8_Rb_treeIPdSt4pairIKS0_St10shared_ptrIN6SAMRAI4pdat8CellDataIdEEEESt10_Select1stIS9_ESt4lessIS0_ESaIS9_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS9_E] /usr/include/c++/4.8.5/bits/stl_tree.h:374

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rsi rdi]
        
    Routine temporaries
        Total         :      10
            Global    :       0
            Local     :      10
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::char_traits<char>::length(const std::char_traits<char>::char_type *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/char_traits.h(259,7):remark #34051: REGISTER ALLOCATION : [_ZNSt11char_traitsIcE6lengthEPKc] /usr/include/c++/4.8.5/bits/char_traits.h:259

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      12
            Global    :       7
            Local     :       5
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>>::~basic_stringbuf(std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/iosfwd(93,11):remark #34051: REGISTER ALLOCATION : [_ZNSt15basic_stringbufIcSt11char_traitsIcESaIcEED1Ev] /usr/include/c++/4.8.5/iosfwd:93

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rbp rsi rdi]
        
    Routine temporaries
        Total         :      21
            Global    :      11
            Local     :      10
        Regenerable   :       5
        Spilled       :       1
        
    Routine stack
        Variables     :       1 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: __gnu_cxx::__exchange_and_add_dispatch(_Atomic_word *, int)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/ext/atomicity.h(79,3):remark #34051: REGISTER ALLOCATION : [_ZN17_INTERNAL56728a1b9__gnu_cxx27__exchange_and_add_dispatchEPii] /usr/include/c++/4.8.5/ext/atomicity.h:79

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rdx rsi rdi]
        
    Routine temporaries
        Total         :      16
            Global    :       8
            Local     :       8
        Regenerable   :       2
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder::computeSecondDerivativesInX(NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> &, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> &, const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> &, const std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> &, const SAMRAI::hier::Patch &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder::computeSecondDerivativesInX(NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> &, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> &, const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> &, const std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> &, const SAMRAI::hier::Patch &)) [66] /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(917,1)
  -> INLINE: (926,18) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::resize(std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (929,36) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> (930,56) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> (935,20) SAMRAI::hier::Box::grow(SAMRAI::hier::Box *, const SAMRAI::hier::IntVector &)
  -> (936,64) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (939,59) std::shared_ptr<SAMRAI::hier::PatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (940,9) std::static_pointer_cast<SAMRAI::geom::CartesianPatchGeometry, SAMRAI::hier::PatchGeometry>(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *, const std::shared_ptr<SAMRAI::hier::PatchGeometry> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (940,9) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
  -> INLINE: (941,19) SAMRAI::hier::Patch::getPatchGeometry(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const SAMRAI::hier::Patch *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Patch.h:(346,14) std::shared_ptr<SAMRAI::hier::PatchGeometry>::shared_ptr(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const std::shared_ptr<SAMRAI::hier::PatchGeometry> &)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (943,40) std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (943,42) SAMRAI::geom::CartesianPatchGeometry::getDx(const SAMRAI::geom::CartesianPatchGeometry *) const
  -> INLINE: (953,5) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (953,15) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (959,49) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (961,56) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (965,25) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type)
  -> (965,30) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::reserve(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (965,61) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (965,66) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size(const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *) const
  -> INLINE: (967,58) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (967,58) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (967,63) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size(const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *) const
  -> INLINE: (967,63) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size(const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *) const
  -> INLINE: (970,55) std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>>::operator[](const std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> *, std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>>::size_type) const
  -> INLINE: (970,59) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (972,48) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::find(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *, const std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (972,54) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (972,58) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (972,62) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (972,64) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (973,21) std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type>::operator==(const std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (973,24) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::end(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (976,37) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (976,41) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (976,45) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (976,47) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> (981,46) SAMRAI::pdat::CellData<Real>::CellData(SAMRAI::pdat::CellData<Real> *, const SAMRAI::hier::Box &, int, const SAMRAI::hier::IntVector &)
  -> INLINE: (981,46) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::shared_ptr<SAMRAI::pdat::CellData<Real>>(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *, SAMRAI::pdat::CellData<Real> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (981,46) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (984,46) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (984,48) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (991,31) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (991,35) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (991,39) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (991,41) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (993,72) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1021,25) std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>::pair<Real *&, std::shared_ptr<SAMRAI::pdat::CellData<Real>> &, void>(std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> *, Real *&, std::shared_ptr<SAMRAI::pdat::CellData<Real>> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (1021,25) std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>::~pair(std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> *)
  -> INLINE: (1023,50) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::insert<std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> &, void>(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *, std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1024,17) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1024,17) std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>::~pair(std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1026,29) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type)
  -> INLINE: (1026,34) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::push_back(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1027,48) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::find(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *, const std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1027,54) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (1027,58) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (1027,62) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1027,64) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (1027,82) std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1032,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (1038,49) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1039,49) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1041,56) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1042,56) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1044,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1048,25) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type)
  -> (1048,30) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::reserve(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (1048,61) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (1048,66) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size(const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *) const
  -> INLINE: (1050,58) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (1050,58) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (1050,63) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size(const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *) const
  -> INLINE: (1050,63) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size(const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *) const
  -> INLINE: (1053,55) std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>>::operator[](const std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> *, std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>>::size_type) const
  -> INLINE: (1053,59) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1055,48) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::find(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *, const std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1055,54) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (1055,58) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (1055,62) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1055,64) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (1056,21) std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type>::operator==(const std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (1056,24) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::end(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1059,37) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (1059,41) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (1059,45) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1059,47) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> (1064,46) SAMRAI::pdat::CellData<Real>::CellData(SAMRAI::pdat::CellData<Real> *, const SAMRAI::hier::Box &, int, const SAMRAI::hier::IntVector &)
  -> INLINE: (1064,46) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::shared_ptr<SAMRAI::pdat::CellData<Real>>(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *, SAMRAI::pdat::CellData<Real> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (1064,46) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (1067,46) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1067,48) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (1074,31) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (1074,35) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (1074,39) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1074,41) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (1077,31) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (1077,35) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (1077,39) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1077,41) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (1077,55) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (1079,72) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1080,72) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1081,79) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1130,25) std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>::pair<Real *&, std::shared_ptr<SAMRAI::pdat::CellData<Real>> &, void>(std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> *, Real *&, std::shared_ptr<SAMRAI::pdat::CellData<Real>> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (1130,25) std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>::~pair(std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> *)
  -> INLINE: (1132,50) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::insert<std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> &, void>(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *, std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1133,17) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1133,17) std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>::~pair(std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1135,29) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type)
  -> INLINE: (1135,34) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::push_back(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1136,48) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::find(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *, const std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1136,54) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (1136,58) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (1136,62) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1136,64) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (1136,82) std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1141,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (1147,49) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1148,49) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1149,49) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1151,56) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1152,56) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1153,56) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1155,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1156,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1160,25) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type)
  -> (1160,30) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::reserve(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (1160,61) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (1160,66) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size(const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *) const
  -> INLINE: (1162,58) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (1162,58) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (1162,63) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size(const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *) const
  -> INLINE: (1162,63) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size(const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *) const
  -> INLINE: (1165,55) std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>>::operator[](const std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> *, std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>>::size_type) const
  -> INLINE: (1165,59) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1167,48) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::find(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *, const std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1167,54) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (1167,58) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (1167,62) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1167,64) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (1168,21) std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type>::operator==(const std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (1168,24) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::end(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1171,37) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (1171,41) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (1171,45) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1171,47) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> (1176,46) SAMRAI::pdat::CellData<Real>::CellData(SAMRAI::pdat::CellData<Real> *, const SAMRAI::hier::Box &, int, const SAMRAI::hier::IntVector &)
  -> INLINE: (1176,46) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::shared_ptr<SAMRAI::pdat::CellData<Real>>(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *, SAMRAI::pdat::CellData<Real> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (1176,46) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (1179,46) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1179,48) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (1186,31) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (1186,35) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (1186,39) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1186,41) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (1189,31) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (1189,35) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (1189,39) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1189,41) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (1189,55) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (1191,72) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1192,72) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1193,72) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1194,79) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1195,79) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1267,25) std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>::pair<Real *&, std::shared_ptr<SAMRAI::pdat::CellData<Real>> &, void>(std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> *, Real *&, std::shared_ptr<SAMRAI::pdat::CellData<Real>> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (1267,25) std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>::~pair(std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> *)
  -> INLINE: (1269,50) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::insert<std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> &, void>(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *, std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1270,17) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1270,17) std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>::~pair(std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1272,29) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type)
  -> INLINE: (1272,34) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::push_back(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1273,48) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::find(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *, const std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1273,54) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (1273,58) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (1273,62) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1273,64) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (1273,82) std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(926,18)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(967,63)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(996,21)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between d2udx2[i+num_diff_ghosts_0] (1011:25) and u[i+num_subghosts_0_data] (1011:25)
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(1050,63)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(1083,21)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between d2udx2[i+num_diff_ghosts_0+(j+num_diff_ghosts_1)*diff_ghostcell_ (1119:29) and d2udx2[i+num_diff_ghosts_0+(j+num_diff_ghosts_1)*diff_ghostcell_ (1119:29)

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(1086,25)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed FLOW dependence between d2udx2[i+num_diff_ghosts_0+(j+num_diff_ghosts_1)*diff_ghostcell_ (1119:29) and u[i+num_subghosts_0_data+(j+num_subghosts_1_data)*subghostcell_d (1119:29)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(1162,63)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(1197,21)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between d2udx2[i+num_diff_ghosts_0+(j+num_diff_ghosts_1)*diff_ghostcell_ (1255:33) and d2udx2[i+num_diff_ghosts_0+(j+num_diff_ghosts_1)*diff_ghostcell_ (1255:33)

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(1199,25)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed OUTPUT dependence between d2udx2[i+num_diff_ghosts_0+(j+num_diff_ghosts_1)*diff_ghostcell_ (1255:33) and d2udx2[i+num_diff_ghosts_0+(j+num_diff_ghosts_1)*diff_ghostcell_ (1255:33)

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(1202,29)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed FLOW dependence between d2udx2[i+num_diff_ghosts_0+(j+num_diff_ghosts_1)*diff_ghostcell_ (1255:33) and u[i+num_subghosts_0_data+(j+num_subghosts_1_data)*subghostcell_d (1255:33)
         LOOP END
      LOOP END
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(963,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(965,30) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(1046,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(1048,30) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(1158,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(1160,30) ]
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_map.h(603,40):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
/usr/include/c++/4.8.5/bits/stl_pair.h(145,10):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
/usr/include/c++/4.8.5/bits/stl_map.h(603,40):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
/usr/include/c++/4.8.5/bits/stl_pair.h(145,10):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
/usr/include/c++/4.8.5/bits/stl_map.h(603,40):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
/usr/include/c++/4.8.5/bits/stl_map.h(603,40):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
/usr/include/c++/4.8.5/bits/stl_map.h(603,40):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
/usr/include/c++/4.8.5/bits/stl_map.h(603,40):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
/home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(917,1):remark #34051: REGISTER ALLOCATION : [_ZN57NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder27computeSecondDerivativesInXERSt6vectorIS0_ISt10shared_ptrIN6SAMRAI4pdat8CellDataIdEEESaIS6_EESaIS8_EERSt3mapIPdS6_St4lessISD_ESaISt4pairIKSD_S6_EEERKSA_RKS0_IS0_IiSaIiEESaISP_EERKNS2_4hier5PatchE] /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp:917

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   31[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     830
            Global    :     231
            Local     :     599
        Regenerable   :     172
        Spilled       :      63
        
    Routine stack
        Variables     :     676 bytes*
            Reads     :      38 [8.55e+01 ~ 0.8%]
            Writes    :      54 [1.32e+02 ~ 1.2%]
        Spills        :     448 bytes*
            Reads     :     128 [3.92e+02 ~ 3.5%]
            Writes    :      65 [1.69e+02 ~ 1.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder::computeSecondDerivativesInY(NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> &, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> &, const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> &, const std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> &, const SAMRAI::hier::Patch &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder::computeSecondDerivativesInY(NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> &, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> &, const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> &, const std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> &, const SAMRAI::hier::Patch &)) [67] /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(1291,1)
  -> INLINE: (1300,18) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::resize(std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1303,36) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> (1304,56) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> (1309,20) SAMRAI::hier::Box::grow(SAMRAI::hier::Box *, const SAMRAI::hier::IntVector &)
  -> (1310,64) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (1313,59) std::shared_ptr<SAMRAI::hier::PatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1314,9) std::static_pointer_cast<SAMRAI::geom::CartesianPatchGeometry, SAMRAI::hier::PatchGeometry>(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *, const std::shared_ptr<SAMRAI::hier::PatchGeometry> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (1314,9) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
  -> INLINE: (1315,19) SAMRAI::hier::Patch::getPatchGeometry(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const SAMRAI::hier::Patch *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Patch.h:(346,14) std::shared_ptr<SAMRAI::hier::PatchGeometry>::shared_ptr(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const std::shared_ptr<SAMRAI::hier::PatchGeometry> &)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1317,40) std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1317,42) SAMRAI::geom::CartesianPatchGeometry::getDx(const SAMRAI::geom::CartesianPatchGeometry *) const
  -> INLINE: (1327,5) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1327,15) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (1329,9) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1329,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1329,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (1329,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (1329,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1329,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (1329,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (1329,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (1329,9) std::operator<<<char, std::char_traits<char>, std::allocator<char>>(std::basic_ostream<char, std::char_traits<char>> &, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)
  -> (1329,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (1329,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (1329,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (1329,9) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> INLINE: (1329,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1329,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1329,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1335,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (1341,49) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1342,49) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1344,56) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1345,56) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1347,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1351,25) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type)
  -> (1351,30) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::reserve(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (1351,61) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (1351,66) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size(const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *) const
  -> INLINE: (1353,58) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (1353,58) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (1353,63) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size(const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *) const
  -> INLINE: (1353,63) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size(const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *) const
  -> INLINE: (1356,55) std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>>::operator[](const std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> *, std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>>::size_type) const
  -> INLINE: (1356,59) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1358,48) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::find(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *, const std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1358,54) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (1358,58) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (1358,62) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1358,64) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (1359,21) std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type>::operator==(const std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (1359,24) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::end(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1362,37) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (1362,41) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (1362,45) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1362,47) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> (1367,46) SAMRAI::pdat::CellData<Real>::CellData(SAMRAI::pdat::CellData<Real> *, const SAMRAI::hier::Box &, int, const SAMRAI::hier::IntVector &)
  -> INLINE: (1367,46) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::shared_ptr<SAMRAI::pdat::CellData<Real>>(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *, SAMRAI::pdat::CellData<Real> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (1367,46) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (1370,46) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1370,48) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (1377,31) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (1377,35) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (1377,39) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1377,41) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (1380,31) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (1380,35) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (1380,39) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1380,41) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (1380,55) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (1382,72) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1383,72) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1384,79) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1433,25) std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>::pair<Real *&, std::shared_ptr<SAMRAI::pdat::CellData<Real>> &, void>(std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> *, Real *&, std::shared_ptr<SAMRAI::pdat::CellData<Real>> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (1433,25) std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>::~pair(std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> *)
  -> INLINE: (1435,50) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::insert<std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> &, void>(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *, std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1436,17) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1436,17) std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>::~pair(std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1438,29) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type)
  -> INLINE: (1438,34) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::push_back(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1439,48) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::find(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *, const std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1439,54) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (1439,58) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (1439,62) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1439,64) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (1439,82) std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1444,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (1450,49) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1451,49) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1452,49) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1454,56) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1455,56) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1456,56) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1458,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1459,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1463,25) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type)
  -> (1463,30) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::reserve(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (1463,61) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (1463,66) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size(const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *) const
  -> INLINE: (1465,58) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (1465,58) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (1465,63) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size(const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *) const
  -> INLINE: (1465,63) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size(const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *) const
  -> INLINE: (1468,55) std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>>::operator[](const std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> *, std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>>::size_type) const
  -> INLINE: (1468,59) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1470,48) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::find(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *, const std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1470,54) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (1470,58) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (1470,62) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1470,64) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (1471,21) std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type>::operator==(const std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (1471,24) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::end(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1474,37) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (1474,41) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (1474,45) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1474,47) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> (1479,46) SAMRAI::pdat::CellData<Real>::CellData(SAMRAI::pdat::CellData<Real> *, const SAMRAI::hier::Box &, int, const SAMRAI::hier::IntVector &)
  -> INLINE: (1479,46) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::shared_ptr<SAMRAI::pdat::CellData<Real>>(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *, SAMRAI::pdat::CellData<Real> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (1479,46) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (1482,46) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1482,48) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (1489,31) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (1489,35) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (1489,39) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1489,41) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (1492,31) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (1492,35) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (1492,39) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1492,41) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (1492,55) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (1494,72) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1495,72) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1496,72) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1497,79) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1498,79) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1570,25) std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>::pair<Real *&, std::shared_ptr<SAMRAI::pdat::CellData<Real>> &, void>(std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> *, Real *&, std::shared_ptr<SAMRAI::pdat::CellData<Real>> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (1570,25) std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>::~pair(std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> *)
  -> INLINE: (1572,50) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::insert<std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> &, void>(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *, std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1573,17) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1573,17) std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>::~pair(std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1575,29) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type)
  -> INLINE: (1575,34) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::push_back(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1576,48) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::find(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *, const std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1576,54) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (1576,58) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (1576,62) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1576,64) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (1576,82) std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(1300,18)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(1353,63)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1140,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(1358,48)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      remark #25478: While Loop Unrolled by 8  
   LOOP END

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(1386,21)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between d2udy2[i+num_diff_ghosts_0+(j+num_diff_ghosts_1)*diff_ghostcell_ (1422:29) and d2udy2[i+num_diff_ghosts_0+(j+num_diff_ghosts_1)*diff_ghostcell_ (1422:29)

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(1389,25)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed FLOW dependence between d2udy2[i+num_diff_ghosts_0+(j+num_diff_ghosts_1)*diff_ghostcell_ (1422:29) and u[i+num_subghosts_0_data+(j+num_subghosts_1_data)*subghostcell_d (1422:29)
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1140,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(1439,48)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      remark #25478: While Loop Unrolled by 8  
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(1465,63)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(1500,21)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between d2udy2[i+num_diff_ghosts_0+(j+num_diff_ghosts_1)*diff_ghostcell_ (1558:33) and d2udy2[i+num_diff_ghosts_0+(j+num_diff_ghosts_1)*diff_ghostcell_ (1558:33)

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(1502,25)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed OUTPUT dependence between d2udy2[i+num_diff_ghosts_0+(j+num_diff_ghosts_1)*diff_ghostcell_ (1558:33) and d2udy2[i+num_diff_ghosts_0+(j+num_diff_ghosts_1)*diff_ghostcell_ (1558:33)

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(1505,29)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed FLOW dependence between d2udy2[i+num_diff_ghosts_0+(j+num_diff_ghosts_1)*diff_ghostcell_ (1558:33) and u[i+num_subghosts_0_data+(j+num_subghosts_1_data)*subghostcell_d (1558:33)
         LOOP END
      LOOP END
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(1349,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(1351,30) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(1461,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(1463,30) ]
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_map.h(603,40):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
/usr/include/c++/4.8.5/bits/stl_map.h(603,40):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
/usr/include/c++/4.8.5/bits/stl_map.h(603,40):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
/usr/include/c++/4.8.5/bits/stl_map.h(603,40):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
/home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(1291,1):remark #34051: REGISTER ALLOCATION : [_ZN57NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder27computeSecondDerivativesInYERSt6vectorIS0_ISt10shared_ptrIN6SAMRAI4pdat8CellDataIdEEESaIS6_EESaIS8_EERSt3mapIPdS6_St4lessISD_ESaISt4pairIKSD_S6_EEERKSA_RKS0_IS0_IiSaIiEESaISP_EERKNS2_4hier5PatchE] /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp:1291

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   31[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :    1064
            Global    :     299
            Local     :     765
        Regenerable   :     254
        Spilled       :      85
        
    Routine stack
        Variables     :    1001 bytes*
            Reads     :      53 [1.20e+01 ~ 1.2%]
            Writes    :      92 [3.41e+01 ~ 3.5%]
        Spills        :     616 bytes*
            Reads     :     144 [9.13e+01 ~ 9.5%]
            Writes    :      96 [2.01e+01 ~ 2.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder::computeSecondDerivativesInZ(NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> &, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> &, const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> &, const std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> &, const SAMRAI::hier::Patch &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder::computeSecondDerivativesInZ(NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> &, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> &, const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> &, const std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> &, const SAMRAI::hier::Patch &)) [68] /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(1594,1)
  -> INLINE: (1603,18) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::resize(std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1606,36) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> (1607,56) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> (1612,20) SAMRAI::hier::Box::grow(SAMRAI::hier::Box *, const SAMRAI::hier::IntVector &)
  -> (1613,64) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (1616,59) std::shared_ptr<SAMRAI::hier::PatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1617,9) std::static_pointer_cast<SAMRAI::geom::CartesianPatchGeometry, SAMRAI::hier::PatchGeometry>(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *, const std::shared_ptr<SAMRAI::hier::PatchGeometry> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (1617,9) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
  -> INLINE: (1618,19) SAMRAI::hier::Patch::getPatchGeometry(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const SAMRAI::hier::Patch *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Patch.h:(346,14) std::shared_ptr<SAMRAI::hier::PatchGeometry>::shared_ptr(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const std::shared_ptr<SAMRAI::hier::PatchGeometry> &)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1620,40) std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1620,42) SAMRAI::geom::CartesianPatchGeometry::getDx(const SAMRAI::geom::CartesianPatchGeometry *) const
  -> INLINE: (1630,5) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1630,15) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (1632,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (1632,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (1632,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1632,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (1632,9) std::operator<<<char, std::char_traits<char>, std::allocator<char>>(std::basic_ostream<char, std::char_traits<char>> &, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)
  -> (1632,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (1632,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (1632,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (1632,9) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> INLINE: (1632,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1632,9) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1632,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (1632,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (1632,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1632,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1632,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1638,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (1640,9) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1640,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1640,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (1640,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (1640,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1640,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (1640,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (1640,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (1640,9) std::operator<<<char, std::char_traits<char>, std::allocator<char>>(std::basic_ostream<char, std::char_traits<char>> &, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)
  -> (1640,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (1640,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (1640,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (1640,9) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> INLINE: (1640,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1640,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1640,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1646,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (1652,49) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1653,49) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1654,49) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1656,56) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1657,56) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1658,56) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1660,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1661,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1665,25) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type)
  -> (1665,30) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::reserve(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (1665,61) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (1665,66) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size(const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *) const
  -> INLINE: (1667,58) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (1667,58) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (1667,63) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size(const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *) const
  -> INLINE: (1667,63) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size(const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *) const
  -> INLINE: (1670,55) std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>>::operator[](const std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>> *, std::vector<std::vector<int, std::allocator<int>>, std::allocator<std::vector<int, std::allocator<int>>>>::size_type) const
  -> INLINE: (1670,59) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1672,48) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::find(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *, const std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1672,54) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (1672,58) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (1672,62) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1672,64) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (1673,21) std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type>::operator==(const std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (1673,24) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::end(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1676,37) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (1676,41) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (1676,45) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1676,47) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> (1681,46) SAMRAI::pdat::CellData<Real>::CellData(SAMRAI::pdat::CellData<Real> *, const SAMRAI::hier::Box &, int, const SAMRAI::hier::IntVector &)
  -> INLINE: (1681,46) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::shared_ptr<SAMRAI::pdat::CellData<Real>>(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *, SAMRAI::pdat::CellData<Real> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (1681,46) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (1684,46) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1684,48) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (1691,31) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (1691,35) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (1691,39) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1691,41) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (1694,31) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (1694,35) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (1694,39) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1694,41) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (1694,55) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (1696,72) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1697,72) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1698,72) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1699,79) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1700,79) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1772,25) std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>::pair<Real *&, std::shared_ptr<SAMRAI::pdat::CellData<Real>> &, void>(std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> *, Real *&, std::shared_ptr<SAMRAI::pdat::CellData<Real>> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (1772,25) std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>::~pair(std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> *)
  -> INLINE: (1774,50) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::insert<std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> &, void>(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *, std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1775,17) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1775,17) std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>::~pair(std::pair<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1777,29) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type)
  -> INLINE: (1777,34) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::push_back(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1778,48) std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::find(std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>> *, const std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1778,54) std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::operator[](const std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type) const
  -> INLINE: (1778,58) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type) const
  -> INLINE: (1778,62) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1778,64) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (1778,82) std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_iterator<std::_Rb_tree<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_type, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type, std::_Select1st<std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::value_type>, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::key_compare, std::map<Real *, std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::less<Real *>, std::allocator<std::pair<Real *const, std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>::_Pair_alloc_type>::value_type> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(1603,18)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between __first->_M_start (415:9) and call:operator delete(void *) (110:9)

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(1603,18)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between __first->_M_refcount->_M_pi (545:2) and *__mem (68:6)
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(1667,63)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1140,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(1672,48)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      remark #25478: While Loop Unrolled by 8  
   LOOP END

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(1702,21)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between d2udz2[i+num_diff_ghosts_0+(j+num_diff_ghosts_1)*diff_ghostcell_ (1760:33) and d2udz2[i+num_diff_ghosts_0+(j+num_diff_ghosts_1)*diff_ghostcell_ (1760:33)

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(1704,25)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed OUTPUT dependence between d2udz2[i+num_diff_ghosts_0+(j+num_diff_ghosts_1)*diff_ghostcell_ (1760:33) and d2udz2[i+num_diff_ghosts_0+(j+num_diff_ghosts_1)*diff_ghostcell_ (1760:33)

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(1707,29)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed FLOW dependence between d2udz2[i+num_diff_ghosts_0+(j+num_diff_ghosts_1)*diff_ghostcell_ (1760:33) and u[i+num_subghosts_0_data+(j+num_subghosts_1_data)*subghostcell_d (1760:33)
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1321,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(1774,50)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      remark #25478: While Loop Unrolled by 8  
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1140,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(1778,48)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      remark #25478: While Loop Unrolled by 8  
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(1663,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(1665,30) ]
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_tree.h(140,51):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/stl_map.h(603,40):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
/usr/include/c++/4.8.5/bits/stl_map.h(603,40):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
/home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp(1594,1):remark #34051: REGISTER ALLOCATION : [_ZN57NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder27computeSecondDerivativesInZERSt6vectorIS0_ISt10shared_ptrIN6SAMRAI4pdat8CellDataIdEEESaIS6_EESaIS8_EERSt3mapIPdS6_St4lessISD_ESaISt4pairIKSD_S6_EEERKSA_RKS0_IS0_IiSaIiEESaISP_EERKNS2_4hier5PatchE] /home/akula/HAMeRS_IB/HAMeRS/src/flow/nonconservative_diffusive_flux_divergence_operators/NonconservativeDiffusiveFluxDivergenceOperatorEighthOrder.cpp:1594

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   31[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :    1092
            Global    :     291
            Local     :     801
        Regenerable   :     337
        Spilled       :      62
        
    Routine stack
        Variables     :    1230 bytes*
            Reads     :      66 [9.61e+00 ~ 2.7%]
            Writes    :     125 [3.18e+01 ~ 8.9%]
        Spills        :     440 bytes*
            Reads     :      91 [5.32e+00 ~ 1.5%]
            Writes    :      84 [4.21e+00 ~ 1.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_base<__gnu_cxx::_S_atomic>::~_Sp_counted_base(std::_Sp_counted_base<__gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(114,7):remark #34051: REGISTER ALLOCATION : [_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EED1Ev] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:114

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       8
            Global    :       0
            Local     :       8
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_base<__gnu_cxx::_S_atomic>::~_Sp_counted_base(std::_Sp_counted_base<__gnu_cxx::_S_atomic> *const)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(113,7):remark #34051: REGISTER ALLOCATION : [_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EED0Ev] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:113

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_base<__gnu_cxx::_S_atomic>::_M_destroy(std::_Sp_counted_base<__gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(124,7):remark #34051: REGISTER ALLOCATION : [_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:124

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      19
            Global    :       7
            Local     :      12
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::shared_ptr<SAMRAI::tbox::Timer>::~shared_ptr(std::shared_ptr<SAMRAI::tbox::Timer> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr.h(93,11):remark #34051: REGISTER ALLOCATION : [_ZNSt10shared_ptrIN6SAMRAI4tbox5TimerEED1Ev] /usr/include/c++/4.8.5/bits/shared_ptr.h:93

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rdi r12-r13]
        
    Routine temporaries
        Total         :      24
            Global    :      12
            Local     :      12
        Regenerable   :       3
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(249,17):remark #34051: REGISTER ALLOCATION : [_ZNSt6vectorISt10shared_ptrIN6SAMRAI4pdat8CellDataIdEEESaIS5_EEC1Ev] /usr/include/c++/4.8.5/bits/stl_vector.h:249

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rax rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> &&)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(328,31):remark #34051: REGISTER ALLOCATION : [_ZNSt6vectorISt10shared_ptrIN6SAMRAI4pdat8CellDataIdEEESaIS5_EEC1EOS7_] /usr/include/c++/4.8.5/bits/stl_vector.h:328

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rsi rdi r8-r10]
        
    Routine temporaries
        Total         :      16
            Global    :       0
            Local     :      16
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<SAMRAI::pdat::ArrayData<Real> *, __gnu_cxx::_S_atomic>::_M_dispose(std::_Sp_counted_ptr<SAMRAI::pdat::ArrayData<Real> *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(290,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIPN6SAMRAI4pdat9ArrayDataIdEELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:290

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rbx rdi]
        
    Routine temporaries
        Total         :      14
            Global    :       8
            Local     :       6
        Regenerable   :       0
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<SAMRAI::pdat::ArrayData<Real> *, __gnu_cxx::_S_atomic>::_M_destroy(std::_Sp_counted_ptr<SAMRAI::pdat::ArrayData<Real> *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(294,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIPN6SAMRAI4pdat9ArrayDataIdEELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:294

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      19
            Global    :       7
            Local     :      12
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<SAMRAI::pdat::ArrayData<Real> *, __gnu_cxx::_S_atomic>::_M_get_deleter(std::_Sp_counted_ptr<SAMRAI::pdat::ArrayData<Real> *, __gnu_cxx::_S_atomic> *, const std::type_info &)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(298,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIPN6SAMRAI4pdat9ArrayDataIdEELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:298

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rsi rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<SAMRAI::pdat::ArrayData<Real> *, __gnu_cxx::_S_atomic>::~_Sp_counted_ptr(std::_Sp_counted_ptr<SAMRAI::pdat::ArrayData<Real> *, __gnu_cxx::_S_atomic> *const)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(281,11):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIPN6SAMRAI4pdat9ArrayDataIdEELN9__gnu_cxx12_Lock_policyE2EED0Ev] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:281

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<SAMRAI::pdat::ArrayData<Real> *, __gnu_cxx::_S_atomic>::~_Sp_counted_ptr(std::_Sp_counted_ptr<SAMRAI::pdat::ArrayData<Real> *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(281,11):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIPN6SAMRAI4pdat9ArrayDataIdEELN9__gnu_cxx12_Lock_policyE2EED1Ev] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:281

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       7
            Global    :       0
            Local     :       7
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<SAMRAI::pdat::CellData<Real> *, __gnu_cxx::_S_atomic>::_M_dispose(std::_Sp_counted_ptr<SAMRAI::pdat::CellData<Real> *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(290,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIPN6SAMRAI4pdat8CellDataIdEELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:290

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      20
            Global    :       7
            Local     :      13
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<SAMRAI::pdat::CellData<Real> *, __gnu_cxx::_S_atomic>::_M_destroy(std::_Sp_counted_ptr<SAMRAI::pdat::CellData<Real> *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(294,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIPN6SAMRAI4pdat8CellDataIdEELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:294

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      19
            Global    :       7
            Local     :      12
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<SAMRAI::pdat::CellData<Real> *, __gnu_cxx::_S_atomic>::_M_get_deleter(std::_Sp_counted_ptr<SAMRAI::pdat::CellData<Real> *, __gnu_cxx::_S_atomic> *, const std::type_info &)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(298,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIPN6SAMRAI4pdat8CellDataIdEELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:298

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rsi rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<SAMRAI::pdat::CellData<Real> *, __gnu_cxx::_S_atomic>::~_Sp_counted_ptr(std::_Sp_counted_ptr<SAMRAI::pdat::CellData<Real> *, __gnu_cxx::_S_atomic> *const)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(281,11):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIPN6SAMRAI4pdat8CellDataIdEELN9__gnu_cxx12_Lock_policyE2EED0Ev] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:281

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<SAMRAI::pdat::CellData<Real> *, __gnu_cxx::_S_atomic>::~_Sp_counted_ptr(std::_Sp_counted_ptr<SAMRAI::pdat::CellData<Real> *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(281,11):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIPN6SAMRAI4pdat8CellDataIdEELN9__gnu_cxx12_Lock_policyE2EED1Ev] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:281

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       7
            Global    :       0
            Local     :       7
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::tbox::MessageStream::getCurrentSize(const SAMRAI::tbox::MessageStream *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::tbox::MessageStream::getCurrentSize(const SAMRAI::tbox::MessageStream *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h(150,4)

===========================================================================

Begin optimization report for: SAMRAI::tbox::MessageStream::growAsNeeded(const SAMRAI::tbox::MessageStream *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::tbox::MessageStream::growAsNeeded(const SAMRAI::tbox::MessageStream *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h(362,4)

===========================================================================

Begin optimization report for: SAMRAI::tbox::MessageStream::copyDataIn(SAMRAI::tbox::MessageStream *, const void *, size_t)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::tbox::MessageStream::copyDataIn(SAMRAI::tbox::MessageStream *, const void *, size_t)) /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h(398,4)

===========================================================================

Begin optimization report for: SAMRAI::tbox::MessageStream::getSizeof<int>(size_t)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::tbox::MessageStream::getSizeof<int>(size_t)) /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h(128,4)

===========================================================================

Begin optimization report for: SAMRAI::tbox::MessageStream::getSizeof<bool>(size_t)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::tbox::MessageStream::getSizeof<bool>(size_t)) /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h(128,4)

===========================================================================

Begin optimization report for: SAMRAI::tbox::MessageStream::getSizeof<char>(size_t)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::tbox::MessageStream::getSizeof<char>(size_t)) /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h(128,4)

===========================================================================

Begin optimization report for: SAMRAI::tbox::MessageStream::getSizeof<dcomplex>(size_t)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::tbox::MessageStream::getSizeof<dcomplex>(size_t)) /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h(128,4)

===========================================================================

Begin optimization report for: SAMRAI::tbox::MessageStream::getSizeof<double>(size_t)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::tbox::MessageStream::getSizeof<double>(size_t)) /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h(128,4)

===========================================================================

Begin optimization report for: SAMRAI::tbox::MessageStream::getSizeof<float>(size_t)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::tbox::MessageStream::getSizeof<float>(size_t)) /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h(128,4)

===========================================================================

Begin optimization report for: SAMRAI::tbox::MessageStream::getWriteBuffer<Real>(SAMRAI::tbox::MessageStream *, size_t)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::tbox::MessageStream::getWriteBuffer<Real>(SAMRAI::tbox::MessageStream *, size_t)) /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h(215,4)

===========================================================================

Begin optimization report for: SAMRAI::tbox::MessageStream::pack<__gnu_cxx::__alloc_traits<std::allocator<double>>::value_type>(SAMRAI::tbox::MessageStream *, const __gnu_cxx::__alloc_traits<std::allocator<double>>::value_type *, size_t)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::tbox::MessageStream::pack<__gnu_cxx::__alloc_traits<std::allocator<double>>::value_type>(SAMRAI::tbox::MessageStream *, const __gnu_cxx::__alloc_traits<std::allocator<double>>::value_type *, size_t)) /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h(262,4)

===========================================================================

Begin optimization report for: SAMRAI::tbox::MessageStream::getReadBuffer<Real>(SAMRAI::tbox::MessageStream *, size_t)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::tbox::MessageStream::getReadBuffer<Real>(SAMRAI::tbox::MessageStream *, size_t)) /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h(193,4)

===========================================================================

Begin optimization report for: SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/Dimension.h(73,4)

===========================================================================

Begin optimization report for: SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/Dimension.h(137,4)

===========================================================================

Begin optimization report for: SAMRAI::tbox::Database::getVector(SAMRAI::tbox::Database *, const std::string &, std::vector<double, std::allocator<double>> &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::tbox::Database::getVector(SAMRAI::tbox::Database *, const std::string &, std::vector<double, std::allocator<double>> &)) /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/Database.h(1470,4)

===========================================================================

Begin optimization report for: SAMRAI::tbox::Database::putVector(SAMRAI::tbox::Database *, const std::string &, const std::vector<double, std::allocator<double>> &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::tbox::Database::putVector(SAMRAI::tbox::Database *, const std::string &, const std::vector<double, std::allocator<double>> &)) /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/Database.h(1486,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::BlockId::getBlockValue(const SAMRAI::hier::BlockId *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::BlockId::getBlockValue(const SAMRAI::hier::BlockId *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BlockId.h(119,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::BlockId::operator==(const SAMRAI::hier::BlockId *, const SAMRAI::hier::BlockId &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::BlockId::operator==(const SAMRAI::hier::BlockId *, const SAMRAI::hier::BlockId &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BlockId.h(155,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::IntVector::operator=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::IntVector::operator=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(186,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::IntVector::getNumBlocks(const SAMRAI::hier::IntVector *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::IntVector::getNumBlocks(const SAMRAI::hier::IntVector *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(215,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(253,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(269,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::IntVector::operator()(const SAMRAI::hier::IntVector *, SAMRAI::hier::BlockId::block_t, unsigned int) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::IntVector::operator()(const SAMRAI::hier::IntVector *, SAMRAI::hier::BlockId::block_t, unsigned int) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(340,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, int)) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(555,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::IntVector::operator*(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, int) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::IntVector::operator*(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, int) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(569,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::IntVector::operator==(const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::IntVector::operator==(const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(756,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(1132,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::IntVector::getOne(const SAMRAI::tbox::Dimension &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::IntVector::getOne(const SAMRAI::tbox::Dimension &)) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(1145,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(148,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Index::operator!=(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Index::operator!=(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(162,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Index::operator+=(SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Index::operator+=(SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &)) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(175,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Index::operator+(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Index::operator+(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(193,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Index::operator+=(SAMRAI::hier::Index *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Index::operator+=(SAMRAI::hier::Index *, int)) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(238,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Index::operator+(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, int) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Index::operator+(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, int) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(251,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Index::operator-=(SAMRAI::hier::Index *, const SAMRAI::hier::Index &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Index::operator-=(SAMRAI::hier::Index *, const SAMRAI::hier::Index &)) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(265,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(281,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Index::operator-=(SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Index::operator-=(SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &)) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(297,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(315,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Index::operator[](SAMRAI::hier::Index *, unsigned int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Index::operator[](SAMRAI::hier::Index *, unsigned int)) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(476,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Index::operator()(SAMRAI::hier::Index *, unsigned int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Index::operator()(SAMRAI::hier::Index *, unsigned int)) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(502,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(515,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(724,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Transformation::getRotation(const SAMRAI::hier::Transformation *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Transformation::getRotation(const SAMRAI::hier::Transformation *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Transformation.h(150,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Transformation::getOffset(const SAMRAI::hier::Transformation *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Transformation::getOffset(const SAMRAI::hier::Transformation *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Transformation.h(159,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Transformation::getBeginBlock(const SAMRAI::hier::Transformation *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Transformation::getBeginBlock(const SAMRAI::hier::Transformation *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Transformation.h(215,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Transformation::getEndBlock(const SAMRAI::hier::Transformation *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Transformation::getEndBlock(const SAMRAI::hier::Transformation *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Transformation.h(223,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Transformation::rotateIndex(SAMRAI::hier::Index &, SAMRAI::hier::Transformation::RotationIdentifier)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Transformation::rotateIndex(SAMRAI::hier::Index &, SAMRAI::hier::Transformation::RotationIdentifier)) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Transformation.h(336,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(495,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Box::upper(const SAMRAI::hier::Box *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Box::upper(const SAMRAI::hier::Box *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(515,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(598,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Box::numberCells(const SAMRAI::hier::Box *, SAMRAI::hier::Box::dir_t) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Box::numberCells(const SAMRAI::hier::Box *, SAMRAI::hier::Box::dir_t) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(622,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Box::size(const SAMRAI::hier::Box *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Box::size(const SAMRAI::hier::Box *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(652,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Box::offset(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Box::offset(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(679,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Box::isSpatiallyEqual(const SAMRAI::hier::Box *, const SAMRAI::hier::Box &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Box::isSpatiallyEqual(const SAMRAI::hier::Box *, const SAMRAI::hier::Box &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(753,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Box::operator=(SAMRAI::hier::Box *, const SAMRAI::tbox::DatabaseBox &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Box::operator=(SAMRAI::hier::Box *, const SAMRAI::tbox::DatabaseBox &)) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(1166,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Box::Box_from_DatabaseBox(SAMRAI::hier::Box *, const SAMRAI::tbox::DatabaseBox &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Box::Box_from_DatabaseBox(SAMRAI::hier::Box *, const SAMRAI::tbox::DatabaseBox &)) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(1182,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Box::operator void(SAMRAI::tbox::DatabaseBox *, const SAMRAI::hier::Box *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Box::operator void(SAMRAI::tbox::DatabaseBox *, const SAMRAI::hier::Box *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(1212,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Box::shift(SAMRAI::hier::Box *, const SAMRAI::hier::Box &, const SAMRAI::hier::IntVector &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Box::shift(SAMRAI::hier::Box *, const SAMRAI::hier::Box &, const SAMRAI::hier::IntVector &)) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(1248,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(1298,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h(692,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h(703,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h(159,7)

===========================================================================

Begin optimization report for: SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator->(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator->(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h(170,7)

===========================================================================

Begin optimization report for: SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *)) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h(201,7)

===========================================================================

Begin optimization report for: SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h(271,7)

===========================================================================

Begin optimization report for: SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchData.h(94,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchData.h(103,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::PatchData::getDim(const SAMRAI::hier::PatchData *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::PatchData::getDim(const SAMRAI::hier::PatchData *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchData.h(245,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Patch.h(93,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Patch::getPatchGeometry(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const SAMRAI::hier::Patch *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Patch::getPatchGeometry(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const SAMRAI::hier::Patch *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Patch.h(345,4)

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellIndex::operator+=(SAMRAI::pdat::CellIndex *, const SAMRAI::hier::IntVector &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::CellIndex::operator+=(SAMRAI::pdat::CellIndex *, const SAMRAI::hier::IntVector &)) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellIndex.h(83,4)

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellIndex::operator!=(const SAMRAI::pdat::CellIndex *, const SAMRAI::pdat::CellIndex &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::CellIndex::operator!=(const SAMRAI::pdat::CellIndex *, const SAMRAI::pdat::CellIndex &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellIndex.h(254,4)

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellIterator::operator*(const SAMRAI::pdat::CellIterator *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::CellIterator::operator*(const SAMRAI::pdat::CellIterator *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellIterator.h(76,4)

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellIterator::operator!=(const SAMRAI::pdat::CellIterator *, const SAMRAI::pdat::CellIterator &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::CellIterator::operator!=(const SAMRAI::pdat::CellIterator *, const SAMRAI::pdat::CellIterator &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellIterator.h(121,4)

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellData<Real>::~CellData(SAMRAI::pdat::CellData<Real> *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::pdat::CellData<Real>::~CellData(SAMRAI::pdat::CellData<Real> *)) [460] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(111,1)
  -> INLINE: (112,1) std::shared_ptr<SAMRAI::pdat::ArrayData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::ArrayData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(111,1):remark #34051: REGISTER ALLOCATION : [_ZN6SAMRAI4pdat8CellDataIdED1Ev] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:111

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rbx rbp rdi r15]
        
    Routine temporaries
        Total         :      32
            Global    :      13
            Local     :      19
        Regenerable   :       4
        Spilled       :       3
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellData<Real>::~CellData(SAMRAI::pdat::CellData<Real> *const)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::pdat::CellData<Real>::~CellData(SAMRAI::pdat::CellData<Real> *const)) [461] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(110,17)
  -> INLINE: (110,17) SAMRAI::pdat::CellData<Real>::~CellData(SAMRAI::pdat::CellData<Real> *)
    -> INLINE: (112,1) std::shared_ptr<SAMRAI::pdat::ArrayData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::ArrayData<Real>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(110,17):remark #34051: REGISTER ALLOCATION : [_ZN6SAMRAI4pdat8CellDataIdED0Ev] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:110

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rbx rdi r14-r15]
        
    Routine temporaries
        Total         :      33
            Global    :      13
            Local     :      20
        Regenerable   :       4
        Spilled       :       3
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellData<Real>::getDepth(const SAMRAI::pdat::CellData<Real> *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::CellData<Real>::getDepth(const SAMRAI::pdat::CellData<Real> *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(117,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(125,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellData<Real>::copy(SAMRAI::pdat::CellData<Real> *, const SAMRAI::hier::PatchData &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::pdat::CellData<Real>::copy(SAMRAI::pdat::CellData<Real> *, const SAMRAI::hier::PatchData &)) [464] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(212,1)
  -> INDIRECT- (VIRTUAL): (217,18)  SAMRAI::pdat::CellData<Real>::copy2(const SAMRAI::pdat::CellData<Real> *, SAMRAI::hier::PatchData &) const (473)
  -> INLINE: (219,35) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (219,37) SAMRAI::pdat::ArrayData<Real>::getBox(const SAMRAI::pdat::ArrayData<Real> *) const
  -> INLINE: (219,61) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (219,63) SAMRAI::pdat::ArrayData<Real>::getBox(const SAMRAI::pdat::ArrayData<Real> *) const
  -> INLINE: (220,16) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (221,16) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (221,18) SAMRAI::pdat::ArrayData<Real>::copy(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(294,15) SAMRAI::hier::Box::isSpatiallyEqual(const SAMRAI::hier::Box *, const SAMRAI::hier::Box &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(754,21) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(754,43) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,27) SAMRAI::hier::BlockId::operator==(const SAMRAI::hier::BlockId *, const SAMRAI::hier::BlockId &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,51) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,66) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(295,13) SAMRAI::hier::Box::isSpatiallyEqual(const SAMRAI::hier::Box *, const SAMRAI::hier::Box &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(754,21) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(754,43) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,27) SAMRAI::hier::BlockId::operator==(const SAMRAI::hier::BlockId *, const SAMRAI::hier::BlockId &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,51) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,66) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(297,37) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(298,47) std::vector<double, std::allocator<double>>::operator[](const std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(312,16) SAMRAI::pdat::CopyOperation<Real>::operator()(const SAMRAI::pdat::CopyOperation<Real> *, Real &, const Real &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(320,20) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(325,46) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(327,10) SAMRAI::pdat::ArrayDataOperationUtilities<Real, SAMRAI::pdat::CopyOperation<Real>>::doArrayDataOperationOnBox(SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &, const SAMRAI::hier::IntVector &, unsigned int, unsigned int, unsigned int, const SAMRAI::pdat::CopyOperation<Real> &)
  -> INLINE: (221,23) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(221,16)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(222,18)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(222,18)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(222,18)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(222,18)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(222,18)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(222,18)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(222,18)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(222,18)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(311,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(222,18)
   remark #25401: memcopy(with guard) generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(311,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(222,18)
   <Multiversioned v2>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(311,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(222,18)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(222,18)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
LOOP END

    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(311,7):remark #34026: call to memcpy implemented as a call to optimized library version
/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(212,1):remark #34051: REGISTER ALLOCATION : [_ZN6SAMRAI4pdat8CellDataIdE4copyERKNS_4hier9PatchDataE] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:212

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rbp rsi rdi r8-r11 r13 r15]
        
    Routine temporaries
        Total         :     173
            Global    :      60
            Local     :     113
        Regenerable   :      37
        Spilled       :       4
        
    Routine stack
        Variables     :     273 bytes*
            Reads     :      17 [9.01e+00 ~ 8.2%]
            Writes    :      10 [1.11e+00 ~ 1.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellData<Real>::copy2(const SAMRAI::pdat::CellData<Real> *, SAMRAI::hier::PatchData &) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::pdat::CellData<Real>::copy2(const SAMRAI::pdat::CellData<Real> *, SAMRAI::hier::PatchData &) const) [465] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(230,1)
  -> INLINE: (237,32) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (237,34) SAMRAI::pdat::ArrayData<Real>::getBox(const SAMRAI::pdat::ArrayData<Real> *) const
  -> INLINE: (237,58) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (237,60) SAMRAI::pdat::ArrayData<Real>::getBox(const SAMRAI::pdat::ArrayData<Real> *) const
  -> INLINE: (238,13) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (239,20) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (239,22) SAMRAI::pdat::ArrayData<Real>::copy(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(294,15) SAMRAI::hier::Box::isSpatiallyEqual(const SAMRAI::hier::Box *, const SAMRAI::hier::Box &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(754,21) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(754,43) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,27) SAMRAI::hier::BlockId::operator==(const SAMRAI::hier::BlockId *, const SAMRAI::hier::BlockId &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,51) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,66) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(295,13) SAMRAI::hier::Box::isSpatiallyEqual(const SAMRAI::hier::Box *, const SAMRAI::hier::Box &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(754,21) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(754,43) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,27) SAMRAI::hier::BlockId::operator==(const SAMRAI::hier::BlockId *, const SAMRAI::hier::BlockId &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,51) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,66) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(297,37) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(298,47) std::vector<double, std::allocator<double>>::operator[](const std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(312,16) SAMRAI::pdat::CopyOperation<Real>::operator()(const SAMRAI::pdat::CopyOperation<Real> *, Real &, const Real &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(320,20) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(325,46) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(327,10) SAMRAI::pdat::ArrayDataOperationUtilities<Real, SAMRAI::pdat::CopyOperation<Real>>::doArrayDataOperationOnBox(SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &, const SAMRAI::hier::IntVector &, unsigned int, unsigned int, unsigned int, const SAMRAI::pdat::CopyOperation<Real> &)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(64,35) SAMRAI::pdat::ArrayData<Real>::getDim(const SAMRAI::pdat::ArrayData<Real> *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1251,17) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(66,30) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(67,36) SAMRAI::pdat::ArrayData<Real>::getPointer(const SAMRAI::pdat::ArrayData<Real> *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(220,19) std::vector<double, std::allocator<double>>::operator[](const std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(70,33) SAMRAI::pdat::ArrayData<Real>::getBox(const SAMRAI::pdat::ArrayData<Real> *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(71,33) SAMRAI::pdat::ArrayData<Real>::getBox(const SAMRAI::pdat::ArrayData<Real> *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(77,47) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(77,47) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(78,24) SAMRAI::hier::Box::numberCells(const SAMRAI::hier::Box *, SAMRAI::hier::Box::dir_t) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(623,11) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
          -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(79,26) SAMRAI::hier::Box::numberCells(const SAMRAI::hier::Box *, SAMRAI::hier::Box::dir_t) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(623,11) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
          -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(80,26) SAMRAI::hier::Box::numberCells(const SAMRAI::hier::Box *, SAMRAI::hier::Box::dir_t) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(623,11) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
          -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(84,34) SAMRAI::pdat::ArrayData<Real>::getOffset(const SAMRAI::pdat::ArrayData<Real> *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(85,34) SAMRAI::pdat::ArrayData<Real>::getOffset(const SAMRAI::pdat::ArrayData<Real> *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(97,53) SAMRAI::hier::Box::size(const SAMRAI::hier::Box *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(654,12) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
          -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(655,44) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(655,54) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(657,48) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(657,58) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(99,31) SAMRAI::hier::Box::offset(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,29) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,38) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,18) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,32) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,49) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,59) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,40) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,50) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(99,44) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(100,31) SAMRAI::hier::Box::offset(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,29) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,38) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,18) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,32) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,49) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,59) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,40) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,50) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(100,44) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(100,52) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(319,11) SAMRAI::hier::Index::operator-=(SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &)
          -> INLINE: (300,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: (300,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: (301,27) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(187,52) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(187,52) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(199,15) SAMRAI::pdat::CopyOperation<Real>::operator()(const SAMRAI::pdat::CopyOperation<Real> *, Real &, const Real &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(208,53) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(208,53) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (239,27) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(239,13)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(311,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
   remark #25401: memcopy(with guard) generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(311,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
   <Multiversioned v2>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(311,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(77,47) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(656,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
   remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
   remark #25439: unrolled with remainder by 8  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(656,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
<Remainder>
   remark #25436: completely unrolled by 7  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between myoffset (682:10) and myoffset (682:10)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
<Remainder>
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(300,42) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 8  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between myoffset (682:10) and myoffset (682:10)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
<Remainder>
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(119,4) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between dst_b[nd] (188:10) and dst_b[m] (230:16)

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(187,52) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
      remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(187,52) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
   <Remainder>
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(196,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between vdst (31:4) and vdst (31:4)

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(198,10) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed FLOW dependence between vdst (31:4) and vsrc (31:4)
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(198,10) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
      <Remainder>
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(208,53) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
         remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(208,67) ]
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(222,13) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
         remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
         remark #25439: unrolled with remainder by 8  
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(229,13) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
         remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(229,13) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
      <Remainder>
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(222,13) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
      <Remainder>
         remark #25436: completely unrolled by 7  
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(311,7):remark #34026: call to memcpy implemented as a call to optimized library version
/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(230,1):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4pdat8CellDataIdE5copy2ERNS_4hier9PatchDataE] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:230

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     519
            Global    :     140
            Local     :     379
        Regenerable   :      35
        Spilled       :      18
        
    Routine stack
        Variables     :     392 bytes*
            Reads     :     114 [2.09e+02 ~ 10.3%]
            Writes    :      44 [1.54e+02 ~ 7.6%]
        Spills        :      96 bytes*
            Reads     :      21 [2.28e+01 ~ 1.1%]
            Writes    :      21 [1.27e+01 ~ 0.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellData<Real>::copy(SAMRAI::pdat::CellData<Real> *, const SAMRAI::hier::PatchData &, const SAMRAI::hier::BoxOverlap &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::pdat::CellData<Real>::copy(SAMRAI::pdat::CellData<Real> *, const SAMRAI::hier::PatchData &, const SAMRAI::hier::BoxOverlap &)) [466] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(257,1)
  -> INLINE: (258,10) std::__shared_ptr<SAMRAI::tbox::Timer, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::tbox::Timer, __gnu_cxx::_S_atomic> *) const
  -> INDIRECT- (VIRTUAL): (264,24)  SAMRAI::pdat::CellData<Real>::copy2(const SAMRAI::pdat::CellData<Real> *, SAMRAI::hier::PatchData &, const SAMRAI::hier::BoxOverlap &) const (475)
  -> INDIRECT- (VIRTUAL): (266,11)  EXPR_CONV.SI64.P64(*((SI64*) (t_overlap.179434_V$b21.0.474->__vptr_V$b22_2.32 + EXPR_CONV.SI32.I64(4(SI32)) * 8(I64))))
  -> INLINE: (266,42) SAMRAI::hier::Transformation::getRotation(const SAMRAI::hier::Transformation *) const
  -> INLINE: (268,16) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (268,18) SAMRAI::pdat::ArrayData<Real>::copy(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::BoxContainer &, const SAMRAI::hier::Transformation &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(451,54) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(452,11) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(452,11) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(452,20) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(452,20) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(452,27) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(203,13) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator++(std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *)
         {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(205,13) std::_List_const_iterator<SAMRAI::hier::Box>::operator++(std::_List_const_iterator<SAMRAI::hier::Box> *)
    -> /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(453,7) SAMRAI::pdat::ArrayData<Real>::copy(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &, const SAMRAI::hier::Transformation &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(453,17) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,30) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator*(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,44) std::_List_const_iterator<SAMRAI::hier::Box>::operator*(const std::_List_const_iterator<SAMRAI::hier::Box> *) const
  -> INLINE: (268,23) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INDIRECT- (VIRTUAL): (269,13)  EXPR_CONV.SI64.P64(*((SI64*) (t_overlap.179434_V$b21.0.474->__vptr_V$b22_2.32 + EXPR_CONV.SI32.I64(6(SI32)) * 8(I64))))
  -> INDIRECT- (VIRTUAL): (270,13)  EXPR_CONV.SI64.P64(*((SI64*) (t_overlap.179434_V$b21.0.474->__vptr_V$b22_2.32 + EXPR_CONV.SI32.I64(4(SI32)) * 8(I64))))
  -> INLINE: (272,10) SAMRAI::pdat::CellData<Real>::copyWithRotation(SAMRAI::pdat::CellData<Real> *, const SAMRAI::pdat::CellData<Real> &, const SAMRAI::pdat::CellOverlap &)
    -> INLINE: (320,35) SAMRAI::hier::PatchData::getDim(const SAMRAI::hier::PatchData *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchData.h:(246,20) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INDIRECT- (VIRTUAL): (321,46)  EXPR_CONV.SI64.P64(*((SI64*) (overlap_179467_V$b87.0.485.14385->__vptr_V$b22_2.32 + EXPR_CONV.SI32.I64(6(SI32)) * 8(I64))))
    -> INDIRECT- (VIRTUAL): (323,7)  EXPR_CONV.SI64.P64(*((SI64*) (overlap_179467_V$b87.0.485.14385->__vptr_V$b22_2.32 + EXPR_CONV.SI32.I64(4(SI32)) * 8(I64))))
    -> INLINE: (323,35) SAMRAI::hier::Transformation::getRotation(const SAMRAI::hier::Transformation *) const
    -> INDIRECT- (VIRTUAL): (324,35)  EXPR_CONV.SI64.P64(*((SI64*) (overlap_179467_V$b87.0.485.14385->__vptr_V$b22_2.32 + EXPR_CONV.SI32.I64(3(SI32)) * 8(I64))))
    -> INLINE: (326,28) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
    -> INDIRECT- (VIRTUAL): (327,4)  EXPR_CONV.SI64.P64(*((SI64*) (overlap_179467_V$b87.0.485.14385->__vptr_V$b22_2.32 + EXPR_CONV.SI32.I64(4(SI32)) * 8(I64))))
    -> INLINE: (338,63) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
    -> INLINE: (339,12) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
    -> INLINE: (339,12) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
    -> INLINE: (339,29) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
    -> INLINE: (339,29) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
    -> INLINE: (339,36) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(203,13) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator++(std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *)
         {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(205,13) std::_List_const_iterator<SAMRAI::hier::Box>::operator++(std::_List_const_iterator<SAMRAI::hier::Box> *)
    -> INLINE: (340,38) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,30) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator*(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,44) std::_List_const_iterator<SAMRAI::hier::Box>::operator*(const std::_List_const_iterator<SAMRAI::hier::Box> *) const
    -> INLINE: (344,20) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: (345,30) SAMRAI::pdat::CellData<Real>::getDepth(const SAMRAI::pdat::CellData<Real> *) const
    -> INLINE: (345,47) SAMRAI::pdat::CellData<Real>::getDepth(const SAMRAI::pdat::CellData<Real> *) const
    -> INLINE: (346,29) SAMRAI::pdat::CellData<Real>::getDepth(const SAMRAI::pdat::CellData<Real> *) const
    -> INLINE: (346,46) SAMRAI::pdat::CellData<Real>::getDepth(const SAMRAI::pdat::CellData<Real> *) const
    -> INLINE: (350,18) SAMRAI::pdat::CellIterator::operator!=(const SAMRAI::pdat::CellIterator *, const SAMRAI::pdat::CellIterator &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellIterator.h:(124,22) SAMRAI::pdat::CellIndex::operator!=(const SAMRAI::pdat::CellIndex *, const SAMRAI::pdat::CellIndex &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellIndex.h:(256,37) SAMRAI::hier::Index::operator!=(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(163,22) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
            -> INLINE: (150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
            -> INLINE: (150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: (350,18) SAMRAI::pdat::CellIterator::operator!=(const SAMRAI::pdat::CellIterator *, const SAMRAI::pdat::CellIterator &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellIterator.h:(124,22) SAMRAI::pdat::CellIndex::operator!=(const SAMRAI::pdat::CellIndex *, const SAMRAI::pdat::CellIndex &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellIndex.h:(256,37) SAMRAI::hier::Index::operator!=(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(163,22) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
            -> INLINE: (150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
            -> INLINE: (150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: (352,42) SAMRAI::pdat::CellIterator::operator*(const SAMRAI::pdat::CellIterator *) const
    -> INLINE: (354,13) SAMRAI::hier::Transformation::rotateIndex(SAMRAI::hier::Index &, SAMRAI::hier::Transformation::RotationIdentifier)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Transformation.h:(337,25) SAMRAI::hier::Index::operator[](SAMRAI::hier::Index *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Transformation.h:(337,36) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: (355,23) SAMRAI::pdat::CellIndex::operator+=(SAMRAI::pdat::CellIndex *, const SAMRAI::hier::IntVector &)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellIndex.h:(85,7) SAMRAI::hier::Index::operator+=(SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &)
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(178,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(178,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(179,27) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
    -> INLINE: (358,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: (358,25) SAMRAI::pdat::ArrayData<Real>::operator()(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::hier::Index &, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(251,18) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(251,19) SAMRAI::pdat::ArrayData<Real>::getIndex(const SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::hier::Index &, unsigned int) const
        -> INLINE: (197,25) SAMRAI::hier::Box::offset(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,29) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,38) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,18) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,32) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,49) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,59) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,40) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,50) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: (358,43) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: (358,55) SAMRAI::pdat::ArrayData<Real>::operator()(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::hier::Index &, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(251,18) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(251,19) SAMRAI::pdat::ArrayData<Real>::getIndex(const SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::hier::Index &, unsigned int) const
        -> INLINE: (197,25) SAMRAI::hier::Box::offset(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,29) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,38) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,18) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,32) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,49) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,59) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,40) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,50) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (275,10) std::__shared_ptr<SAMRAI::tbox::Timer, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::tbox::Timer, __gnu_cxx::_S_atomic> *) const


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(452,11) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(269,18)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(358,18) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(273,10)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(273,10)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(273,10)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(350,18) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(273,10)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(178,42) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(273,10)
         remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
         remark #25478: While Loop Unrolled by 8  
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(357,13) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(273,10)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed ANTI dependence between src (358:43) and this->d_array->_M_start[myoffset+ci.ci.ci.ci[0]-this->d_index[0] (358:25)

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(273,10)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed ANTI dependence between myoffset (682:10) and myoffset (682:10)
            remark #25439: unrolled with remainder by 2  
            remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(273,10)
         <Remainder>
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(273,10)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed ANTI dependence between myoffset (682:10) and myoffset (682:10)
            remark #25439: unrolled with remainder by 2  
            remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(273,10)
         <Remainder>
         LOOP END
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(273,10)
         remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(257,1):remark #34051: REGISTER ALLOCATION : [_ZN6SAMRAI4pdat8CellDataIdE4copyERKNS_4hier9PatchDataERKNS3_10BoxOverlapE] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:257

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     411
            Global    :     100
            Local     :     311
        Regenerable   :      80
        Spilled       :      13
        
    Routine stack
        Variables     :     512 bytes*
            Reads     :      62 [4.66e+02 ~ 6.0%]
            Writes    :      22 [9.25e+00 ~ 0.1%]
        Spills        :      56 bytes*
            Reads     :      12 [2.08e+02 ~ 2.7%]
            Writes    :      10 [2.01e+02 ~ 2.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::copy(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &, const SAMRAI::hier::Transformation &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::pdat::ArrayData<Real>::copy(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &, const SAMRAI::hier::Transformation &)) [467] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(391,1)
  -> INLINE: (392,23) SAMRAI::hier::Transformation::getRotation(const SAMRAI::hier::Transformation *) const
  -> INLINE: (392,90) SAMRAI::hier::Transformation::getOffset(const SAMRAI::hier::Transformation *) const
  -> INLINE: (392,102) SAMRAI::hier::IntVector::operator==(const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(762,43) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(763,59) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(764,44) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(764,72) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(768,47) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(770,41) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(770,60) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (392,105) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(1133,28) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (392,134) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
  -> INLINE: (392,162) SAMRAI::hier::Transformation::getBeginBlock(const SAMRAI::hier::Transformation *) const
  -> INLINE: (392,178) SAMRAI::hier::BlockId::operator==(const SAMRAI::hier::BlockId *, const SAMRAI::hier::BlockId &) const
  -> INLINE: (392,196) SAMRAI::hier::Transformation::getEndBlock(const SAMRAI::hier::Transformation *) const
  -> INLINE: (394,7) SAMRAI::pdat::ArrayData<Real>::copy(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &)
    -> INLINE: (294,15) SAMRAI::hier::Box::isSpatiallyEqual(const SAMRAI::hier::Box *, const SAMRAI::hier::Box &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(754,21) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(754,43) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,27) SAMRAI::hier::BlockId::operator==(const SAMRAI::hier::BlockId *, const SAMRAI::hier::BlockId &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,51) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,66) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: (295,13) SAMRAI::hier::Box::isSpatiallyEqual(const SAMRAI::hier::Box *, const SAMRAI::hier::Box &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(754,21) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(754,43) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,27) SAMRAI::hier::BlockId::operator==(const SAMRAI::hier::BlockId *, const SAMRAI::hier::BlockId &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,51) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,66) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: (297,37) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
    -> INLINE: (298,47) std::vector<double, std::allocator<double>>::operator[](const std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) const
    -> INLINE: (312,16) SAMRAI::pdat::CopyOperation<Real>::operator()(const SAMRAI::pdat::CopyOperation<Real> *, Real &, const Real &) const
    -> INLINE: (320,20) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: (325,46) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> (327,10) SAMRAI::pdat::ArrayDataOperationUtilities<Real, SAMRAI::pdat::CopyOperation<Real>>::doArrayDataOperationOnBox(SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &, const SAMRAI::hier::IntVector &, unsigned int, unsigned int, unsigned int, const SAMRAI::pdat::CopyOperation<Real> &)
  -> INLINE: (403,20) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> (411,10) SAMRAI::pdat::ArrayDataOperationUtilities<Real, SAMRAI::pdat::CopyOperation<Real>>::doArrayDataOperationOnBox(SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &, const SAMRAI::hier::IntVector &, unsigned int, unsigned int, unsigned int, const SAMRAI::pdat::CopyOperation<Real> &)
  -> INLINE: (415,55) SAMRAI::hier::Transformation::getOffset(const SAMRAI::hier::Transformation *) const


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(761,10) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(393,102)
   remark #15523: loop was not vectorized: loop control variable b was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(763,38) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(393,102)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(769,10) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(393,102)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(395,7)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(395,7)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(395,7)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(395,7)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(395,7)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(395,7)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(395,7)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(395,7)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(311,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(395,7)
   remark #25401: memcopy(with guard) generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(311,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(395,7)
   <Multiversioned v2>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(311,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(395,7)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(395,7)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(404,20)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
LOOP END

    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(311,7):remark #34026: call to memcpy implemented as a call to optimized library version
/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(391,1):remark #34051: REGISTER ALLOCATION : [_ZN6SAMRAI4pdat9ArrayDataIdE4copyERKS2_RKNS_4hier3BoxERKNS5_14TransformationE] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:391

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     229
            Global    :      72
            Local     :     157
        Regenerable   :      47
        Spilled       :       7
        
    Routine stack
        Variables     :     418 bytes*
            Reads     :      11 [5.40e+00 ~ 5.9%]
            Writes    :      10 [6.70e-01 ~ 0.7%]
        Spills        :      24 bytes*
            Reads     :       6 [2.30e-01 ~ 0.3%]
            Writes    :       3 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayDataOperationUtilities<Real, SAMRAI::pdat::CopyOperation<Real>>::doArrayDataOperationOnBox(SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &, const SAMRAI::hier::IntVector &, unsigned int, unsigned int, unsigned int, const SAMRAI::pdat::CopyOperation<Real> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::pdat::ArrayDataOperationUtilities<Real, SAMRAI::pdat::CopyOperation<Real>>::doArrayDataOperationOnBox(SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &, const SAMRAI::hier::IntVector &, unsigned int, unsigned int, unsigned int, const SAMRAI::pdat::CopyOperation<Real> &)) [468] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(59,1)
  -> INLINE: (64,35) SAMRAI::pdat::ArrayData<Real>::getDim(const SAMRAI::pdat::ArrayData<Real> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1251,17) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
  -> INLINE: (66,30) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (67,36) SAMRAI::pdat::ArrayData<Real>::getPointer(const SAMRAI::pdat::ArrayData<Real> *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(220,19) std::vector<double, std::allocator<double>>::operator[](const std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) const
  -> INLINE: (70,33) SAMRAI::pdat::ArrayData<Real>::getBox(const SAMRAI::pdat::ArrayData<Real> *) const
  -> INLINE: (71,33) SAMRAI::pdat::ArrayData<Real>::getBox(const SAMRAI::pdat::ArrayData<Real> *) const
  -> INLINE: (77,47) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (77,47) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (78,24) SAMRAI::hier::Box::numberCells(const SAMRAI::hier::Box *, SAMRAI::hier::Box::dir_t) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(623,11) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
      -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (79,26) SAMRAI::hier::Box::numberCells(const SAMRAI::hier::Box *, SAMRAI::hier::Box::dir_t) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(623,11) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
      -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (80,26) SAMRAI::hier::Box::numberCells(const SAMRAI::hier::Box *, SAMRAI::hier::Box::dir_t) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(623,11) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
      -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (84,34) SAMRAI::pdat::ArrayData<Real>::getOffset(const SAMRAI::pdat::ArrayData<Real> *) const
  -> INLINE: (85,34) SAMRAI::pdat::ArrayData<Real>::getOffset(const SAMRAI::pdat::ArrayData<Real> *) const
  -> INLINE: (97,53) SAMRAI::hier::Box::size(const SAMRAI::hier::Box *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(654,12) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
      -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(655,44) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(655,54) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(657,48) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(657,58) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (99,31) SAMRAI::hier::Box::offset(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,29) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,38) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,18) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,32) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,49) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,59) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,40) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,50) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (99,44) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (100,31) SAMRAI::hier::Box::offset(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,29) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,38) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,18) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,32) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,49) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,59) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,40) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,50) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (100,44) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (100,52) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(319,11) SAMRAI::hier::Index::operator-=(SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &)
      -> INLINE: (300,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (300,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (301,27) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (187,52) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (187,52) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (199,15) SAMRAI::pdat::CopyOperation<Real>::operator()(const SAMRAI::pdat::CopyOperation<Real> *, Real &, const Real &) const
  -> INLINE: (208,53) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (208,53) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(77,47)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(79,24)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(80,26)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(81,26)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(98,53)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(656,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(98,53)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 2  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(100,31)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between myoffset (682:10) and myoffset (682:10)
   remark #25439: unrolled with remainder by 2  
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(100,31)
<Remainder>
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(300,42) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(101,52)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 8  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(101,31)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between myoffset (682:10) and myoffset (682:10)
   remark #25439: unrolled with remainder by 2  
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(101,31)
<Remainder>
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(119,4)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between dst_b[nd] (188:10) and dst_b[m] (230:16)

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(187,52)
      remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(187,52)
   <Remainder>
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(196,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between vdst (31:4) and vdst (31:4)

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(198,10)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed FLOW dependence between vdst (31:4) and vsrc (31:4)
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(198,10)
      <Remainder>
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(208,53)
         remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(208,67) ]
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(222,13)
         remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
         remark #25439: unrolled with remainder by 8  
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(229,13)
         remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(229,13)
      <Remainder>
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(222,13)
      <Remainder>
         remark #25436: completely unrolled by 7  
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(59,1):remark #34051: REGISTER ALLOCATION : [_ZN6SAMRAI4pdat27ArrayDataOperationUtilitiesIdNS0_13CopyOperationIdEEE25doArrayDataOperationOnBoxERNS0_9ArrayDataIdEERKS6_RKNS_4hier3BoxERKNSA_9IntVectorEjjjRKS3_] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:59

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     297
            Global    :      96
            Local     :     201
        Regenerable   :       8
        Spilled       :      20
        
    Routine stack
        Variables     :     120 bytes*
            Reads     :      50 [3.48e+02 ~ 9.1%]
            Writes    :      29 [2.98e+02 ~ 7.8%]
        Spills        :     112 bytes*
            Reads     :      20 [4.38e+01 ~ 1.1%]
            Writes    :      20 [2.80e+01 ~ 0.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellData<Real>::copy2(const SAMRAI::pdat::CellData<Real> *, SAMRAI::hier::PatchData &, const SAMRAI::hier::BoxOverlap &) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::pdat::CellData<Real>::copy2(const SAMRAI::pdat::CellData<Real> *, SAMRAI::hier::PatchData &, const SAMRAI::hier::BoxOverlap &) const) [469] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(283,1)
  -> INDIRECT- (VIRTUAL): (290,8)  EXPR_CONV.SI64.P64(*((SI64*) (t_overlap.179492_V$b3a.0.475->__vptr_V$b22_2.32 + EXPR_CONV.SI32.I64(4(SI32)) * 8(I64))))
  -> INLINE: (290,39) SAMRAI::hier::Transformation::getRotation(const SAMRAI::hier::Transformation *) const
  -> INLINE: (293,20) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (293,22) SAMRAI::pdat::ArrayData<Real>::copy(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::BoxContainer &, const SAMRAI::hier::Transformation &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(451,54) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(452,11) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(452,11) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(452,20) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(452,20) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(452,27) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(203,13) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator++(std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *)
         {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(205,13) std::_List_const_iterator<SAMRAI::hier::Box>::operator++(std::_List_const_iterator<SAMRAI::hier::Box> *)
    -> /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(453,7) SAMRAI::pdat::ArrayData<Real>::copy(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &, const SAMRAI::hier::Transformation &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(453,17) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,30) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator*(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,44) std::_List_const_iterator<SAMRAI::hier::Box>::operator*(const std::_List_const_iterator<SAMRAI::hier::Box> *) const
  -> INLINE: (293,27) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INDIRECT- (VIRTUAL): (294,10)  EXPR_CONV.SI64.P64(*((SI64*) (t_overlap.179492_V$b3a.0.475->__vptr_V$b22_2.32 + EXPR_CONV.SI32.I64(6(SI32)) * 8(I64))))
  -> INDIRECT- (VIRTUAL): (295,10)  EXPR_CONV.SI64.P64(*((SI64*) (t_overlap.179492_V$b3a.0.475->__vptr_V$b22_2.32 + EXPR_CONV.SI32.I64(4(SI32)) * 8(I64))))
  -> INLINE: (297,14) SAMRAI::pdat::CellData<Real>::copyWithRotation(SAMRAI::pdat::CellData<Real> *, const SAMRAI::pdat::CellData<Real> &, const SAMRAI::pdat::CellOverlap &)
    -> INLINE: (320,35) SAMRAI::hier::PatchData::getDim(const SAMRAI::hier::PatchData *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchData.h:(246,20) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INDIRECT- (VIRTUAL): (321,46)  EXPR_CONV.SI64.P64(*((SI64*) (overlap_179467_V$b87.0.485.14301->__vptr_V$b22_2.32 + EXPR_CONV.SI32.I64(6(SI32)) * 8(I64))))
    -> INDIRECT- (VIRTUAL): (323,7)  EXPR_CONV.SI64.P64(*((SI64*) (overlap_179467_V$b87.0.485.14301->__vptr_V$b22_2.32 + EXPR_CONV.SI32.I64(4(SI32)) * 8(I64))))
    -> INLINE: (323,35) SAMRAI::hier::Transformation::getRotation(const SAMRAI::hier::Transformation *) const
    -> INDIRECT- (VIRTUAL): (324,35)  EXPR_CONV.SI64.P64(*((SI64*) (overlap_179467_V$b87.0.485.14301->__vptr_V$b22_2.32 + EXPR_CONV.SI32.I64(3(SI32)) * 8(I64))))
    -> INLINE: (326,28) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
    -> INDIRECT- (VIRTUAL): (327,4)  EXPR_CONV.SI64.P64(*((SI64*) (overlap_179467_V$b87.0.485.14301->__vptr_V$b22_2.32 + EXPR_CONV.SI32.I64(4(SI32)) * 8(I64))))
    -> INLINE: (338,63) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
    -> INLINE: (339,12) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
    -> INLINE: (339,12) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
    -> INLINE: (339,29) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
    -> INLINE: (339,29) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
    -> INLINE: (339,36) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(203,13) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator++(std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *)
         {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(205,13) std::_List_const_iterator<SAMRAI::hier::Box>::operator++(std::_List_const_iterator<SAMRAI::hier::Box> *)
    -> INLINE: (340,38) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,30) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator*(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,44) std::_List_const_iterator<SAMRAI::hier::Box>::operator*(const std::_List_const_iterator<SAMRAI::hier::Box> *) const
    -> INLINE: (344,20) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: (345,30) SAMRAI::pdat::CellData<Real>::getDepth(const SAMRAI::pdat::CellData<Real> *) const
    -> INLINE: (345,47) SAMRAI::pdat::CellData<Real>::getDepth(const SAMRAI::pdat::CellData<Real> *) const
    -> INLINE: (346,29) SAMRAI::pdat::CellData<Real>::getDepth(const SAMRAI::pdat::CellData<Real> *) const
    -> INLINE: (346,46) SAMRAI::pdat::CellData<Real>::getDepth(const SAMRAI::pdat::CellData<Real> *) const
    -> INLINE: (350,18) SAMRAI::pdat::CellIterator::operator!=(const SAMRAI::pdat::CellIterator *, const SAMRAI::pdat::CellIterator &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellIterator.h:(124,22) SAMRAI::pdat::CellIndex::operator!=(const SAMRAI::pdat::CellIndex *, const SAMRAI::pdat::CellIndex &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellIndex.h:(256,37) SAMRAI::hier::Index::operator!=(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(163,22) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
            -> INLINE: (150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
            -> INLINE: (150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: (350,18) SAMRAI::pdat::CellIterator::operator!=(const SAMRAI::pdat::CellIterator *, const SAMRAI::pdat::CellIterator &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellIterator.h:(124,22) SAMRAI::pdat::CellIndex::operator!=(const SAMRAI::pdat::CellIndex *, const SAMRAI::pdat::CellIndex &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellIndex.h:(256,37) SAMRAI::hier::Index::operator!=(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(163,22) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
            -> INLINE: (150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
            -> INLINE: (150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: (352,42) SAMRAI::pdat::CellIterator::operator*(const SAMRAI::pdat::CellIterator *) const
    -> INLINE: (354,13) SAMRAI::hier::Transformation::rotateIndex(SAMRAI::hier::Index &, SAMRAI::hier::Transformation::RotationIdentifier)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Transformation.h:(337,25) SAMRAI::hier::Index::operator[](SAMRAI::hier::Index *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Transformation.h:(337,36) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: (355,23) SAMRAI::pdat::CellIndex::operator+=(SAMRAI::pdat::CellIndex *, const SAMRAI::hier::IntVector &)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellIndex.h:(85,7) SAMRAI::hier::Index::operator+=(SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &)
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(178,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(178,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(179,27) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
    -> INLINE: (358,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: (358,25) SAMRAI::pdat::ArrayData<Real>::operator()(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::hier::Index &, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(251,18) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(251,19) SAMRAI::pdat::ArrayData<Real>::getIndex(const SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::hier::Index &, unsigned int) const
        -> INLINE: (197,25) SAMRAI::hier::Box::offset(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,29) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,38) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,18) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,32) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,49) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,59) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,40) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,50) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: (358,43) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: (358,55) SAMRAI::pdat::ArrayData<Real>::operator()(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::hier::Index &, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(251,18) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(251,19) SAMRAI::pdat::ArrayData<Real>::getIndex(const SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::hier::Index &, unsigned int) const
        -> INLINE: (197,25) SAMRAI::hier::Box::offset(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,29) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,38) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,18) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,32) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,49) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,59) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,40) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,50) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(452,11) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(294,22)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(358,18) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(298,14)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(298,14)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(298,14)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(350,18) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(298,14)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(178,42) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(298,14)
         remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
         remark #25478: While Loop Unrolled by 8  
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(357,13) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(298,14)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed ANTI dependence between src (358:43) and this->d_array->_M_start[myoffset+ci.ci.ci.ci[0]-this->d_index[0] (358:25)

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(298,14)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed ANTI dependence between myoffset (682:10) and myoffset (682:10)
            remark #25439: unrolled with remainder by 2  
            remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(298,14)
         <Remainder>
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(298,14)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed ANTI dependence between myoffset (682:10) and myoffset (682:10)
            remark #25439: unrolled with remainder by 2  
            remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(298,14)
         <Remainder>
         LOOP END
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(298,14)
         remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(283,1):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4pdat8CellDataIdE5copy2ERNS_4hier9PatchDataERKNS3_10BoxOverlapE] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:283

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     384
            Global    :      92
            Local     :     292
        Regenerable   :      70
        Spilled       :      14
        
    Routine stack
        Variables     :     512 bytes*
            Reads     :      62 [6.02e+02 ~ 6.1%]
            Writes    :      22 [1.19e+01 ~ 0.1%]
        Spills        :      64 bytes*
            Reads     :      12 [2.40e+02 ~ 2.4%]
            Writes    :      10 [2.30e+02 ~ 2.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellData<Real>::copyDepth(SAMRAI::pdat::CellData<Real> *, int, const SAMRAI::pdat::CellData<Real> &, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::pdat::CellData<Real>::copyDepth(SAMRAI::pdat::CellData<Real> *, int, const SAMRAI::pdat::CellData<Real> &, int)) [470] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(381,1)
  -> INLINE: (384,32) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (384,34) SAMRAI::pdat::ArrayData<Real>::getBox(const SAMRAI::pdat::ArrayData<Real> *) const
  -> INLINE: (384,55) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (384,57) SAMRAI::pdat::ArrayData<Real>::getBox(const SAMRAI::pdat::ArrayData<Real> *) const
  -> INLINE: (385,13) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (386,13) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (386,15) SAMRAI::pdat::ArrayData<Real>::copyDepth(SAMRAI::pdat::ArrayData<Real> *, unsigned int, const SAMRAI::pdat::ArrayData<Real> &, unsigned int, const SAMRAI::hier::Box &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(485,15) SAMRAI::hier::Box::isSpatiallyEqual(const SAMRAI::hier::Box *, const SAMRAI::hier::Box &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(754,21) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(754,43) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,27) SAMRAI::hier::BlockId::operator==(const SAMRAI::hier::BlockId *, const SAMRAI::hier::BlockId &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,51) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,66) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(485,52) SAMRAI::hier::Box::isSpatiallyEqual(const SAMRAI::hier::Box *, const SAMRAI::hier::Box &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(754,21) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(754,43) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,27) SAMRAI::hier::BlockId::operator==(const SAMRAI::hier::BlockId *, const SAMRAI::hier::BlockId &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,51) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,66) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(487,37) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(488,47) std::vector<double, std::allocator<double>>::operator[](const std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(506,16) SAMRAI::pdat::CopyOperation<Real>::operator()(const SAMRAI::pdat::CopyOperation<Real> *, Real &, const Real &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(513,20) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(518,46) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(520,10) SAMRAI::pdat::ArrayDataOperationUtilities<Real, SAMRAI::pdat::CopyOperation<Real>>::doArrayDataOperationOnBox(SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &, const SAMRAI::hier::IntVector &, unsigned int, unsigned int, unsigned int, const SAMRAI::pdat::CopyOperation<Real> &)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(64,35) SAMRAI::pdat::ArrayData<Real>::getDim(const SAMRAI::pdat::ArrayData<Real> *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1251,17) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(66,30) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(67,36) SAMRAI::pdat::ArrayData<Real>::getPointer(const SAMRAI::pdat::ArrayData<Real> *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(220,19) std::vector<double, std::allocator<double>>::operator[](const std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(70,33) SAMRAI::pdat::ArrayData<Real>::getBox(const SAMRAI::pdat::ArrayData<Real> *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(71,33) SAMRAI::pdat::ArrayData<Real>::getBox(const SAMRAI::pdat::ArrayData<Real> *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(77,47) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(77,47) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(78,24) SAMRAI::hier::Box::numberCells(const SAMRAI::hier::Box *, SAMRAI::hier::Box::dir_t) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(623,11) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
          -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(79,26) SAMRAI::hier::Box::numberCells(const SAMRAI::hier::Box *, SAMRAI::hier::Box::dir_t) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(623,11) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
          -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(80,26) SAMRAI::hier::Box::numberCells(const SAMRAI::hier::Box *, SAMRAI::hier::Box::dir_t) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(623,11) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
          -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(84,34) SAMRAI::pdat::ArrayData<Real>::getOffset(const SAMRAI::pdat::ArrayData<Real> *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(85,34) SAMRAI::pdat::ArrayData<Real>::getOffset(const SAMRAI::pdat::ArrayData<Real> *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(97,53) SAMRAI::hier::Box::size(const SAMRAI::hier::Box *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(654,12) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
          -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(655,44) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(655,54) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(657,48) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(657,58) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(99,31) SAMRAI::hier::Box::offset(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,29) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,38) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,18) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,32) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,49) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,59) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,40) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,50) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(99,44) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(100,31) SAMRAI::hier::Box::offset(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,29) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,38) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,18) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,32) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,49) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,59) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,40) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,50) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(100,44) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(100,52) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(319,11) SAMRAI::hier::Index::operator-=(SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &)
          -> INLINE: (300,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: (300,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: (301,27) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(187,52) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(187,52) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(199,15) SAMRAI::pdat::CopyOperation<Real>::operator()(const SAMRAI::pdat::CopyOperation<Real> *, Real &, const Real &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(208,53) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(208,53) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (386,36) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(386,13)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(505,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
   remark #25401: memcopy(with guard) generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(505,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
   <Multiversioned v2>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(505,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(77,47) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(656,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
   remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
   remark #25439: unrolled with remainder by 8  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(656,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
<Remainder>
   remark #25436: completely unrolled by 7  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between myoffset (682:10) and myoffset (682:10)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
<Remainder>
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(300,42) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 8  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between myoffset (682:10) and myoffset (682:10)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
<Remainder>
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(187,52) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
   remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(187,52) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
<Remainder>
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(196,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between vdst (31:4) and vdst (31:4)

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(198,10) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between vdst (31:4) and vsrc (31:4)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(198,10) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
   <Remainder>
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(208,53) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(208,67) ]
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(222,13) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
      remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
      remark #25439: unrolled with remainder by 8  
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(229,13) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
      remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(229,13) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
   <Remainder>
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(222,13) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
   <Remainder>
      remark #25436: completely unrolled by 7  
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(505,7):remark #34026: call to memcpy implemented as a call to optimized library version
/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(381,1):remark #34051: REGISTER ALLOCATION : [_ZN6SAMRAI4pdat8CellDataIdE9copyDepthEiRKS2_i] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:381

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     540
            Global    :     143
            Local     :     397
        Regenerable   :      34
        Spilled       :      14
        
    Routine stack
        Variables     :     392 bytes*
            Reads     :     114 [1.93e+02 ~ 10.5%]
            Writes    :      44 [1.41e+02 ~ 7.6%]
        Spills        :      64 bytes*
            Reads     :      12 [6.36e+00 ~ 0.3%]
            Writes    :      12 [2.59e+00 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellData<Real>::canEstimateStreamSizeFromBox(const SAMRAI::pdat::CellData<Real> *) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::pdat::CellData<Real>::canEstimateStreamSizeFromBox(const SAMRAI::pdat::CellData<Real> *) const) [471] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(402,1)
  -> INLINE: (403,11) SAMRAI::pdat::ArrayData<Real>::canEstimateStreamSizeFromBox()
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(64,22) std::type_info::operator==(const std::type_info *, const std::type_info &) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(64,55) std::type_info::operator==(const std::type_info *, const std::type_info &) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(64,88) std::type_info::operator==(const std::type_info *, const std::type_info &) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(64,123) std::type_info::operator==(const std::type_info *, const std::type_info &) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(64,157) std::type_info::operator==(const std::type_info *, const std::type_info &) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(64,189) std::type_info::operator==(const std::type_info *, const std::type_info &) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(402,1):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4pdat8CellDataIdE28canEstimateStreamSizeFromBoxEv] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:402

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rcx rsi rdi]
        
    Routine temporaries
        Total         :      24
            Global    :      12
            Local     :      12
        Regenerable   :      17
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellData<Real>::getDataStreamSize(const SAMRAI::pdat::CellData<Real> *, const SAMRAI::hier::BoxOverlap &) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::pdat::CellData<Real>::getDataStreamSize(const SAMRAI::pdat::CellData<Real> *, const SAMRAI::hier::BoxOverlap &) const) [472] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(410,1)
  -> INLINE: (415,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (415,19) SAMRAI::pdat::ArrayData<Real>::getDataStreamSize(const SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::hier::BoxContainer &, const SAMRAI::hier::IntVector &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(770,21) std::type_info::operator==(const std::type_info *, const std::type_info &) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(771,14) SAMRAI::tbox::MessageStream::getSizeof<bool>(size_t)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(772,28) std::type_info::operator==(const std::type_info *, const std::type_info &) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(773,14) SAMRAI::tbox::MessageStream::getSizeof<char>(size_t)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(774,28) std::type_info::operator==(const std::type_info *, const std::type_info &) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(775,14) SAMRAI::tbox::MessageStream::getSizeof<dcomplex>(size_t)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(776,28) std::type_info::operator==(const std::type_info *, const std::type_info &) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(777,14) SAMRAI::tbox::MessageStream::getSizeof<double>(size_t)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(778,28) std::type_info::operator==(const std::type_info *, const std::type_info &) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(779,14) SAMRAI::tbox::MessageStream::getSizeof<float>(size_t)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(780,28) std::type_info::operator==(const std::type_info *, const std::type_info &) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(781,14) SAMRAI::tbox::MessageStream::getSizeof<int>(size_t)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(784,4) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(784,4) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(784,4) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(784,4) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(784,4) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(784,4) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(784,4) std::allocator<char>::allocator(std::allocator<char> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(784,4) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(784,4) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(784,4) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(784,4) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(784,4) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(784,4) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INDIRECT- (VIRTUAL): (416,7)  EXPR_CONV.SI64.P64(*((SI64*) (t_overlap.179926_V$b43.0.478->__vptr_V$b22_2.32 + EXPR_CONV.SI32.I64(6(SI32)) * 8(I64))))
  -> INDIRECT- (VIRTUAL): (417,7)  EXPR_CONV.SI64.P64(*((SI64*) (t_overlap.179926_V$b43.0.478->__vptr_V$b22_2.32 + EXPR_CONV.SI32.I64(3(SI32)) * 8(I64))))


    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(410,1):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4pdat8CellDataIdE17getDataStreamSizeERKNS_4hier10BoxOverlapE] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:410

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rbx rbp rsi rdi r15]
        
    Routine temporaries
        Total         :      51
            Global    :      23
            Local     :      28
        Regenerable   :      13
        Spilled       :       3
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellData<Real>::packStream(const SAMRAI::pdat::CellData<Real> *, SAMRAI::tbox::MessageStream &, const SAMRAI::hier::BoxOverlap &) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::pdat::CellData<Real>::packStream(const SAMRAI::pdat::CellData<Real> *, SAMRAI::tbox::MessageStream &, const SAMRAI::hier::BoxOverlap &) const) [473] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(434,1)
  -> INDIRECT- (VIRTUAL): (439,8)  EXPR_CONV.SI64.P64(*((SI64*) (t_overlap.180592_V$b47.0.479->__vptr_V$b22_2.32 + EXPR_CONV.SI32.I64(4(SI32)) * 8(I64))))
  -> INLINE: (439,39) SAMRAI::hier::Transformation::getRotation(const SAMRAI::hier::Transformation *) const
  -> INLINE: (441,13) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> (441,15) SAMRAI::pdat::ArrayData<Real>::packStream(const SAMRAI::pdat::ArrayData<Real> *, SAMRAI::tbox::MessageStream &, const SAMRAI::hier::BoxContainer &, const SAMRAI::hier::Transformation &) const
  -> INDIRECT- (VIRTUAL): (441,34)  EXPR_CONV.SI64.P64(*((SI64*) (t_overlap.180592_V$b47.0.479->__vptr_V$b22_2.32 + EXPR_CONV.SI32.I64(6(SI32)) * 8(I64))))
  -> INDIRECT- (VIRTUAL): (442,10)  EXPR_CONV.SI64.P64(*((SI64*) (t_overlap.180592_V$b47.0.479->__vptr_V$b22_2.32 + EXPR_CONV.SI32.I64(4(SI32)) * 8(I64))))
  -> (444,7) SAMRAI::pdat::CellData<Real>::packWithRotation(const SAMRAI::pdat::CellData<Real> *, SAMRAI::tbox::MessageStream &, const SAMRAI::pdat::CellOverlap &) const


    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(434,1):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4pdat8CellDataIdE10packStreamERNS_4tbox13MessageStreamERKNS_4hier10BoxOverlapE] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:434

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rbx rsi rdi r13-r15]
        
    Routine temporaries
        Total         :      32
            Global    :      16
            Local     :      16
        Regenerable   :       0
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellData<Real>::packWithRotation(const SAMRAI::pdat::CellData<Real> *, SAMRAI::tbox::MessageStream &, const SAMRAI::pdat::CellOverlap &) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::pdat::CellData<Real>::packWithRotation(const SAMRAI::pdat::CellData<Real> *, SAMRAI::tbox::MessageStream &, const SAMRAI::pdat::CellOverlap &) const) [474] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(453,1)
  -> INLINE: (457,31) SAMRAI::hier::PatchData::getDim(const SAMRAI::hier::PatchData *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchData.h:(246,20) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
  -> INDIRECT- (VIRTUAL): (458,46)  EXPR_CONV.SI64.P64(*((SI64*) (overlap_180812_V$b9c.0.486->__vptr_V$b22_2.32 + EXPR_CONV.SI32.I64(6(SI32)) * 8(I64))))
  -> INDIRECT- (VIRTUAL): (460,7)  EXPR_CONV.SI64.P64(*((SI64*) (overlap_180812_V$b9c.0.486->__vptr_V$b22_2.32 + EXPR_CONV.SI32.I64(4(SI32)) * 8(I64))))
  -> INLINE: (460,35) SAMRAI::hier::Transformation::getRotation(const SAMRAI::hier::Transformation *) const
  -> INDIRECT- (VIRTUAL): (461,35)  EXPR_CONV.SI64.P64(*((SI64*) (overlap_180812_V$b9c.0.486->__vptr_V$b22_2.32 + EXPR_CONV.SI32.I64(3(SI32)) * 8(I64))))
  -> INLINE: (463,24) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> INDIRECT- (VIRTUAL): (464,4)  EXPR_CONV.SI64.P64(*((SI64*) (overlap_180812_V$b9c.0.486->__vptr_V$b22_2.32 + EXPR_CONV.SI32.I64(4(SI32)) * 8(I64))))
  -> INLINE: (475,22) SAMRAI::pdat::CellData<Real>::getDepth(const SAMRAI::pdat::CellData<Real> *) const
  -> DELETED: (478,22) std::allocator<double>::~allocator(std::allocator<double> *)
  -> DELETED: (478,29) std::allocator<double>::~allocator(std::allocator<double> *)
  -> INLINE: (478,29) std::allocator<double>::allocator(std::allocator<double> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (478,29) std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type, const std::vector<double, std::allocator<double>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (478,29) std::vector<double, std::allocator<double>>::~vector(std::vector<double, std::allocator<double>> *)
  -> INLINE: (481,63) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (482,12) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
  -> INLINE: (482,12) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
  -> INLINE: (482,29) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (482,29) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (482,36) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(203,13) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator++(std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(205,13) std::_List_const_iterator<SAMRAI::hier::Box>::operator++(std::_List_const_iterator<SAMRAI::hier::Box> *)
  -> INLINE: (483,38) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,30) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator*(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,44) std::_List_const_iterator<SAMRAI::hier::Box>::operator*(const std::_List_const_iterator<SAMRAI::hier::Box> *) const
  -> INLINE: (487,20) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (492,21) SAMRAI::pdat::CellIterator::operator!=(const SAMRAI::pdat::CellIterator *, const SAMRAI::pdat::CellIterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellIterator.h:(124,22) SAMRAI::pdat::CellIndex::operator!=(const SAMRAI::pdat::CellIndex *, const SAMRAI::pdat::CellIndex &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellIndex.h:(256,37) SAMRAI::hier::Index::operator!=(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(163,22) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
          -> INLINE: (150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: (150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (492,21) SAMRAI::pdat::CellIterator::operator!=(const SAMRAI::pdat::CellIterator *, const SAMRAI::pdat::CellIterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellIterator.h:(124,22) SAMRAI::pdat::CellIndex::operator!=(const SAMRAI::pdat::CellIndex *, const SAMRAI::pdat::CellIndex &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellIndex.h:(256,37) SAMRAI::hier::Index::operator!=(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(163,22) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
          -> INLINE: (150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: (150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (494,36) SAMRAI::pdat::CellIterator::operator*(const SAMRAI::pdat::CellIterator *) const
  -> INLINE: (495,16) SAMRAI::hier::Transformation::rotateIndex(SAMRAI::hier::Index &, SAMRAI::hier::Transformation::RotationIdentifier)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Transformation.h:(337,25) SAMRAI::hier::Index::operator[](SAMRAI::hier::Index *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Transformation.h:(337,36) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
  -> INLINE: (496,26) SAMRAI::pdat::CellIndex::operator+=(SAMRAI::pdat::CellIndex *, const SAMRAI::hier::IntVector &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellIndex.h:(85,7) SAMRAI::hier::Index::operator+=(SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(178,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(178,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(179,27) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (498,22) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (498,29) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (498,37) SAMRAI::pdat::ArrayData<Real>::operator()(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::hier::Index &, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(251,18) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(251,19) SAMRAI::pdat::ArrayData<Real>::getIndex(const SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::hier::Index &, unsigned int) const
      -> INLINE: (197,25) SAMRAI::hier::Box::offset(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,29) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,38) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,18) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,32) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,49) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,59) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,40) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,50) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (505,11) std::vector<double, std::allocator<double>>::~vector(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (505,11) SAMRAI::tbox::MessageStream::pack<__gnu_cxx::__alloc_traits<std::allocator<double>>::value_type>(SAMRAI::tbox::MessageStream *, const __gnu_cxx::__alloc_traits<std::allocator<double>>::value_type *, size_t)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h:(265,32) SAMRAI::tbox::MessageStream::getSizeof<double>(size_t)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h:(266,10) SAMRAI::tbox::MessageStream::copyDataIn(SAMRAI::tbox::MessageStream *, const void *, size_t)
      -> INLINE: (399,12) SAMRAI::tbox::MessageStream::growAsNeeded(const SAMRAI::tbox::MessageStream *) const
      -> INLINE: (403,25) std::vector<char, std::allocator<char>>::insert<const char *, void>(std::vector<char, std::allocator<char>> *, std::vector<char, std::allocator<char>>::iterator, const char *, const char *)
         {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
      -> INLINE: (403,32) std::vector<char, std::allocator<char>>::end(std::vector<char, std::allocator<char>> *)
         {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
      -> INLINE: (406,41) std::vector<char, std::allocator<char>>::size(const std::vector<char, std::allocator<char>> *) const
  -> INLINE: (505,23) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(479,29)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(479,29)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(479,29)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(498,30)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(488,20)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(489,10)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(493,21)
         remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(492,21)
         remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(178,42) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(497,26)
            remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
            remark #25478: While Loop Unrolled by 8  
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(499,37)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed ANTI dependence between myoffset (682:10) and myoffset (682:10)
            remark #25439: unrolled with remainder by 2  
            remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(499,37)
         <Remainder>
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(493,21)
            remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
         LOOP END
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(567,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(749,7):remark #34026: call to memset implemented as a call to optimized library version
/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(453,1):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4pdat8CellDataIdE16packWithRotationERNS_4tbox13MessageStreamERKNS0_11CellOverlapE] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:453

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :     343
            Global    :      92
            Local     :     251
        Regenerable   :      65
        Spilled       :      15
        
    Routine stack
        Variables     :     488 bytes*
            Reads     :      45 [1.90e+03 ~ 9.7%]
            Writes    :      30 [8.39e+01 ~ 0.4%]
        Spills        :      80 bytes*
            Reads     :      37 [5.84e+02 ~ 3.0%]
            Writes    :      11 [2.31e+02 ~ 1.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::vector<double, std::allocator<double>>::~vector(std::vector<double, std::allocator<double>> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(415,7):remark #34051: REGISTER ALLOCATION : [_ZNSt6vectorIdSaIdEED1Ev] /usr/include/c++/4.8.5/bits/stl_vector.h:415

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :      10
            Global    :       7
            Local     :       3
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Vector_base<char, std::allocator<char>>::_M_deallocate(std::_Vector_base<char, std::allocator<char>> *, std::_Vector_base<char, std::allocator<char>>::pointer, std::size_t)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(172,7):remark #34051: REGISTER ALLOCATION : [_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcm] /usr/include/c++/4.8.5/bits/stl_vector.h:172

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdx rsi rdi]
        
    Routine temporaries
        Total         :      11
            Global    :       7
            Local     :       4
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Vector_base<char, std::allocator<char>>::_M_get_Tp_allocator(std::_Vector_base<char, std::allocator<char>> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(114,7):remark #34051: REGISTER ALLOCATION : [_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv] /usr/include/c++/4.8.5/bits/stl_vector.h:114

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rax rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Vector_base<double, std::allocator<double>>::~_Vector_base(std::_Vector_base<double, std::allocator<double>> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(160,7):remark #34051: REGISTER ALLOCATION : [_ZNSt12_Vector_baseIdSaIdEED1Ev] /usr/include/c++/4.8.5/bits/stl_vector.h:160

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :      10
            Global    :       7
            Local     :       3
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::packStream(const SAMRAI::pdat::ArrayData<Real> *, SAMRAI::tbox::MessageStream &, const SAMRAI::hier::BoxContainer &, const SAMRAI::hier::Transformation &) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::pdat::ArrayData<Real>::packStream(const SAMRAI::pdat::ArrayData<Real> *, SAMRAI::tbox::MessageStream &, const SAMRAI::hier::BoxContainer &, const SAMRAI::hier::Transformation &) const) [482] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(870,1)
  -> INLINE: (875,26) SAMRAI::tbox::MessageStream::getWriteBuffer<Real>(SAMRAI::tbox::MessageStream *, size_t)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h:(217,32) SAMRAI::tbox::MessageStream::getSizeof<double>(size_t)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h:(219,25) std::vector<char, std::allocator<char>>::resize(std::vector<char, std::allocator<char>> *, std::vector<char, std::allocator<char>>::size_type)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h:(219,32) SAMRAI::tbox::MessageStream::getCurrentSize(const SAMRAI::tbox::MessageStream *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h:(220,41) std::vector<char, std::allocator<char>>::size(const std::vector<char, std::allocator<char>> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h:(223,55) std::vector<char, std::allocator<char>>::operator[](std::vector<char, std::allocator<char>> *, std::vector<char, std::allocator<char>>::size_type)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h:(223,56) SAMRAI::tbox::MessageStream::getCurrentSize(const SAMRAI::tbox::MessageStream *) const
  -> INLINE: (878,59) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (879,11) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
  -> INLINE: (879,11) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
  -> INLINE: (879,25) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (879,25) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (879,32) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(203,13) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator++(std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(205,13) std::_List_const_iterator<SAMRAI::hier::Box>::operator++(std::_List_const_iterator<SAMRAI::hier::Box> *)
  -> INLINE: (880,26) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,30) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator*(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,44) std::_List_const_iterator<SAMRAI::hier::Box>::operator*(const std::_List_const_iterator<SAMRAI::hier::Box> *) const
  -> INLINE: (882,7) SAMRAI::pdat::ArrayData<Real>::packBuffer(const SAMRAI::pdat::ArrayData<Real> *, Real *, const SAMRAI::hier::Box &) const
    -> INLINE: (1294,4) SAMRAI::pdat::ArrayDataOperationUtilities<Real, SAMRAI::pdat::CopyOperation<Real>>::doArrayDataBufferOperationOnBox(const SAMRAI::pdat::ArrayData<Real> &, const Real *, const SAMRAI::hier::Box &, bool, const SAMRAI::pdat::CopyOperation<Real> &)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(272,41) SAMRAI::pdat::ArrayData<Real>::getDim(const SAMRAI::pdat::ArrayData<Real> *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1251,17) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(275,53) SAMRAI::pdat::ArrayData<Real>::getPointer(const SAMRAI::pdat::ArrayData<Real> *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(220,19) std::vector<double, std::allocator<double>>::operator[](const std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(278,44) SAMRAI::pdat::ArrayData<Real>::getPointer(const SAMRAI::pdat::ArrayData<Real> *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(220,19) std::vector<double, std::allocator<double>>::operator[](const std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(280,49) SAMRAI::pdat::ArrayData<Real>::getDepth(const SAMRAI::pdat::ArrayData<Real> *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(283,43) SAMRAI::pdat::ArrayData<Real>::getBox(const SAMRAI::pdat::ArrayData<Real> *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(288,47) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(288,47) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(289,24) SAMRAI::hier::Box::numberCells(const SAMRAI::hier::Box *, SAMRAI::hier::Box::dir_t) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(623,11) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
          -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(290,30) SAMRAI::hier::Box::numberCells(const SAMRAI::hier::Box *, SAMRAI::hier::Box::dir_t) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(623,11) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
          -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(294,40) SAMRAI::pdat::ArrayData<Real>::getOffset(const SAMRAI::pdat::ArrayData<Real> *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(307,53) SAMRAI::hier::Box::size(const SAMRAI::hier::Box *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(654,12) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
          -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(655,44) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(655,54) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(657,48) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(657,58) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(309,35) SAMRAI::hier::Box::offset(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,29) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,38) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,18) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,32) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,49) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,59) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,40) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,50) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(309,48) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(386,52) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(386,52) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(397,15) SAMRAI::pdat::CopyOperation<Real>::operator()(const SAMRAI::pdat::CopyOperation<Real> *, Real &, const Real &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(406,34) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(406,34) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (884,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator->(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(171,29) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator*(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(171,45) std::_List_const_iterator<SAMRAI::hier::Box>::operator*(const std::_List_const_iterator<SAMRAI::hier::Box> *) const
  -> INLINE: (884,27) SAMRAI::hier::Box::size(const SAMRAI::hier::Box *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(654,12) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
      -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(655,44) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(655,54) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(657,48) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(657,58) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(220,12) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(883,7)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(288,47) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(883,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between pack_box.pack_box (606:16) and pack_box.pack_box (606:16)

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(883,7)
         remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(883,7)
         remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      LOOP END
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(883,7)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(656,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(883,7)
      remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
      remark #25439: unrolled with remainder by 8  
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(883,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between myoffset (682:10) and myoffset (682:10)
      remark #25439: unrolled with remainder by 2  
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(883,7)
   <Remainder>
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(319,4) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(883,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between dat_b[nd] (387:10) and dat_b[m] (425:16)

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(386,52) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(883,7)
         remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(386,52) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(883,7)
      <Remainder>
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(394,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(883,7)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed OUTPUT dependence between buffer[buf_counter+i0] (31:4) and buffer[buf_counter+i0] (31:4)

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(396,10) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(883,7)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed FLOW dependence between buffer[buf_counter+i0] (31:4) and src_ptr[dat_counter+i0] (31:4)
            remark #25439: unrolled with remainder by 2  
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(396,10) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(883,7)
         <Remainder>
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(406,34) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(883,7)
            remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(412,16) ]
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(419,13) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(883,7)
            remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
            remark #25439: unrolled with remainder by 8  
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(424,13) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(883,7)
            remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
            remark #25439: unrolled with remainder by 2  
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(424,13) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(883,7)
         <Remainder>
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(419,13) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(883,7)
         <Remainder>
            remark #25436: completely unrolled by 7  
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(885,27)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(656,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(885,27)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      remark #25478: While Loop Unrolled by 8  
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(656,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(883,7)
   <Remainder>
      remark #25436: completely unrolled by 7  
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(703,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(703,7):remark #34026: call to memset implemented as a call to optimized library version
/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(870,1):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4pdat9ArrayDataIdE10packStreamERNS_4tbox13MessageStreamERKNS_4hier12BoxContainerERKNS6_14TransformationE] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:870

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     453
            Global    :     104
            Local     :     349
        Regenerable   :      28
        Spilled       :      22
        
    Routine stack
        Variables     :     176 bytes*
            Reads     :      85 [1.39e+03 ~ 7.8%]
            Writes    :      21 [9.36e+02 ~ 5.2%]
        Spills        :     128 bytes*
            Reads     :      34 [3.40e+02 ~ 1.9%]
            Writes    :      33 [1.36e+02 ~ 0.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellData<Real>::unpackStream(SAMRAI::pdat::CellData<Real> *, SAMRAI::tbox::MessageStream &, const SAMRAI::hier::BoxOverlap &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::pdat::CellData<Real>::unpackStream(SAMRAI::pdat::CellData<Real> *, SAMRAI::tbox::MessageStream &, const SAMRAI::hier::BoxOverlap &)) [483] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(513,1)
  -> INLINE: (518,10) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (518,12) SAMRAI::pdat::ArrayData<Real>::unpackStream(SAMRAI::pdat::ArrayData<Real> *, SAMRAI::tbox::MessageStream &, const SAMRAI::hier::BoxContainer &, const SAMRAI::hier::IntVector &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(935,32) SAMRAI::tbox::MessageStream::getReadBuffer<Real>(SAMRAI::tbox::MessageStream *, size_t)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h:(195,32) SAMRAI::tbox::MessageStream::getSizeof<double>(size_t)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h:(198,61) SAMRAI::tbox::MessageStream::getCurrentSize(const SAMRAI::tbox::MessageStream *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(938,59) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(939,11) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(939,11) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(939,25) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(939,25) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(939,32) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(203,13) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator++(std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *)
         {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(205,13) std::_List_const_iterator<SAMRAI::hier::Box>::operator++(std::_List_const_iterator<SAMRAI::hier::Box> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(940,7) SAMRAI::pdat::ArrayData<Real>::unpackBuffer(SAMRAI::pdat::ArrayData<Real> *, const Real *, const SAMRAI::hier::Box &)
      -> INLINE: (1313,4) SAMRAI::pdat::ArrayDataOperationUtilities<Real, SAMRAI::pdat::CopyOperation<Real>>::doArrayDataBufferOperationOnBox(const SAMRAI::pdat::ArrayData<Real> &, const Real *, const SAMRAI::hier::Box &, bool, const SAMRAI::pdat::CopyOperation<Real> &)
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(272,41) SAMRAI::pdat::ArrayData<Real>::getDim(const SAMRAI::pdat::ArrayData<Real> *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1251,17) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(275,53) SAMRAI::pdat::ArrayData<Real>::getPointer(const SAMRAI::pdat::ArrayData<Real> *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(220,19) std::vector<double, std::allocator<double>>::operator[](const std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(278,44) SAMRAI::pdat::ArrayData<Real>::getPointer(const SAMRAI::pdat::ArrayData<Real> *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(220,19) std::vector<double, std::allocator<double>>::operator[](const std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(280,49) SAMRAI::pdat::ArrayData<Real>::getDepth(const SAMRAI::pdat::ArrayData<Real> *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(283,43) SAMRAI::pdat::ArrayData<Real>::getBox(const SAMRAI::pdat::ArrayData<Real> *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(288,47) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(288,47) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(289,24) SAMRAI::hier::Box::numberCells(const SAMRAI::hier::Box *, SAMRAI::hier::Box::dir_t) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(623,11) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
            -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
              -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
            -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
              -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
            -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
            -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
            -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
            -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(290,30) SAMRAI::hier::Box::numberCells(const SAMRAI::hier::Box *, SAMRAI::hier::Box::dir_t) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(623,11) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
            -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
              -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
            -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
              -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
            -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
            -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
            -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
            -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(294,40) SAMRAI::pdat::ArrayData<Real>::getOffset(const SAMRAI::pdat::ArrayData<Real> *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(307,53) SAMRAI::hier::Box::size(const SAMRAI::hier::Box *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(654,12) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
            -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
              -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
            -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
              -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
            -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
            -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
            -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
            -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(655,44) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(655,54) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(657,48) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(657,58) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(309,35) SAMRAI::hier::Box::offset(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,29) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,38) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,18) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,32) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,49) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,59) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,40) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,50) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(309,48) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(386,52) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(386,52) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(397,15) SAMRAI::pdat::CopyOperation<Real>::operator()(const SAMRAI::pdat::CopyOperation<Real> *, Real &, const Real &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(406,34) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(406,34) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(940,34) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,30) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator*(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,44) std::_List_const_iterator<SAMRAI::hier::Box>::operator*(const std::_List_const_iterator<SAMRAI::hier::Box> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(941,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator->(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(171,29) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator*(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(171,45) std::_List_const_iterator<SAMRAI::hier::Box>::operator*(const std::_List_const_iterator<SAMRAI::hier::Box> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(941,27) SAMRAI::hier::Box::size(const SAMRAI::hier::Box *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(654,12) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(655,44) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(655,54) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(657,48) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(657,58) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INDIRECT- (VIRTUAL): (518,33)  EXPR_CONV.SI64.P64(*((SI64*) (t_overlap.180840_V$b4b.0.480->__vptr_V$b22_2.32 + EXPR_CONV.SI32.I64(6(SI32)) * 8(I64))))
  -> INDIRECT- (VIRTUAL): (519,7)  EXPR_CONV.SI64.P64(*((SI64*) (t_overlap.180840_V$b4b.0.480->__vptr_V$b22_2.32 + EXPR_CONV.SI32.I64(3(SI32)) * 8(I64))))


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(220,12) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(519,12)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(288,47) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(519,12)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between this->d_empty_flag (606:16) and this->d_empty_flag (599:11)

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(519,12)
         remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(519,12)
         remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      LOOP END
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(519,12)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(656,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(519,12)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      remark #25478: While Loop Unrolled by 8  
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(519,12)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between myoffset (682:10) and myoffset (682:10)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(519,12)
   <Remainder>
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(319,4) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(519,12)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between dat_b[nd] (387:10) and dat_b[m] (425:16)

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(386,52) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(519,12)
         remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(386,52) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(519,12)
      <Remainder>
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(394,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(519,12)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed OUTPUT dependence between dst_ptr[dat_counter+i0] (31:4) and dst_ptr[dat_counter+i0] (31:4)

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(396,10) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(519,12)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed FLOW dependence between dst_ptr[dat_counter+i0] (31:4) and buffer[buf_counter+i0] (31:4)
            remark #25439: unrolled with remainder by 2  
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(396,10) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(519,12)
         <Remainder>
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(406,34) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(519,12)
            remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(412,16) ]
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(419,13) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(519,12)
            remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
            remark #25439: unrolled with remainder by 8  
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(424,13) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(519,12)
            remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
            remark #25439: unrolled with remainder by 2  
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(424,13) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(519,12)
         <Remainder>
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(419,13) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(519,12)
         <Remainder>
            remark #25436: completely unrolled by 7  
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(519,12)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(656,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(519,12)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      remark #25478: While Loop Unrolled by 8  
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(513,1):remark #34051: REGISTER ALLOCATION : [_ZN6SAMRAI4pdat8CellDataIdE12unpackStreamERNS_4tbox13MessageStreamERKNS_4hier10BoxOverlapE] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:513

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     364
            Global    :      85
            Local     :     279
        Regenerable   :      17
        Spilled       :      20
        
    Routine stack
        Variables     :     104 bytes*
            Reads     :      38 [6.46e+02 ~ 6.5%]
            Writes    :      16 [5.08e+02 ~ 5.1%]
        Spills        :     112 bytes*
            Reads     :      23 [1.86e+02 ~ 1.9%]
            Writes    :      21 [7.82e+01 ~ 0.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellData<Real>::sum(SAMRAI::pdat::CellData<Real> *, const SAMRAI::hier::PatchData &, const SAMRAI::hier::BoxOverlap &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::pdat::CellData<Real>::sum(SAMRAI::pdat::CellData<Real> *, const SAMRAI::hier::PatchData &, const SAMRAI::hier::BoxOverlap &)) [484] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(534,1)
  -> INLINE: (552,7) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (552,7) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (552,7) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (552,7) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (552,7) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (552,7) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (552,7) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (552,7) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> INLINE: (552,7) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (552,7) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (552,7) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (552,7) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (552,7) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (552,7) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INDIRECT- (VIRTUAL): (557,41)  EXPR_CONV.SI64.P64(*((SI64*) (t_overlap.181114_V$b4f.0.481->__vptr_V$b22_2.32 + EXPR_CONV.SI32.I64(3(SI32)) * 8(I64))))
  -> INDIRECT- (VIRTUAL): (559,10)  EXPR_CONV.SI64.P64(*((SI64*) (t_overlap.181114_V$b4f.0.481->__vptr_V$b22_2.32 + EXPR_CONV.SI32.I64(6(SI32)) * 8(I64))))
  -> INLINE: (560,40) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (561,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (561,19) SAMRAI::pdat::ArrayData<Real>::isInitialized(const SAMRAI::pdat::ArrayData<Real> *) const
  -> INLINE: (562,16) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (562,18) SAMRAI::pdat::ArrayData<Real>::sum(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::BoxContainer &, const SAMRAI::hier::IntVector &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(750,54) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(751,11) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(751,11) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(751,20) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(751,20) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(751,27) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(203,13) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator++(std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *)
         {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(205,13) std::_List_const_iterator<SAMRAI::hier::Box>::operator++(std::_List_const_iterator<SAMRAI::hier::Box> *)
    -> /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(752,7) SAMRAI::pdat::ArrayData<Real>::sum(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &, const SAMRAI::hier::IntVector &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(752,16) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,30) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator*(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,44) std::_List_const_iterator<SAMRAI::hier::Box>::operator*(const std::_List_const_iterator<SAMRAI::hier::Box> *) const


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(751,11) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(563,18)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(534,1):remark #34051: REGISTER ALLOCATION : [_ZN6SAMRAI4pdat8CellDataIdE3sumERKNS_4hier9PatchDataERKNS3_10BoxOverlapE] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:534

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rbp rsi rdi r8 r12-r15]
        
    Routine temporaries
        Total         :     379
            Global    :      90
            Local     :     289
        Regenerable   :     142
        Spilled       :       6
        
    Routine stack
        Variables     :     469 bytes*
            Reads     :      41 [6.93e+00 ~ 4.5%]
            Writes    :      54 [2.76e+01 ~ 18.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::sum(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &, const SAMRAI::hier::IntVector &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::pdat::ArrayData<Real>::sum(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &, const SAMRAI::hier::IntVector &)) [485] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(703,1)
  -> INLINE: (705,18) SAMRAI::hier::IntVector::operator==(const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(762,43) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(763,59) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(764,44) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(764,72) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(768,47) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(770,41) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(770,60) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (705,21) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(1133,28) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (705,50) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
  -> INLINE: (707,7) SAMRAI::pdat::ArrayData<Real>::sum(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &)
    -> INLINE: (558,15) SAMRAI::hier::Box::isSpatiallyEqual(const SAMRAI::hier::Box *, const SAMRAI::hier::Box &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(754,21) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(754,43) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,27) SAMRAI::hier::BlockId::operator==(const SAMRAI::hier::BlockId *, const SAMRAI::hier::BlockId &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,51) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,66) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: (559,13) SAMRAI::hier::Box::isSpatiallyEqual(const SAMRAI::hier::Box *, const SAMRAI::hier::Box &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(754,21) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(754,43) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,27) SAMRAI::hier::BlockId::operator==(const SAMRAI::hier::BlockId *, const SAMRAI::hier::BlockId &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,51) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,66) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: (561,37) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
    -> INLINE: (562,47) std::vector<double, std::allocator<double>>::operator[](const std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) const
    -> INLINE: (577,15) SAMRAI::pdat::SumOperation<Real>::operator()(const SAMRAI::pdat::SumOperation<Real> *, Real &, const Real &) const
    -> INLINE: (585,20) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: (590,46) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> (592,10) SAMRAI::pdat::ArrayDataOperationUtilities<Real, SAMRAI::pdat::SumOperation<Real>>::doArrayDataOperationOnBox(SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &, const SAMRAI::hier::IntVector &, unsigned int, unsigned int, unsigned int, const SAMRAI::pdat::SumOperation<Real> &)
  -> INLINE: (712,25) SAMRAI::hier::Box::shift(SAMRAI::hier::Box *, const SAMRAI::hier::Box &, const SAMRAI::hier::IntVector &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(1250,22) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(1250,30) SAMRAI::hier::Index::operator+(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(197,11) SAMRAI::hier::Index::operator+=(SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &)
        -> INLINE: (178,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (178,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (179,27) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(1250,44) SAMRAI::hier::Box::upper(const SAMRAI::hier::Box *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(1250,52) SAMRAI::hier::Index::operator+(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(197,11) SAMRAI::hier::Index::operator+=(SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &)
        -> INLINE: (178,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (178,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (179,27) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (714,20) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> (722,10) SAMRAI::pdat::ArrayDataOperationUtilities<Real, SAMRAI::pdat::SumOperation<Real>>::doArrayDataOperationOnBox(SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &, const SAMRAI::hier::IntVector &, unsigned int, unsigned int, unsigned int, const SAMRAI::pdat::SumOperation<Real> &)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(761,10) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(706,18)
   remark #15523: loop was not vectorized: loop control variable b was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(763,38) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(706,18)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(769,10) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(706,18)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(708,7)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(708,7)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(708,7)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(708,7)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(708,7)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(708,7)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(708,7)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(708,7)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(576,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(708,7)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(576,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(708,7)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(576,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(708,7)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(576,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(708,7)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(576,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(708,7)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(576,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(708,7)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(708,7)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(178,42) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(713,25)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 8  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(178,42) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(713,25)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 8  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(715,20)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
LOOP END

    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(703,1):remark #34051: REGISTER ALLOCATION : [_ZN6SAMRAI4pdat9ArrayDataIdE3sumERKS2_RKNS_4hier3BoxERKNS5_9IntVectorE] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:703

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :     344
            Global    :     104
            Local     :     240
        Regenerable   :      58
        Spilled       :       8
        
    Routine stack
        Variables     :     466 bytes*
            Reads     :      30 [7.71e+00 ~ 5.4%]
            Writes    :      28 [1.57e+00 ~ 1.1%]
        Spills        :      24 bytes*
            Reads     :       6 [1.04e+00 ~ 0.7%]
            Writes    :       3 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayDataOperationUtilities<Real, SAMRAI::pdat::SumOperation<Real>>::doArrayDataOperationOnBox(SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &, const SAMRAI::hier::IntVector &, unsigned int, unsigned int, unsigned int, const SAMRAI::pdat::SumOperation<Real> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::pdat::ArrayDataOperationUtilities<Real, SAMRAI::pdat::SumOperation<Real>>::doArrayDataOperationOnBox(SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &, const SAMRAI::hier::IntVector &, unsigned int, unsigned int, unsigned int, const SAMRAI::pdat::SumOperation<Real> &)) [486] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(59,1)
  -> INLINE: (64,35) SAMRAI::pdat::ArrayData<Real>::getDim(const SAMRAI::pdat::ArrayData<Real> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1251,17) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
  -> INLINE: (66,30) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (67,36) SAMRAI::pdat::ArrayData<Real>::getPointer(const SAMRAI::pdat::ArrayData<Real> *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(220,19) std::vector<double, std::allocator<double>>::operator[](const std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) const
  -> INLINE: (70,33) SAMRAI::pdat::ArrayData<Real>::getBox(const SAMRAI::pdat::ArrayData<Real> *) const
  -> INLINE: (71,33) SAMRAI::pdat::ArrayData<Real>::getBox(const SAMRAI::pdat::ArrayData<Real> *) const
  -> INLINE: (77,47) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (77,47) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (78,24) SAMRAI::hier::Box::numberCells(const SAMRAI::hier::Box *, SAMRAI::hier::Box::dir_t) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(623,11) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
      -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (79,26) SAMRAI::hier::Box::numberCells(const SAMRAI::hier::Box *, SAMRAI::hier::Box::dir_t) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(623,11) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
      -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (80,26) SAMRAI::hier::Box::numberCells(const SAMRAI::hier::Box *, SAMRAI::hier::Box::dir_t) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(623,11) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
      -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (84,34) SAMRAI::pdat::ArrayData<Real>::getOffset(const SAMRAI::pdat::ArrayData<Real> *) const
  -> INLINE: (85,34) SAMRAI::pdat::ArrayData<Real>::getOffset(const SAMRAI::pdat::ArrayData<Real> *) const
  -> INLINE: (97,53) SAMRAI::hier::Box::size(const SAMRAI::hier::Box *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(654,12) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
      -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(655,44) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(655,54) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(657,48) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(657,58) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (99,31) SAMRAI::hier::Box::offset(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,29) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,38) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,18) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,32) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,49) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,59) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,40) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,50) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (99,44) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (100,31) SAMRAI::hier::Box::offset(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,29) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,38) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,18) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,32) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,49) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,59) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,40) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,50) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (100,44) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (100,52) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(319,11) SAMRAI::hier::Index::operator-=(SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &)
      -> INLINE: (300,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (300,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (301,27) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (187,52) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (187,52) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (199,15) SAMRAI::pdat::SumOperation<Real>::operator()(const SAMRAI::pdat::SumOperation<Real> *, Real &, const Real &) const
  -> INLINE: (208,53) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (208,53) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(77,47)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(79,24)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(80,26)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(81,26)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(98,53)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(656,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(98,53)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 2  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(100,31)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between myoffset (682:10) and myoffset (682:10)
   remark #25439: unrolled with remainder by 2  
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(100,31)
<Remainder>
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(300,42) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(101,52)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 8  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(101,31)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between myoffset (682:10) and myoffset (682:10)
   remark #25439: unrolled with remainder by 2  
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(101,31)
<Remainder>
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(119,4)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between dst_b[nd] (188:10) and dst_b[m] (230:16)

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(187,52)
      remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(187,52)
   <Remainder>
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(196,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between vdst (40:4) and vdst (40:4)

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(198,10)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed FLOW dependence between vdst (40:4) and vdst (40:4)
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(198,10)
      <Remainder>
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(208,53)
         remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(208,67) ]
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(222,13)
         remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
         remark #25439: unrolled with remainder by 8  
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(229,13)
         remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(229,13)
      <Remainder>
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(222,13)
      <Remainder>
         remark #25436: completely unrolled by 7  
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(59,1):remark #34051: REGISTER ALLOCATION : [_ZN6SAMRAI4pdat27ArrayDataOperationUtilitiesIdNS0_12SumOperationIdEEE25doArrayDataOperationOnBoxERNS0_9ArrayDataIdEERKS6_RKNS_4hier3BoxERKNSA_9IntVectorEjjjRKS3_] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:59

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :     300
            Global    :      96
            Local     :     204
        Regenerable   :       8
        Spilled       :      20
        
    Routine stack
        Variables     :     120 bytes*
            Reads     :      50 [3.48e+02 ~ 8.7%]
            Writes    :      29 [2.98e+02 ~ 7.5%]
        Spills        :     112 bytes*
            Reads     :      20 [4.38e+01 ~ 1.1%]
            Writes    :      20 [2.80e+01 ~ 0.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellData<Real>::unpackStreamAndSum(SAMRAI::pdat::CellData<Real> *, SAMRAI::tbox::MessageStream &, const SAMRAI::hier::BoxOverlap &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::pdat::CellData<Real>::unpackStreamAndSum(SAMRAI::pdat::CellData<Real> *, SAMRAI::tbox::MessageStream &, const SAMRAI::hier::BoxOverlap &)) [487] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(580,1)
  -> INDIRECT- (VIRTUAL): (587,7)  EXPR_CONV.SI64.P64(*((SI64*) (t_overlap.181199_V$b60.0.482->__vptr_V$b22_2.32 + EXPR_CONV.SI32.I64(6(SI32)) * 8(I64))))
  -> INDIRECT- (VIRTUAL): (588,38)  EXPR_CONV.SI64.P64(*((SI64*) (t_overlap.181199_V$b60.0.482->__vptr_V$b22_2.32 + EXPR_CONV.SI32.I64(3(SI32)) * 8(I64))))
  -> INLINE: (589,62) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (590,17) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
  -> INLINE: (590,17) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
  -> INLINE: (590,30) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (590,30) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (590,37) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(203,13) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator++(std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(205,13) std::_List_const_iterator<SAMRAI::hier::Box>::operator++(std::_List_const_iterator<SAMRAI::hier::Box> *)
  -> INLINE: (591,33) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,30) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator*(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,44) std::_List_const_iterator<SAMRAI::hier::Box>::operator*(const std::_List_const_iterator<SAMRAI::hier::Box> *) const
  -> INLINE: (591,50) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (591,52) SAMRAI::pdat::ArrayData<Real>::getBox(const SAMRAI::pdat::ArrayData<Real> *) const
  -> INLINE: (592,22) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (593,16) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (593,18) SAMRAI::pdat::ArrayData<Real>::unpackStreamAndSum(SAMRAI::pdat::ArrayData<Real> *, SAMRAI::tbox::MessageStream &, const SAMRAI::hier::Box &, const SAMRAI::hier::IntVector &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(969,43) SAMRAI::hier::Box::size(const SAMRAI::hier::Box *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(654,12) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(655,44) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(655,54) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(657,48) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(657,58) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(970,32) SAMRAI::tbox::MessageStream::getReadBuffer<Real>(SAMRAI::tbox::MessageStream *, size_t)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h:(195,32) SAMRAI::tbox::MessageStream::getSizeof<double>(size_t)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h:(198,61) SAMRAI::tbox::MessageStream::getCurrentSize(const SAMRAI::tbox::MessageStream *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(972,4) SAMRAI::pdat::ArrayData<Real>::unpackBufferAndSum(SAMRAI::pdat::ArrayData<Real> *, const Real *, const SAMRAI::hier::Box &)
      -> INLINE: (1341,4) SAMRAI::pdat::ArrayDataOperationUtilities<Real, SAMRAI::pdat::SumOperation<Real>>::doArrayDataBufferOperationOnBox(const SAMRAI::pdat::ArrayData<Real> &, const Real *, const SAMRAI::hier::Box &, bool, const SAMRAI::pdat::SumOperation<Real> &)
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(272,41) SAMRAI::pdat::ArrayData<Real>::getDim(const SAMRAI::pdat::ArrayData<Real> *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1251,17) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(275,53) SAMRAI::pdat::ArrayData<Real>::getPointer(const SAMRAI::pdat::ArrayData<Real> *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(220,19) std::vector<double, std::allocator<double>>::operator[](const std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(278,44) SAMRAI::pdat::ArrayData<Real>::getPointer(const SAMRAI::pdat::ArrayData<Real> *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(220,19) std::vector<double, std::allocator<double>>::operator[](const std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(280,49) SAMRAI::pdat::ArrayData<Real>::getDepth(const SAMRAI::pdat::ArrayData<Real> *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(283,43) SAMRAI::pdat::ArrayData<Real>::getBox(const SAMRAI::pdat::ArrayData<Real> *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(288,47) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(288,47) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(289,24) SAMRAI::hier::Box::numberCells(const SAMRAI::hier::Box *, SAMRAI::hier::Box::dir_t) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(623,11) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
            -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
              -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
            -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
              -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
            -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
            -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
            -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
            -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(290,30) SAMRAI::hier::Box::numberCells(const SAMRAI::hier::Box *, SAMRAI::hier::Box::dir_t) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(623,11) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
            -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
              -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
            -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
              -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
            -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
            -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
            -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
            -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(294,40) SAMRAI::pdat::ArrayData<Real>::getOffset(const SAMRAI::pdat::ArrayData<Real> *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(307,53) SAMRAI::hier::Box::size(const SAMRAI::hier::Box *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(654,12) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
            -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
              -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
            -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
              -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
            -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
            -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
            -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
            -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(655,44) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(655,54) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(657,48) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(657,58) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(309,35) SAMRAI::hier::Box::offset(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,29) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,38) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,18) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,32) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,49) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,59) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,40) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,50) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(309,48) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(386,52) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(386,52) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(397,15) SAMRAI::pdat::SumOperation<Real>::operator()(const SAMRAI::pdat::SumOperation<Real> *, Real &, const Real &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(406,34) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(406,34) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(593,10)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(593,22)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(594,18)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(656,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(594,18)
      remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
      remark #25439: unrolled with remainder by 8  
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(288,47) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(594,18)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between intersect.intersect.intersect.intersect (604:41) and this->d_empty_flag (610:10)

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(594,18)
         remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(594,18)
         remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      LOOP END
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(594,18)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(656,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(594,18)
      remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
      remark #25439: unrolled with remainder by 8  
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(594,18)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between myoffset (682:10) and myoffset (682:10)
      remark #25439: unrolled with remainder by 2  
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(594,18)
   <Remainder>
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(319,4) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(594,18)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between dat_b[nd] (387:10) and dat_b[m] (425:16)

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(386,52) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(594,18)
         remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(386,52) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(594,18)
      <Remainder>
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(394,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(594,18)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed OUTPUT dependence between dst_ptr[dat_counter+i0] (40:4) and dst_ptr[dat_counter+i0] (40:4)

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(396,10) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(594,18)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed FLOW dependence between dst_ptr[dat_counter+i0] (40:4) and dst_ptr[dat_counter+i0] (40:4)
            remark #25439: unrolled with remainder by 2  
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(396,10) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(594,18)
         <Remainder>
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(406,34) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(594,18)
            remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(412,16) ]
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(419,13) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(594,18)
            remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
            remark #25439: unrolled with remainder by 8  
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(424,13) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(594,18)
            remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
            remark #25439: unrolled with remainder by 2  
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(424,13) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(594,18)
         <Remainder>
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(419,13) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(594,18)
         <Remainder>
            remark #25436: completely unrolled by 7  
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(656,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(594,18)
   <Remainder>
      remark #25436: completely unrolled by 7  
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(656,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(594,18)
   <Remainder>
      remark #25436: completely unrolled by 7  
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(580,1):remark #34051: REGISTER ALLOCATION : [_ZN6SAMRAI4pdat8CellDataIdE18unpackStreamAndSumERNS_4tbox13MessageStreamERKNS_4hier10BoxOverlapE] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:580

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :     472
            Global    :      99
            Local     :     373
        Regenerable   :      25
        Spilled       :      22
        
    Routine stack
        Variables     :     176 bytes*
            Reads     :     122 [7.69e+02 ~ 8.0%]
            Writes    :      24 [4.76e+02 ~ 5.0%]
        Spills        :     128 bytes*
            Reads     :      29 [1.72e+02 ~ 1.8%]
            Writes    :      28 [6.80e+01 ~ 0.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellData<Real>::getFromRestart(SAMRAI::pdat::CellData<Real> *, const std::shared_ptr<SAMRAI::tbox::Database> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::pdat::CellData<Real>::getFromRestart(SAMRAI::pdat::CellData<Real> *, const std::shared_ptr<SAMRAI::tbox::Database> &)) [488] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(717,1)
  -> DELETED: (723,8) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (723,8) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (723,24) std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (723,37) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (723,37) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INDIRECT- (VIRTUAL): (723,37)  EXPR_CONV.SI64.P64(*((SI64*) (__$U83_V$b6b.0.483->__vptr_V$a61 + EXPR_CONV.SI32.I64(65(SI32)) * 8(I64))))
  -> INLINE: (723,37) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (725,7) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (725,7) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (725,7) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (725,7) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (725,7) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (725,7) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (725,7) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (725,7) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> INLINE: (725,7) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (725,7) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (725,7) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (725,7) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (725,7) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (725,7) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (729,4) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (729,4) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (729,24) std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (729,37) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (729,37) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INDIRECT- (VIRTUAL): (729,37)  EXPR_CONV.SI64.P64(*((SI64*) (__$U84_V$b6c.0.483->__vptr_V$a61 + EXPR_CONV.SI32.I64(65(SI32)) * 8(I64))))
  -> INLINE: (729,37) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (731,10) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (731,12) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (731,12) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (731,12) std::shared_ptr<SAMRAI::tbox::Database>::~shared_ptr(std::shared_ptr<SAMRAI::tbox::Database> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (731,12) SAMRAI::pdat::ArrayData<Real>::getFromRestart(SAMRAI::pdat::ArrayData<Real> *, const std::shared_ptr<SAMRAI::tbox::Database> &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1200,8) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1200,8) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1200,24) std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1200,37) std::allocator<char>::allocator(std::allocator<char> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INDIRECT- (VIRTUAL): /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1200,37)  EXPR_CONV.SI64.P64(*((SI64*) (__$Uaf_V$c43.0.508.14469->__vptr_V$a61 + EXPR_CONV.SI32.I64(65(SI32)) * 8(I64))))
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1200,37) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1200,37) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1202,7) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1202,7) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1202,7) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1202,7) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1202,7) std::allocator<char>::allocator(std::allocator<char> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1202,7) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1202,7) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
    -> /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1202,7) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
    -> /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1202,7) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1202,7) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1202,7) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1202,7) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1202,7) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1202,7) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1206,4) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1206,4) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1206,24) std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1206,37) std::allocator<char>::allocator(std::allocator<char> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INDIRECT- (VIRTUAL): /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1206,37)  EXPR_CONV.SI64.P64(*((SI64*) (__$Ub0_V$c44.0.508.14469->__vptr_V$a61 + EXPR_CONV.SI32.I64(65(SI32)) * 8(I64))))
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1206,37) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1206,37) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1207,4) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1207,4) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1207,25) std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1207,38) std::allocator<char>::allocator(std::allocator<char> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INDIRECT- (VIRTUAL): /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1207,38)  EXPR_CONV.SI64.P64(*((SI64*) (__$Ub1_V$c45.0.508.14469->__vptr_V$a61 + EXPR_CONV.SI32.I64(65(SI32)) * 8(I64))))
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1207,38) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1207,38) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1208,10) SAMRAI::hier::Box::operator=(SAMRAI::hier::Box *, const SAMRAI::tbox::DatabaseBox &)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(1172,14) SAMRAI::hier::Box::Box_from_DatabaseBox(SAMRAI::hier::Box *, const SAMRAI::tbox::DatabaseBox &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1208,10) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1208,10) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1208,22) std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1208,39) std::allocator<char>::allocator(std::allocator<char> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INDIRECT- (VIRTUAL): /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1208,39)  EXPR_CONV.SI64.P64(*((SI64*) (__$Ub3_V$c4b.0.508.14469->__vptr_V$a61 + EXPR_CONV.SI32.I64(25(SI32)) * 8(I64))))
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1208,39) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1208,39) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1215,14) std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1215,16) SAMRAI::tbox::Database::getVector(SAMRAI::tbox::Database *, const std::string &, std::vector<double, std::allocator<double>> &)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/Database.h:(1471,13) std::vector<double, std::allocator<double>>::~vector(std::vector<double, std::allocator<double>> *)
         {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/Database.h:(1471,13) std::vector<double, std::allocator<double>>::operator=(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>> &&)
         {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
      -> INDIRECT- (VIRTUAL): /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/Database.h:(1471,31)  EXPR_CONV.SI64.P64(*((SI64*) (this_22990_V$a5d.0.405.14488->__vptr_V$a61 + EXPR_CONV.SI32.I64(51(SI32)) * 8(I64))))
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1215,16) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1215,16) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1215,26) std::allocator<char>::allocator(std::allocator<char> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1215,26) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1215,26) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (731,37) std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic> *) const
  -> (731,51) std::shared_ptr<SAMRAI::tbox::Database>::~shared_ptr(std::shared_ptr<SAMRAI::tbox::Database> *)
  -> INLINE: (731,51) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (731,51) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INDIRECT- (VIRTUAL): (731,51)  EXPR_CONV.SI64.P64(*((SI64*) (__$U86_V$b6e.0.483->__vptr_V$a61 + EXPR_CONV.SI32.I64(11(SI32)) * 8(I64))))
  -> INLINE: (731,51) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(717,1):remark #34051: REGISTER ALLOCATION : [_ZN6SAMRAI4pdat8CellDataIdE14getFromRestartERKSt10shared_ptrINS_4tbox8DatabaseEE] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:717

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     937
            Global    :     237
            Local     :     700
        Regenerable   :     350
        Spilled       :       8
        
    Routine stack
        Variables     :     961 bytes*
            Reads     :      78 [3.56e+01 ~ 8.7%]
            Writes    :     126 [5.22e+01 ~ 12.8%]
        Spills        :      16 bytes*
            Reads     :       2 [1.33e-01 ~ 0.0%]
            Writes    :       2 [1.33e-01 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::shared_ptr<SAMRAI::tbox::Database>::~shared_ptr(std::shared_ptr<SAMRAI::tbox::Database> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr.h(93,11):remark #34051: REGISTER ALLOCATION : [_ZNSt10shared_ptrIN6SAMRAI4tbox8DatabaseEED1Ev] /usr/include/c++/4.8.5/bits/shared_ptr.h:93

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rdi r12-r13]
        
    Routine temporaries
        Total         :      24
            Global    :      12
            Local     :      12
        Regenerable   :       3
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *, const std::vector<double, std::allocator<double>>::allocator_type &)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(257,20):remark #34051: REGISTER ALLOCATION : [_ZNSt6vectorIdSaIdEEC1ERKS0_] /usr/include/c++/4.8.5/bits/stl_vector.h:257

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rsi rdi]
        
    Routine temporaries
        Total         :      10
            Global    :       0
            Local     :      10
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellData<Real>::putToRestart(const SAMRAI::pdat::CellData<Real> *, const std::shared_ptr<SAMRAI::tbox::Database> &) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::pdat::CellData<Real>::putToRestart(const SAMRAI::pdat::CellData<Real> *, const std::shared_ptr<SAMRAI::tbox::Database> &) const) [494] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(747,1)
  -> INLINE: (752,14) std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (752,27) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (752,27) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (752,27) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (752,52) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (752,52) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INDIRECT- (VIRTUAL): (752,52)  EXPR_CONV.SI64.P64(*((SI64*) (__$U8c_V$b81.0.484->__vptr_V$a61 + EXPR_CONV.SI32.I64(62(SI32)) * 8(I64))))
  -> INLINE: (754,14) std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (754,27) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (754,27) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (754,27) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (754,38) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (754,38) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INDIRECT- (VIRTUAL): (754,38)  EXPR_CONV.SI64.P64(*((SI64*) (__$U8d_V$b82.0.484->__vptr_V$a61 + EXPR_CONV.SI32.I64(62(SI32)) * 8(I64))))
  -> INLINE: (756,10) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (756,12) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (756,12) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (756,12) std::shared_ptr<SAMRAI::tbox::Database>::~shared_ptr(std::shared_ptr<SAMRAI::tbox::Database> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (756,12) SAMRAI::pdat::ArrayData<Real>::putToRestart(const SAMRAI::pdat::ArrayData<Real> *, const std::shared_ptr<SAMRAI::tbox::Database> &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1234,14) std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1234,27) std::allocator<char>::allocator(std::allocator<char> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1234,27) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1234,27) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INDIRECT- (VIRTUAL): /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1234,53)  EXPR_CONV.SI64.P64(*((SI64*) (__$Ub9_V$c60.0.509.11803->__vptr_V$a61 + EXPR_CONV.SI32.I64(62(SI32)) * 8(I64))))
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1234,53) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1234,53) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1236,14) std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1236,27) std::allocator<char>::allocator(std::allocator<char> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1236,27) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1236,27) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INDIRECT- (VIRTUAL): /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1236,38)  EXPR_CONV.SI64.P64(*((SI64*) (__$Ubb_V$c62.0.509.11803->__vptr_V$a61 + EXPR_CONV.SI32.I64(62(SI32)) * 8(I64))))
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1236,38) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1236,38) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1237,14) std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1237,27) std::allocator<char>::allocator(std::allocator<char> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1237,27) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1237,27) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INDIRECT- (VIRTUAL): /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1237,39)  EXPR_CONV.SI64.P64(*((SI64*) (__$Ubc_V$c63.0.509.11803->__vptr_V$a61 + EXPR_CONV.SI32.I64(62(SI32)) * 8(I64))))
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1237,39) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1237,39) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1238,14) std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1238,31) std::allocator<char>::allocator(std::allocator<char> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1238,31) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1238,31) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1238,40) SAMRAI::hier::Box::operator void(SAMRAI::tbox::DatabaseBox *, const SAMRAI::hier::Box *) const
    -> INDIRECT- (VIRTUAL): /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1238,40)  EXPR_CONV.SI64.P64(*((SI64*) (__$Ube_V$c65.0.509.11803->__vptr_V$a61 + EXPR_CONV.SI32.I64(22(SI32)) * 8(I64))))
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1238,40) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1238,40) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1243,14) std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1243,16) SAMRAI::tbox::Database::putVector(SAMRAI::tbox::Database *, const std::string &, const std::vector<double, std::allocator<double>> &)
      -> INDIRECT- (VIRTUAL): /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/Database.h:(1487,28)  EXPR_CONV.SI64.P64(*((SI64*) (this_22992_V$a62.0.406.11822->__vptr_V$a61 + EXPR_CONV.SI32.I64(47(SI32)) * 8(I64))))
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1243,16) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1243,16) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1243,26) std::allocator<char>::allocator(std::allocator<char> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1243,26) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1243,26) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (756,35) std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic> *) const
  -> (756,49) std::shared_ptr<SAMRAI::tbox::Database>::~shared_ptr(std::shared_ptr<SAMRAI::tbox::Database> *)
  -> INLINE: (756,49) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (756,49) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INDIRECT- (VIRTUAL): (756,49)  EXPR_CONV.SI64.P64(*((SI64*) (__$U8f_V$b84.0.484->__vptr_V$a61 + EXPR_CONV.SI32.I64(10(SI32)) * 8(I64))))
  -> INLINE: (756,49) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(747,1):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4pdat8CellDataIdE12putToRestartERKSt10shared_ptrINS_4tbox8DatabaseEE] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:747

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rbx rbp rsi rdi r15]
        
    Routine temporaries
        Total         :     357
            Global    :      96
            Local     :     261
        Regenerable   :     123
        Spilled       :       3
        
    Routine stack
        Variables     :      90 bytes*
            Reads     :      25 [1.40e+01 ~ 8.3%]
            Writes    :      19 [2.00e+00 ~ 1.2%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellData<Real>::copyWithRotation(SAMRAI::pdat::CellData<Real> *, const SAMRAI::pdat::CellData<Real> &, const SAMRAI::pdat::CellOverlap &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::CellData<Real>::copyWithRotation(SAMRAI::pdat::CellData<Real> *, const SAMRAI::pdat::CellData<Real> &, const SAMRAI::pdat::CellOverlap &)) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(316,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::canEstimateStreamSizeFromBox()

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::canEstimateStreamSizeFromBox()) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(63,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::ArrayData(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::hier::Box &, unsigned int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::ArrayData(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::hier::Box &, unsigned int)) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(105,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::getBox(const SAMRAI::pdat::ArrayData<Real> *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::getBox(const SAMRAI::pdat::ArrayData<Real> *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(171,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::getDepth(const SAMRAI::pdat::ArrayData<Real> *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::getDepth(const SAMRAI::pdat::ArrayData<Real> *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(178,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::getOffset(const SAMRAI::pdat::ArrayData<Real> *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::getOffset(const SAMRAI::pdat::ArrayData<Real> *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(185,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(207,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::getPointer(const SAMRAI::pdat::ArrayData<Real> *, unsigned int) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::getPointer(const SAMRAI::pdat::ArrayData<Real> *, unsigned int) const) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(217,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::operator()(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::hier::Index &, unsigned int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::operator()(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::hier::Index &, unsigned int)) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(247,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::copy(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::copy(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &)) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(284,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::copy(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::BoxContainer &, const SAMRAI::hier::Transformation &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::copy(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::BoxContainer &, const SAMRAI::hier::Transformation &)) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(450,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::copyDepth(SAMRAI::pdat::ArrayData<Real> *, unsigned int, const SAMRAI::pdat::ArrayData<Real> &, unsigned int, const SAMRAI::hier::Box &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::copyDepth(SAMRAI::pdat::ArrayData<Real> *, unsigned int, const SAMRAI::pdat::ArrayData<Real> &, unsigned int, const SAMRAI::hier::Box &)) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(475,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::sum(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::sum(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &)) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(549,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::sum(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::BoxContainer &, const SAMRAI::hier::IntVector &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::sum(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::BoxContainer &, const SAMRAI::hier::IntVector &)) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(749,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::getDataStreamSize(const SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::hier::BoxContainer &, const SAMRAI::hier::IntVector &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::getDataStreamSize(const SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::hier::BoxContainer &, const SAMRAI::hier::IntVector &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(761,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::unpackStream(SAMRAI::pdat::ArrayData<Real> *, SAMRAI::tbox::MessageStream &, const SAMRAI::hier::BoxContainer &, const SAMRAI::hier::IntVector &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::unpackStream(SAMRAI::pdat::ArrayData<Real> *, SAMRAI::tbox::MessageStream &, const SAMRAI::hier::BoxContainer &, const SAMRAI::hier::IntVector &)) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(929,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::unpackStreamAndSum(SAMRAI::pdat::ArrayData<Real> *, SAMRAI::tbox::MessageStream &, const SAMRAI::hier::Box &, const SAMRAI::hier::IntVector &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::unpackStreamAndSum(SAMRAI::pdat::ArrayData<Real> *, SAMRAI::tbox::MessageStream &, const SAMRAI::hier::Box &, const SAMRAI::hier::IntVector &)) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(966,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::getFromRestart(SAMRAI::pdat::ArrayData<Real> *, const std::shared_ptr<SAMRAI::tbox::Database> &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::getFromRestart(SAMRAI::pdat::ArrayData<Real> *, const std::shared_ptr<SAMRAI::tbox::Database> &)) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(1197,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::putToRestart(const SAMRAI::pdat::ArrayData<Real> *, const std::shared_ptr<SAMRAI::tbox::Database> &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::putToRestart(const SAMRAI::pdat::ArrayData<Real> *, const std::shared_ptr<SAMRAI::tbox::Database> &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(1231,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::getDim(const SAMRAI::pdat::ArrayData<Real> *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::getDim(const SAMRAI::pdat::ArrayData<Real> *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(1250,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::packBuffer(const SAMRAI::pdat::ArrayData<Real> *, Real *, const SAMRAI::hier::Box &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::packBuffer(const SAMRAI::pdat::ArrayData<Real> *, Real *, const SAMRAI::hier::Box &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(1287,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::unpackBuffer(SAMRAI::pdat::ArrayData<Real> *, const Real *, const SAMRAI::hier::Box &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::unpackBuffer(SAMRAI::pdat::ArrayData<Real> *, const Real *, const SAMRAI::hier::Box &)) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(1306,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::unpackBufferAndSum(SAMRAI::pdat::ArrayData<Real> *, const Real *, const SAMRAI::hier::Box &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::unpackBufferAndSum(SAMRAI::pdat::ArrayData<Real> *, const Real *, const SAMRAI::hier::Box &)) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(1334,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::getIndex(const SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::hier::Index &, unsigned int) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::getIndex(const SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::hier::Index &, unsigned int) const) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(194,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::CopyOperation<Real>::operator()(const SAMRAI::pdat::CopyOperation<Real> *, Real &, const Real &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::CopyOperation<Real>::operator()(const SAMRAI::pdat::CopyOperation<Real> *, Real &, const Real &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CopyOperation.cpp(30,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayDataOperationUtilities<Real, SAMRAI::pdat::CopyOperation<Real>>::doArrayDataBufferOperationOnBox(const SAMRAI::pdat::ArrayData<Real> &, const Real *, const SAMRAI::hier::Box &, bool, const SAMRAI::pdat::CopyOperation<Real> &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayDataOperationUtilities<Real, SAMRAI::pdat::CopyOperation<Real>>::doArrayDataBufferOperationOnBox(const SAMRAI::pdat::ArrayData<Real> &, const Real *, const SAMRAI::hier::Box &, bool, const SAMRAI::pdat::CopyOperation<Real> &)) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(267,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::SumOperation<Real>::operator()(const SAMRAI::pdat::SumOperation<Real> *, Real &, const Real &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::SumOperation<Real>::operator()(const SAMRAI::pdat::SumOperation<Real> *, Real &, const Real &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/SumOperation.cpp(35,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayDataOperationUtilities<Real, SAMRAI::pdat::SumOperation<Real>>::doArrayDataBufferOperationOnBox(const SAMRAI::pdat::ArrayData<Real> &, const Real *, const SAMRAI::hier::Box &, bool, const SAMRAI::pdat::SumOperation<Real> &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayDataOperationUtilities<Real, SAMRAI::pdat::SumOperation<Real>>::doArrayDataBufferOperationOnBox(const SAMRAI::pdat::ArrayData<Real> &, const Real *, const SAMRAI::hier::Box &, bool, const SAMRAI::pdat::SumOperation<Real> &)) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(267,1)

===========================================================================

Begin optimization report for: SAMRAI::geom::CartesianPatchGeometry::getDx(const SAMRAI::geom::CartesianPatchGeometry *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::geom::CartesianPatchGeometry::getDx(const SAMRAI::geom::CartesianPatchGeometry *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/geom/CartesianPatchGeometry.h(70,4)

===========================================================================

Begin optimization report for: __sti__$E()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (__sti__$E()) [633] <compiler generated>
  -> INLINE: /usr/include/c++/4.8.5/iostream:(74,25) __sti___ZN6SAMRAI4pdat8CellDataIdE6t_copyE()
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(38,46) std::shared_ptr<SAMRAI::tbox::Timer>::shared_ptr(std::shared_ptr<SAMRAI::tbox::Timer> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(733,17):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (8, 0)
<compiler generated>:remark #34051: REGISTER ALLOCATION : [__sti__$E] (null):0

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rdx rsi rdi]
        
    Routine temporaries
        Total         :      24
            Global    :      11
            Local     :      13
        Regenerable   :      16
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: __sti___ZN6SAMRAI4pdat8CellDataIdE6t_copyE()

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (__sti___ZN6SAMRAI4pdat8CellDataIdE6t_copyE()) <compiler generated>

===========================================================================

Begin optimization report for: std::_Vector_base<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::_M_get_Tp_allocator(std::_Vector_base<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(114,7):remark #34051: REGISTER ALLOCATION : [_ZNSt12_Vector_baseISt6vectorISt10shared_ptrIN6SAMRAI4pdat8CellDataIdEEESaIS6_EESaIS8_EE19_M_get_Tp_allocatorEv] /usr/include/c++/4.8.5/bits/stl_vector.h:114

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rax rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Vector_base<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::_M_deallocate(std::_Vector_base<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::_Vector_base<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::pointer, std::size_t)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(172,7):remark #34051: REGISTER ALLOCATION : [_ZNSt12_Vector_baseISt6vectorISt10shared_ptrIN6SAMRAI4pdat8CellDataIdEEESaIS6_EESaIS8_EE13_M_deallocateEPS8_m] /usr/include/c++/4.8.5/bits/stl_vector.h:172

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdx rsi rdi]
        
    Routine temporaries
        Total         :      11
            Global    :       7
            Local     :       4
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Destroy_aux<false>::__destroy<std::_Vector_base<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::pointer>(std::_Vector_base<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::pointer, std::_Vector_base<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::pointer)

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between __first->_M_start (415:9) and call:operator delete(void *) (110:9)

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.8.5/bits/stl_construct.h(104,6)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between __first->_M_refcount->_M_pi (545:2) and *__mem (68:6)
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_construct.h(101,2):remark #34051: REGISTER ALLOCATION : [_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorISt10shared_ptrIN6SAMRAI4pdat8CellDataIdEEESaIS8_EEEEvT_SC_] /usr/include/c++/4.8.5/bits/stl_construct.h:101

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rbx rbp rsi rdi r12-r15]
        
    Routine temporaries
        Total         :      28
            Global    :      15
            Local     :      13
        Regenerable   :       3
        Spilled       :       6
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       6 [5.91e+00 ~ 1.3%]
            Writes    :       6 [5.91e+00 ~ 1.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Vector_base<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::~_Vector_base(std::_Vector_base<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(160,7):remark #34051: REGISTER ALLOCATION : [_ZNSt12_Vector_baseISt10shared_ptrIN6SAMRAI4pdat8CellDataIdEEESaIS5_EED1Ev] /usr/include/c++/4.8.5/bits/stl_vector.h:160

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :      10
            Global    :       7
            Local     :       3
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::isInitialized(const SAMRAI::pdat::ArrayData<Real> *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::isInitialized(const SAMRAI::pdat::ArrayData<Real> *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(164,1)

===========================================================================

Begin optimization report for: std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::_M_default_append(std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>> *, std::vector<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>, std::allocator<std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>>>::size_type)

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_uninitialized.h(494,8) inlined into /usr/include/c++/4.8.5/bits/vector.tcc(541,8)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_uninitialized.h(74,23) inlined into /usr/include/c++/4.8.5/bits/vector.tcc(555,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_uninitialized.h(494,8) inlined into /usr/include/c++/4.8.5/bits/vector.tcc(558,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.8.5/bits/vector.tcc(569,8)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between __first->_M_start (415:9) and call:operator delete(void *) (110:9)

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.8.5/bits/vector.tcc(569,8)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between __first->_M_refcount->_M_pi (545:2) and *__mem (68:6)
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/vector.tcc(534,5):remark #34051: REGISTER ALLOCATION : [_ZNSt6vectorIS_ISt10shared_ptrIN6SAMRAI4pdat8CellDataIdEEESaIS5_EESaIS7_EE17_M_default_appendEm] /usr/include/c++/4.8.5/bits/vector.tcc:534

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rbp rsi rdi r8-r9 r12-r15]
        
    Routine temporaries
        Total         :      76
            Global    :      31
            Local     :      45
        Regenerable   :       9
        Spilled       :      11
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      40 bytes*
            Reads     :       7 [3.55e+00 ~ 1.0%]
            Writes    :       7 [3.55e+00 ~ 1.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
