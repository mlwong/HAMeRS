Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: FlowModelMPIHelperMaxMin::getMaxQuantity(FlowModelMPIHelperMaxMin *, const std::string *, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FlowModelMPIHelperMaxMin::getMaxQuantity(FlowModelMPIHelperMaxMin *, const std::string *, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &)) [4] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(16,1)
  -> INLINE: (20,45) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (20,47) SAMRAI::hier::PatchHierarchy::getNumberOfLevels(const SAMRAI::hier::PatchHierarchy *) const
  -> INLINE: (29,13) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (31,26) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
  -> INLINE: (31,26) std::shared_ptr<ExtendedFlattenedHierarchy>::shared_ptr<ExtendedFlattenedHierarchy>(std::shared_ptr<ExtendedFlattenedHierarchy> *, ExtendedFlattenedHierarchy *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (33,15) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (42,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (42,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (42,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (44,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (44,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (45,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (45,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (45,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (45,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (45,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (45,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (46,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (48,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (48,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (48,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (54,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (54,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (56,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (63,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (65,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (65,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (65,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (65,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (65,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (68,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (68,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (68,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (68,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (68,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (81,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (83,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (83,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (86,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (86,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (90,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (90,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (92,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (94,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (95,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (95,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (95,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (95,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (96,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (98,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (100,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (102,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (104,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (105,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (107,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (117,39) std::max<Real>(const Real &, const Real &)
  -> INLINE: (126,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (126,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (126,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (127,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (140,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (149,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (149,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (149,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (151,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (151,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (152,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (152,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (152,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (152,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (152,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (152,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (153,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (155,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (155,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (155,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (161,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (161,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (163,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (170,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (172,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (172,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (172,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (172,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (172,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (175,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (175,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (175,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (175,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (175,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (188,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (190,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (190,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (193,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (193,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (197,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (197,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (198,78) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (198,80) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (198,94) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (200,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (201,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (202,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (204,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (205,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (205,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (205,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (205,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (206,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (208,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (210,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (212,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (213,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (215,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (216,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (218,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (219,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (232,43) std::max<Real>(const Real &, const Real &)
  -> INLINE: (242,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (242,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (242,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (243,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (256,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (265,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (265,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (265,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (267,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (267,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (268,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (268,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (268,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (268,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (268,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (268,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (269,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (271,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (271,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (271,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (277,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (277,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (279,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (286,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (288,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (288,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (288,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (288,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (288,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (291,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (291,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (291,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (291,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (291,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (304,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (306,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (306,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (309,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (309,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (313,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (313,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (314,78) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (314,80) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (314,94) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (316,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (317,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (318,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (319,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (320,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (322,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (323,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (323,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (323,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (323,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (324,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (326,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (328,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (330,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (331,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (332,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (334,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (335,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (337,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (338,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (339,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (356,47) std::max<Real>(const Real &, const Real &)
  -> INLINE: (367,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (367,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (367,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (368,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (382,5) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(45,21)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(95,25)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(109,21)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed ANTI dependence between u[relative_idx_lo_0+i+num_ghosts_0_quantity] (117:25) and u_max_local (117:25)
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(109,21)
      <Remainder>
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(759,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(126,13)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(152,21)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(205,25)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(221,21)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed ANTI dependence between u[relative_idx_lo_0+i+num_ghosts_0_quantity+(relative_idx_lo_1+j (232:29) and u_max_local (232:29)

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(223,25)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed ANTI dependence between u[relative_idx_lo_0+i+num_ghosts_0_quantity+(relative_idx_lo_1+j (232:29) and u_max_local (232:29)
            remark #25439: unrolled with remainder by 2  
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(223,25)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(759,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(242,13)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(268,21)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(323,25)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(341,21)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed ANTI dependence between u[relative_idx_lo_0+i+num_ghosts_0_quantity+(relative_idx_lo_1+j (356:33) and u_max_local (356:33)

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(343,25)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed ANTI dependence between u[relative_idx_lo_0+i+num_ghosts_0_quantity+(relative_idx_lo_1+j (356:33) and u_max_local (356:33)

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(345,29)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed ANTI dependence between u[relative_idx_lo_0+i+num_ghosts_0_quantity+(relative_idx_lo_1+j (356:33) and u_max_local (356:33)
               remark #25439: unrolled with remainder by 2  
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(345,29)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(759,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(367,13)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(35,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(44,61) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(142,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(151,61) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(258,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(267,61) ]
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/hashtable.h(780,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable.h(780,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable.h(780,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable.h(1642,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable.h(1642,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable.h(1642,7):remark #34026: call to memset implemented as a call to optimized library version
/home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(16,1):remark #34051: REGISTER ALLOCATION : [_ZN24FlowModelMPIHelperMaxMin14getMaxQuantityESsiRKSt10shared_ptrIN6SAMRAI4hier15VariableContextEE] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp:16

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :    1072
            Global    :     270
            Local     :     802
        Regenerable   :     346
        Spilled       :      34
        
    Routine stack
        Variables     :    1288 bytes*
            Reads     :      93 [1.00e+03 ~ 2.9%]
            Writes    :      86 [2.84e+03 ~ 8.2%]
        Spills        :     224 bytes*
            Reads     :      62 [6.20e+02 ~ 1.8%]
            Writes    :      34 [2.23e+02 ~ 0.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)) [6] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h(1220,7)
  -> INLINE: (1222,10) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator++(std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h(1220,7):remark #34051: REGISTER ALLOCATION : [_ZN6SAMRAI4hier10PatchLevel8IteratorppEi] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:1220

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    5[ rax rdx rbx rsi rdi]
        
    Routine temporaries
        Total         :      17
            Global    :       8
            Local     :       9
        Regenerable   :       0
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const) [7] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h(1270,4)


    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h(1270,4):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4hier10PatchLevel3endEv] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:1270

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdx rsi rdi]
        
    Routine temporaries
        Total         :      13
            Global    :       0
            Local     :      13
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const) [8] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h(1260,4)


    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h(1260,4):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4hier10PatchLevel5beginEv] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:1260

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdx rsi rdi]
        
    Routine temporaries
        Total         :      13
            Global    :       0
            Local     :      13
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const) [9] /home/akula/HAMeRS_IB/HAMeRS/include/extn/patch_hierarchies/ExtendedFlattenedHierarchy.hpp(98,9)
  -> INLINE: (102,32) std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>>::operator[](const std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>> *, std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>>::size_type) const
  -> INLINE: (102,46) std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::find(const std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>> *, const std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type &) const
    -> INLINE: /usr/include/c++/4.8.5/bits/stl_map.h:(837,26) std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::find(const std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type> *, const std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::key_type &) const
      -> INLINE: /usr/include/c++/4.8.5/bits/stl_tree.h:(1805,65) std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::_M_lower_bound(const std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::_Const_Link_type, std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::_Const_Link_type, const std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type &) const
        -> INLINE: (1157,29) std::less<SAMRAI::hier::BoxId>::operator()(const std::less<SAMRAI::hier::BoxId> *, const SAMRAI::hier::BoxId &, const SAMRAI::hier::BoxId &) const
          -> INLINE: /usr/include/c++/4.8.5/bits/stl_function.h:(235,20) SAMRAI::hier::BoxId::operator<(const SAMRAI::hier::BoxId *, const SAMRAI::hier::BoxId &) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(224,26) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(224,57) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(225,27) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(225,59) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,28) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,41) SAMRAI::hier::LocalId::operator<(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,57) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,29) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,42) SAMRAI::hier::LocalId::operator==(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,59) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(228,32) SAMRAI::hier::PeriodicId::operator<(const SAMRAI::hier::PeriodicId *, const SAMRAI::hier::PeriodicId &) const
      -> INLINE: /usr/include/c++/4.8.5/bits/stl_tree.h:(1807,33) std::less<SAMRAI::hier::BoxId>::operator()(const std::less<SAMRAI::hier::BoxId> *, const SAMRAI::hier::BoxId &, const SAMRAI::hier::BoxId &) const
        -> INLINE: /usr/include/c++/4.8.5/bits/stl_function.h:(235,20) SAMRAI::hier::BoxId::operator<(const SAMRAI::hier::BoxId *, const SAMRAI::hier::BoxId &) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(224,26) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(224,57) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(225,27) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(225,59) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,28) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,41) SAMRAI::hier::LocalId::operator<(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,57) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,29) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,42) SAMRAI::hier::LocalId::operator==(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,59) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(228,32) SAMRAI::hier::PeriodicId::operator<(const SAMRAI::hier::PeriodicId *, const SAMRAI::hier::PeriodicId &) const
  -> INLINE: (102,46) SAMRAI::hier::Box::getBoxId(const SAMRAI::hier::Box *) const
  -> INLINE: (104,21) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::value_type>::operator==(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (104,39) std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::end(const std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (104,39) std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>>::operator[](const std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>> *, std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>>::size_type) const
  -> INLINE: (106,17) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (106,17) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (106,17) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (106,17) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (106,17) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (106,17) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (106,17) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (106,17) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (106,17) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> INLINE: (106,17) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (106,17) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (106,17) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (106,17) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (106,17) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (106,17) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (111,23) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::value_type> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h(228,34) inlined into /home/akula/HAMeRS_IB/HAMeRS/include/extn/patch_hierarchies/ExtendedFlattenedHierarchy.hpp(103,46)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/home/akula/HAMeRS_IB/HAMeRS/include/extn/patch_hierarchies/ExtendedFlattenedHierarchy.hpp(98,9):remark #34051: REGISTER ALLOCATION : [_ZNK26ExtendedFlattenedHierarchy15getVisibleBoxesERKN6SAMRAI4hier3BoxEi] /home/akula/HAMeRS_IB/HAMeRS/include/extn/patch_hierarchies/ExtendedFlattenedHierarchy.hpp:98

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rbp rsi rdi r8-r10 r12-r15]
        
    Routine temporaries
        Total         :     338
            Global    :      84
            Local     :     254
        Regenerable   :     121
        Spilled       :       6
        
    Routine stack
        Variables     :     421 bytes*
            Reads     :      24 [6.75e+00 ~ 3.0%]
            Writes    :      51 [2.84e+01 ~ 12.8%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const) [10] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(636,4)
  -> INLINE: (637,11) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
    -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (638,17) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(1133,28) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (638,36) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
    -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
  -> INLINE: (640,32) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(284,11) SAMRAI::hier::Index::operator-=(SAMRAI::hier::Index *, const SAMRAI::hier::Index &)
      -> INLINE: (267,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (267,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (640,39) SAMRAI::hier::Index::operator+(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(253,11) SAMRAI::hier::Index::operator+=(SAMRAI::hier::Index *, int)
      -> INLINE: (239,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (239,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(638,11)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(267,42) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(641,32)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 2  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(239,42) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(641,39)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 8  
LOOP END

    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(636,4):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4hier3Box11numberCellsEv] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:636

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rbx rsi rdi r8 r13]
        
    Routine temporaries
        Total         :      79
            Global    :      17
            Local     :      62
        Regenerable   :      13
        Spilled       :       2
        
    Routine stack
        Variables     :      56 bytes*
            Reads     :      13 [3.69e+00 ~ 4.7%]
            Writes    :      12 [2.25e+00 ~ 2.9%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const) [11] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(281,4)
  -> INLINE: (284,11) SAMRAI::hier::Index::operator-=(SAMRAI::hier::Index *, const SAMRAI::hier::Index &)
    -> INLINE: (267,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: (267,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(267,42) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(285,11)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between __p1->d_index[i] (268:10) and rhs->d_index[i] (268:10)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(267,42) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(285,11)
<Remainder>
LOOP END

    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(281,4):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4hier5IndexmiERKS1_] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:281

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rsi rdi r8-r10 r13-r14]
        
    Routine temporaries
        Total         :      27
            Global    :      13
            Local     :      14
        Regenerable   :       0
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const) [12] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h(493,4)
  -> INLINE: (495,28) std::shared_ptr<SAMRAI::hier::PatchLevel>::shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const std::shared_ptr<SAMRAI::hier::PatchLevel> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (495,28) std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>> *, std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>>::size_type) const


    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h(493,4):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4hier14PatchHierarchy13getPatchLevelEi] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:493

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    5[ rax rdx rcx rsi rdi]
        
    Routine temporaries
        Total         :      20
            Global    :       8
            Local     :      12
        Regenerable   :       2
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr.h(93,11):remark #34051: REGISTER ALLOCATION : [_ZNSt10shared_ptrIN6SAMRAI4hier10PatchLevelEED1Ev] /usr/include/c++/4.8.5/bits/shared_ptr.h:93

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rdi r12-r13]
        
    Routine temporaries
        Total         :      24
            Global    :      12
            Local     :      12
        Regenerable   :       3
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr.h(93,11):remark #34051: REGISTER ALLOCATION : [_ZNSt10shared_ptrIN6SAMRAI4hier5PatchEED1Ev] /usr/include/c++/4.8.5/bits/shared_ptr.h:93

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rdi r12-r13]
        
    Routine temporaries
        Total         :      24
            Global    :      12
            Local     :      12
        Regenerable   :       3
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(759,7) inlined into /usr/include/c++/4.8.5/bits/unordered_map.h(98,11)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/hashtable.h(1642,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/unordered_map.h(97,11):remark #34051: REGISTER ALLOCATION : [_ZNSt13unordered_mapISsN6SAMRAI4hier9IntVectorESt4hashISsESt8equal_toISsESaISt4pairIKSsS2_EEED1Ev] /usr/include/c++/4.8.5/bits/unordered_map.h:97

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rbx rbp rsi rdi r8 r14-r15]
        
    Routine temporaries
        Total         :      33
            Global    :      13
            Local     :      20
        Regenerable   :       7
        Spilled       :       4
        
    Routine stack
        Variables     :       1 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      24 bytes*
            Reads     :       3 [2.33e+00 ~ 2.5%]
            Writes    :       3 [2.33e+00 ~ 2.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_pair.h(96,12):remark #34051: REGISTER ALLOCATION : [_ZNSt4pairISsN6SAMRAI4hier9IntVectorEED1Ev] /usr/include/c++/4.8.5/bits/stl_pair.h:96

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rsi rdi r13]
        
    Routine temporaries
        Total         :      21
            Global    :      11
            Local     :      10
        Regenerable   :       5
        Spilled       :       1
        
    Routine stack
        Variables     :       1 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr.h(93,11):remark #34051: REGISTER ALLOCATION : [_ZNSt10shared_ptrI26ExtendedFlattenedHierarchyED1Ev] /usr/include/c++/4.8.5/bits/shared_ptr.h:93

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rdi r12-r13]
        
    Routine temporaries
        Total         :      24
            Global    :      12
            Local     :      12
        Regenerable   :       3
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FlowModelMPIHelperMaxMin::getMaxReciprocalOfQuantity(FlowModelMPIHelperMaxMin *, const std::string *, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FlowModelMPIHelperMaxMin::getMaxReciprocalOfQuantity(FlowModelMPIHelperMaxMin *, const std::string *, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &)) [19] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(394,1)
  -> INLINE: (398,45) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (398,47) SAMRAI::hier::PatchHierarchy::getNumberOfLevels(const SAMRAI::hier::PatchHierarchy *) const
  -> INLINE: (407,13) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (409,26) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
  -> INLINE: (409,26) std::shared_ptr<ExtendedFlattenedHierarchy>::shared_ptr<ExtendedFlattenedHierarchy>(std::shared_ptr<ExtendedFlattenedHierarchy> *, ExtendedFlattenedHierarchy *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (411,15) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (420,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (420,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (420,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (422,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (422,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (423,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (423,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (423,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (423,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (423,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (423,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (424,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (426,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (426,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (426,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (432,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (432,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (434,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (441,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (443,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (443,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (443,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (443,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (443,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (446,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (446,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (446,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (446,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (446,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (459,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (461,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (461,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (464,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (464,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (468,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (468,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (470,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (472,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (473,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (473,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (473,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (473,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (474,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (476,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (478,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (480,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (482,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (483,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (485,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (495,43) std::max<Real>(const Real &, const Real &)
  -> INLINE: (504,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (504,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (504,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (505,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (518,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (527,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (527,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (527,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (529,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (529,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (530,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (530,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (530,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (530,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (530,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (530,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (531,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (533,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (533,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (533,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (539,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (539,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (541,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (548,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (550,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (550,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (550,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (550,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (550,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (553,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (553,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (553,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (553,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (553,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (566,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (568,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (568,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (571,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (571,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (575,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (575,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (576,78) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (576,80) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (576,94) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (578,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (579,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (580,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (582,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (583,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (583,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (583,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (583,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (584,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (586,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (588,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (590,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (591,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (593,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (594,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (596,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (597,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (610,47) std::max<Real>(const Real &, const Real &)
  -> INLINE: (620,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (620,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (620,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (621,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (634,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (643,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (643,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (643,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (645,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (645,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (646,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (646,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (646,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (646,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (646,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (646,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (647,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (649,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (649,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (649,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (655,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (655,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (657,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (664,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (666,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (666,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (666,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (666,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (666,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (669,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (669,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (669,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (669,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (669,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (682,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (684,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (684,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (687,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (687,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (691,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (691,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (692,78) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (692,80) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (692,94) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (694,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (695,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (696,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (697,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (698,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (700,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (701,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (701,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (701,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (701,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (702,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (704,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (706,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (708,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (709,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (710,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (712,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (713,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (715,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (716,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (717,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (734,51) std::max<Real>(const Real &, const Real &)
  -> INLINE: (745,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (745,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (745,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (746,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (760,5) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(423,21)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(473,25)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(487,21)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed ANTI dependence between u[relative_idx_lo_0+i+num_ghosts_0_quantity] (495:25) and u_inv_max_local (495:25)
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(487,21)
      <Remainder>
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(759,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(504,13)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(530,21)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(583,25)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(599,21)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed ANTI dependence between u[relative_idx_lo_0+i+num_ghosts_0_quantity+(relative_idx_lo_1+j (610:29) and u_inv_max_local (610:29)

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(601,25)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed ANTI dependence between u[relative_idx_lo_0+i+num_ghosts_0_quantity+(relative_idx_lo_1+j (610:29) and u_inv_max_local (610:29)
            remark #25439: unrolled with remainder by 2  
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(601,25)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(759,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(620,13)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(646,21)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(701,25)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(719,21)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed ANTI dependence between u[relative_idx_lo_0+i+num_ghosts_0_quantity+(relative_idx_lo_1+j (734:33) and u_inv_max_local (734:33)

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(721,25)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed ANTI dependence between u[relative_idx_lo_0+i+num_ghosts_0_quantity+(relative_idx_lo_1+j (734:33) and u_inv_max_local (734:33)

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(723,29)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed ANTI dependence between u[relative_idx_lo_0+i+num_ghosts_0_quantity+(relative_idx_lo_1+j (734:33) and u_inv_max_local (734:33)
               remark #25439: unrolled with remainder by 2  
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(723,29)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(759,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(745,13)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(413,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(422,61) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(520,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(529,61) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(636,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(645,61) ]
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/hashtable.h(780,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable.h(780,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable.h(780,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable.h(1642,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable.h(1642,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable.h(1642,7):remark #34026: call to memset implemented as a call to optimized library version
/home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(394,1):remark #34051: REGISTER ALLOCATION : [_ZN24FlowModelMPIHelperMaxMin26getMaxReciprocalOfQuantityESsiRKSt10shared_ptrIN6SAMRAI4hier15VariableContextEE] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp:394

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm2]
        
    Routine temporaries
        Total         :    1075
            Global    :     273
            Local     :     802
        Regenerable   :     349
        Spilled       :      34
        
    Routine stack
        Variables     :    1288 bytes*
            Reads     :      93 [1.00e+03 ~ 2.9%]
            Writes    :      86 [2.84e+03 ~ 8.2%]
        Spills        :     224 bytes*
            Reads     :      62 [6.20e+02 ~ 1.8%]
            Writes    :      34 [2.23e+02 ~ 0.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FlowModelMPIHelperMaxMin::getMaxQuantity(FlowModelMPIHelperMaxMin *, const std::vector<std::string, std::allocator<std::string>> &, const std::vector<int, std::allocator<int>> &, const std::shared_ptr<SAMRAI::hier::VariableContext> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FlowModelMPIHelperMaxMin::getMaxQuantity(FlowModelMPIHelperMaxMin *, const std::vector<std::string, std::allocator<std::string>> &, const std::vector<int, std::allocator<int>> &, const std::shared_ptr<SAMRAI::hier::VariableContext> &)) [20] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(772,1)
  -> INLINE: (773,58) std::vector<std::string, std::allocator<std::string>>::size(const std::vector<std::string, std::allocator<std::string>> *) const
  -> DELETED: (777,23) std::allocator<bool>::~allocator(std::allocator<bool> *)
  -> (777,54) std::vector<bool, std::allocator<bool>>::~vector(std::vector<bool, std::allocator<bool>> *)
  -> DELETED: (777,54) std::allocator<bool>::~allocator(std::allocator<bool> *)
  -> (777,54) std::vector<bool, std::allocator<bool>>::vector(std::vector<bool, std::allocator<bool>> *, std::vector<bool, std::allocator<bool>>::size_type, const bool &, const std::vector<bool, std::allocator<bool>>::allocator_type &)
  -> INLINE: (777,54) std::allocator<bool>::allocator(std::allocator<bool> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (779,5) std::vector<bool, std::allocator<bool>>::~vector(std::vector<bool, std::allocator<bool>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (779,12) FlowModelMPIHelperMaxMin::getMaxQuantity(FlowModelMPIHelperMaxMin *, const std::vector<std::string, std::allocator<std::string>> &, const std::vector<int, std::allocator<int>> &, const std::vector<bool, std::allocator<bool>> &, const std::shared_ptr<SAMRAI::hier::VariableContext> &)


    Report from: Code generation optimizations [cg]

/home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(772,1):remark #34051: REGISTER ALLOCATION : [_ZN24FlowModelMPIHelperMaxMin14getMaxQuantityERKSt6vectorISsSaISsEERKS0_IiSaIiEERKSt10shared_ptrIN6SAMRAI4hier15VariableContextEE] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp:772

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rsi rdi r8 r12-r15 zmm0]
        
    Routine temporaries
        Total         :      49
            Global    :      14
            Local     :      35
        Regenerable   :       9
        Spilled       :       5
        
    Routine stack
        Variables     :      50 bytes*
            Reads     :       3 [1.00e+00 ~ 2.1%]
            Writes    :       3 [1.00e+00 ~ 2.1%]
        Spills        :       8 bytes*
            Reads     :       1 [2.78e-01 ~ 0.6%]
            Writes    :       1 [2.78e-01 ~ 0.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::vector<bool, std::allocator<bool>>::vector(std::vector<bool, std::allocator<bool>> *, std::vector<bool, std::allocator<bool>>::size_type, const bool &, const std::vector<bool, std::allocator<bool>>::allocator_type &)

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(692,7) inlined into /usr/include/c++/4.8.5/bits/stl_bvector.h(569,7)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(692,7) inlined into /usr/include/c++/4.8.5/bits/stl_bvector.h(569,7)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(692,7) inlined into /usr/include/c++/4.8.5/bits/stl_bvector.h(569,7)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_bvector.h(961,32):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/stl_bvector.h(276,25):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (16, 0)
/usr/include/c++/4.8.5/bits/stl_bvector.h(962,74):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
/usr/include/c++/4.8.5/bits/stl_bvector.h(962,74):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/stl_bvector.h(566,5):remark #34051: REGISTER ALLOCATION : [_ZNSt6vectorIbSaIbEEC1EmRKbRKS0_] /usr/include/c++/4.8.5/bits/stl_bvector.h:566

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r12-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :      70
            Global    :      24
            Local     :      46
        Regenerable   :       2
        Spilled       :       5
        
    Routine stack
        Variables     :      56 bytes*
            Reads     :       6 [5.00e+00 ~ 2.7%]
            Writes    :       8 [6.00e+00 ~ 3.3%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Bvector_base<std::allocator<bool>>::~_Bvector_base(std::_Bvector_base<std::allocator<bool>> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_bvector.h(466,7):remark #34051: REGISTER ALLOCATION : [_ZNSt13_Bvector_baseISaIbEED1Ev] /usr/include/c++/4.8.5/bits/stl_bvector.h:466

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :      10
            Global    :       7
            Local     :       3
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FlowModelMPIHelperMaxMin::getMaxQuantity(FlowModelMPIHelperMaxMin *, const std::vector<std::string, std::allocator<std::string>> &, const std::vector<int, std::allocator<int>> &, const std::vector<bool, std::allocator<bool>> &, const std::shared_ptr<SAMRAI::hier::VariableContext> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FlowModelMPIHelperMaxMin::getMaxQuantity(FlowModelMPIHelperMaxMin *, const std::vector<std::string, std::allocator<std::string>> &, const std::vector<int, std::allocator<int>> &, const std::vector<bool, std::allocator<bool>> &, const std::shared_ptr<SAMRAI::hier::VariableContext> &)) [27] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(796,1)
  -> INLINE: (797,58) std::vector<std::string, std::allocator<std::string>>::size(const std::vector<std::string, std::allocator<std::string>> *) const
  -> INLINE: (805,45) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (805,47) SAMRAI::hier::PatchHierarchy::getNumberOfLevels(const SAMRAI::hier::PatchHierarchy *) const
  -> INLINE: (814,13) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (816,26) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
  -> INLINE: (816,26) std::shared_ptr<ExtendedFlattenedHierarchy>::shared_ptr<ExtendedFlattenedHierarchy>(std::shared_ptr<ExtendedFlattenedHierarchy> *, ExtendedFlattenedHierarchy *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (818,15) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (827,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (827,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (827,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (829,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (829,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (830,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (830,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (830,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (830,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (830,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (830,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (831,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (833,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (833,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (833,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (839,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (839,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (841,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (848,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (850,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (850,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (850,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (850,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (850,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (855,25) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (855,25) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (855,79) std::vector<std::string, std::allocator<std::string>>::operator[](const std::vector<std::string, std::allocator<std::string>> *, std::vector<std::string, std::allocator<std::string>>::size_type) const
  -> (855,85) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (855,85) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (855,85) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (868,72) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::~vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> (868,72) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> (869,33) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::resize(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (872,36) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (872,41) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::operator=(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *, std::shared_ptr<SAMRAI::pdat::CellData<Real>> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (872,41) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (872,69) std::vector<std::string, std::allocator<std::string>>::operator[](const std::vector<std::string, std::allocator<std::string>> *, std::vector<std::string, std::allocator<std::string>>::size_type) const
  -> (875,36) std::vector<Real *, std::allocator<Real *>>::~vector(std::vector<Real *, std::allocator<Real *>> *)
  -> (875,36) std::vector<Real *, std::allocator<Real *>>::vector(std::vector<Real *, std::allocator<Real *>> *)
  -> INLINE: (876,22) std::vector<Real *, std::allocator<Real *>>::resize(std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (879,25) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (879,47) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (879,51) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (879,53) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (879,81) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (883,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (883,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (888,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (888,42) ExtendedFlattenedHierarchy::getOverlappedVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> (892,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (892,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (893,35) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (897,76) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (897,80) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (897,82) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (898,39) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (898,64) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (901,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (902,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (902,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (902,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (902,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (903,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (905,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (907,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (909,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (911,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (912,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (914,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (915,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> (928,64) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (929,34) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (929,34) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (929,68) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (929,68) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (930,33) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (932,77) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (934,62) SAMRAI::hier::Box::contains(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
  -> INLINE: (948,89) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (950,47) std::vector<bool, std::allocator<bool>>::operator[](const std::vector<bool, std::allocator<bool>> *, std::vector<bool, std::allocator<bool>>::size_type) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (952,46) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (956,46) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (960,37) std::max<Real>(const Real &, const Real &)
  -> INLINE: (969,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (969,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (969,13) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::~vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> INLINE: (969,13) std::vector<Real *, std::allocator<Real *>>::~vector(std::vector<Real *, std::allocator<Real *>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (969,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (970,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (983,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (992,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (992,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (992,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (994,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (994,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (995,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (995,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (995,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (995,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (995,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (995,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (996,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (998,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (998,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (998,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (1004,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1004,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (1006,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (1013,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (1015,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (1015,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1015,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (1015,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (1015,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (1020,25) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1020,25) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1020,79) std::vector<std::string, std::allocator<std::string>>::operator[](const std::vector<std::string, std::allocator<std::string>> *, std::vector<std::string, std::allocator<std::string>>::size_type) const
  -> (1020,85) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (1020,85) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (1020,85) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (1033,72) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::~vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> (1033,72) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> (1034,33) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::resize(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (1037,36) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (1037,41) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::operator=(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *, std::shared_ptr<SAMRAI::pdat::CellData<Real>> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1037,41) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1037,69) std::vector<std::string, std::allocator<std::string>>::operator[](const std::vector<std::string, std::allocator<std::string>> *, std::vector<std::string, std::allocator<std::string>>::size_type) const
  -> (1040,36) std::vector<Real *, std::allocator<Real *>>::~vector(std::vector<Real *, std::allocator<Real *>> *)
  -> (1040,36) std::vector<Real *, std::allocator<Real *>>::vector(std::vector<Real *, std::allocator<Real *>> *)
  -> INLINE: (1041,22) std::vector<Real *, std::allocator<Real *>>::resize(std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1044,25) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (1044,47) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (1044,51) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1044,53) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (1044,81) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1048,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (1048,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (1053,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (1053,42) ExtendedFlattenedHierarchy::getOverlappedVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> (1057,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (1057,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (1058,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (1058,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (1059,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (1059,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (1060,35) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (1061,35) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (1062,38) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1066,76) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (1066,80) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1066,82) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (1067,80) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (1067,84) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1067,86) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (1067,100) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (1069,39) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1069,64) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1070,39) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1070,64) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1071,42) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1071,71) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (1074,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (1075,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (1075,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (1075,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (1075,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (1076,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (1078,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (1080,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (1082,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1083,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1085,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (1086,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (1088,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (1089,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (1090,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (1091,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> (1106,68) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (1107,38) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (1107,38) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (1107,72) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (1107,72) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (1108,37) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (1110,81) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (1112,66) SAMRAI::hier::Box::contains(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
  -> INLINE: (1126,94) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1127,79) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1127,105) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1129,51) std::vector<bool, std::allocator<bool>>::operator[](const std::vector<bool, std::allocator<bool>> *, std::vector<bool, std::allocator<bool>>::size_type) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1131,50) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (1135,50) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (1139,41) std::max<Real>(const Real &, const Real &)
  -> INLINE: (1149,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1149,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (1149,13) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::~vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> INLINE: (1149,13) std::vector<Real *, std::allocator<Real *>>::~vector(std::vector<Real *, std::allocator<Real *>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1149,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1149,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1149,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1150,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1163,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (1172,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (1172,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (1172,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (1174,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (1174,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (1175,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (1175,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (1175,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1175,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (1175,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (1175,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (1176,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (1178,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1178,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (1178,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (1184,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1184,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (1186,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (1193,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (1195,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (1195,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1195,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (1195,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (1195,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (1200,25) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1200,25) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1200,79) std::vector<std::string, std::allocator<std::string>>::operator[](const std::vector<std::string, std::allocator<std::string>> *, std::vector<std::string, std::allocator<std::string>>::size_type) const
  -> (1200,85) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (1200,85) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (1200,85) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (1213,72) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::~vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> (1213,72) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> (1214,33) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::resize(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (1217,36) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (1217,41) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::operator=(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *, std::shared_ptr<SAMRAI::pdat::CellData<Real>> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1217,41) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1217,69) std::vector<std::string, std::allocator<std::string>>::operator[](const std::vector<std::string, std::allocator<std::string>> *, std::vector<std::string, std::allocator<std::string>>::size_type) const
  -> (1220,36) std::vector<Real *, std::allocator<Real *>>::~vector(std::vector<Real *, std::allocator<Real *>> *)
  -> (1220,36) std::vector<Real *, std::allocator<Real *>>::vector(std::vector<Real *, std::allocator<Real *>> *)
  -> INLINE: (1221,22) std::vector<Real *, std::allocator<Real *>>::resize(std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1224,25) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (1224,47) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (1224,51) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1224,53) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (1224,81) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1228,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (1228,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (1233,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (1233,42) ExtendedFlattenedHierarchy::getOverlappedVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> (1237,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (1237,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (1238,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (1238,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (1239,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (1239,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (1240,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (1240,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (1241,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (1241,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (1242,35) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (1243,35) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (1244,35) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (1245,38) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (1246,38) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1250,76) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (1250,80) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1250,82) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (1251,80) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (1251,84) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1251,86) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (1251,100) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (1253,39) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1253,64) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1254,39) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1254,64) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1255,39) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1255,64) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1256,42) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1256,71) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1257,42) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1257,71) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (1260,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (1261,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (1261,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (1261,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (1261,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (1262,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (1264,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (1266,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (1268,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1269,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1270,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1272,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (1273,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (1275,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (1276,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (1277,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (1278,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (1279,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (1280,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> (1297,72) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (1298,42) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (1298,42) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (1298,76) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (1298,76) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (1299,41) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (1301,85) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (1303,70) SAMRAI::hier::Box::contains(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
  -> INLINE: (1317,98) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1318,83) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1318,109) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1319,83) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1319,109) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1320,65) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1322,55) std::vector<bool, std::allocator<bool>>::operator[](const std::vector<bool, std::allocator<bool>> *, std::vector<bool, std::allocator<bool>>::size_type) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1324,54) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (1328,54) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (1332,45) std::max<Real>(const Real &, const Real &)
  -> INLINE: (1343,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1343,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (1343,13) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::~vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> INLINE: (1343,13) std::vector<Real *, std::allocator<Real *>>::~vector(std::vector<Real *, std::allocator<Real *>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1343,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1343,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1343,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1343,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1343,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1344,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1358,5) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(852,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/4.8.5/bits/stl_pair.h(113,15) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(870,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(872,43) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(877,17)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between u_qi.u_qi.u_qi.u_qi[qi] (879:25) and u_qi.u_qi.u_qi.u_qi (879:25)
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(895,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(897,82) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(902,25)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(917,21)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(923,66) ]

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(929,34)
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      LOOP END

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(946,25)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed ANTI dependence between value (952:33) and value (952:33)
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(946,25)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1017,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/4.8.5/bits/stl_pair.h(113,15) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1035,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1037,43) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1042,17)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between u_qi.u_qi.u_qi.u_qi[qi] (1044:25) and u_qi.u_qi.u_qi.u_qi (1044:25)
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1064,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1066,82) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1075,25)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1093,21)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1101,79) ]

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1095,25)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1101,79) ]

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1107,38)
            remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1124,29)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed ANTI dependence between value (1131:37) and value (1131:37)
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1197,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/4.8.5/bits/stl_pair.h(113,15) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1215,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1217,43) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1222,17)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between u_qi.u_qi.u_qi.u_qi[qi] (1224:25) and u_qi.u_qi.u_qi.u_qi (1224:25)
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1248,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1250,82) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1261,25)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1282,21)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1292,97) ]

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1284,25)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1292,97) ]

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1286,29)
            remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1292,97) ]

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1298,42)
               remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1315,33)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed ANTI dependence between value (1324:41) and value (1324:41)
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(820,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(829,61) ]

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(830,21)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(848,17) ]
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(985,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(994,61) ]

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(995,21)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1013,17) ]
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1165,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1174,61) ]

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1175,21)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1193,17) ]
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(796,1):remark #34051: REGISTER ALLOCATION : [_ZN24FlowModelMPIHelperMaxMin14getMaxQuantityERKSt6vectorISsSaISsEERKS0_IiSaIiEERKS0_IbSaIbEERKSt10shared_ptrIN6SAMRAI4hier15VariableContextEE] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp:796

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :    1335
            Global    :     332
            Local     :    1003
        Regenerable   :     493
        Spilled       :      56
        
    Routine stack
        Variables     :    1955 bytes*
            Reads     :     157 [1.37e+04 ~ 2.3%]
            Writes    :      77 [3.09e+03 ~ 0.5%]
        Spills        :     400 bytes*
            Reads     :     159 [2.10e+04 ~ 3.5%]
            Writes    :      57 [5.59e+03 ~ 0.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::vector<int, std::allocator<int>>::_M_emplace_back_aux<const std::vector<int, std::allocator<int>>::value_type &>(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/vector.tcc(401,7):remark #34051: REGISTER ALLOCATION : [_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIIRKiEEEvDpOT_] /usr/include/c++/4.8.5/bits/vector.tcc:401

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rbp rsi rdi r12-r15]
        
    Routine temporaries
        Total         :      33
            Global    :      16
            Local     :      17
        Regenerable   :       2
        Spilled       :       5
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::vector<int, std::allocator<int>>::size(const std::vector<int, std::allocator<int>> *) const

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(646,7):remark #34051: REGISTER ALLOCATION : [_ZNKSt6vectorIiSaIiEE4sizeEv] /usr/include/c++/4.8.5/bits/stl_vector.h:646

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rax rdi]
        
    Routine temporaries
        Total         :      12
            Global    :       0
            Local     :      12
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Vector_base<int, std::allocator<int>>::_M_get_Tp_allocator(std::_Vector_base<int, std::allocator<int>> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(114,7):remark #34051: REGISTER ALLOCATION : [_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv] /usr/include/c++/4.8.5/bits/stl_vector.h:114

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rax rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Vector_base<int, std::allocator<int>>::_M_deallocate(std::_Vector_base<int, std::allocator<int>> *, std::_Vector_base<int, std::allocator<int>>::pointer, std::size_t)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(172,7):remark #34051: REGISTER ALLOCATION : [_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPim] /usr/include/c++/4.8.5/bits/stl_vector.h:172

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdx rsi rdi]
        
    Routine temporaries
        Total         :      11
            Global    :       7
            Local     :       4
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Vector_base<int, std::allocator<int>>::~_Vector_base(std::_Vector_base<int, std::allocator<int>> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(160,7):remark #34051: REGISTER ALLOCATION : [_ZNSt12_Vector_baseIiSaIiEED1Ev] /usr/include/c++/4.8.5/bits/stl_vector.h:160

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :      10
            Global    :       7
            Local     :       3
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Vector_base<Real *, std::allocator<Real *>>::~_Vector_base(std::_Vector_base<Real *, std::allocator<Real *>> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(160,7):remark #34051: REGISTER ALLOCATION : [_ZNSt12_Vector_baseIPdSaIS0_EED1Ev] /usr/include/c++/4.8.5/bits/stl_vector.h:160

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :      10
            Global    :       7
            Local     :       3
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator=(std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *, std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> &&)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(789,7):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 8)
/usr/include/c++/4.8.5/bits/shared_ptr_base.h(859,7):remark #34051: REGISTER ALLOCATION : [_ZNSt12__shared_ptrIN6SAMRAI4pdat8CellDataIdEELN9__gnu_cxx12_Lock_policyE2EEaSEOS6_] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:859

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rsi rdi r13-r15]
        
    Routine temporaries
        Total         :      30
            Global    :      15
            Local     :      15
        Regenerable   :       3
        Spilled       :       3
        
    Routine stack
        Variables     :      16 bytes*
            Reads     :       2 [2.00e+00 ~ 4.7%]
            Writes    :       4 [3.35e+00 ~ 7.9%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const) [40] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h(271,7)
  -> INLINE: (272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
  -> INLINE: (273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const


    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h(271,7):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4hier12BoxContainer25BoxContainerConstIteratorneERKS2_] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:271

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rdx rsi rdi]
        
    Routine temporaries
        Total         :      18
            Global    :       9
            Local     :       9
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const) [41] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h(159,7)
  -> INLINE: (160,30) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator*(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *) const
  -> INLINE: (160,44) std::_List_const_iterator<SAMRAI::hier::Box>::operator*(const std::_List_const_iterator<SAMRAI::hier::Box> *) const


    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h(159,7):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4hier12BoxContainer25BoxContainerConstIteratordeEv] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:159

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rax rdi]
        
    Routine temporaries
        Total         :      12
            Global    :       8
            Local     :       4
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(249,17):remark #34051: REGISTER ALLOCATION : [_ZNSt6vectorISt10shared_ptrIN6SAMRAI4pdat8CellDataIdEEESaIS5_EEC1Ev] /usr/include/c++/4.8.5/bits/stl_vector.h:249

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rax rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::vector<Real *, std::allocator<Real *>>::vector(std::vector<Real *, std::allocator<Real *>> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(249,17):remark #34051: REGISTER ALLOCATION : [_ZNSt6vectorIPdSaIS0_EEC1Ev] /usr/include/c++/4.8.5/bits/stl_vector.h:249

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rax rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::resize(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_uninitialized.h(494,8) inlined into /usr/include/c++/4.8.5/bits/stl_vector.h(668,4)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between __cur->_M_ptr (733:17) and call:?1memset (733:17)
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_uninitialized.h(74,23) inlined into /usr/include/c++/4.8.5/bits/stl_vector.h(668,4)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between __cur->_M_ptr (790:16) and __first.__first->_M_ptr (793:2)
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_uninitialized.h(494,8) inlined into /usr/include/c++/4.8.5/bits/stl_vector.h(668,4)
   remark #15527: loop was not vectorized: function call to ?1memset cannot be vectorized   [ /usr/include/c++/4.8.5/bits/shared_ptr_base.h(733,17) ]
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.8.5/bits/stl_vector.h(668,4)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between __first->_M_refcount->_M_pi (545:2) and *__mem (68:6)
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.8.5/bits/stl_vector.h(670,4)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between __first->_M_refcount->_M_pi (545:2) and *__mem (68:6)
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(789,7):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/shared_ptr_base.h(733,17):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/shared_ptr_base.h(733,17):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/stl_vector.h(665,7):remark #34051: REGISTER ALLOCATION : [_ZNSt6vectorISt10shared_ptrIN6SAMRAI4pdat8CellDataIdEEESaIS5_EE6resizeEm] /usr/include/c++/4.8.5/bits/stl_vector.h:665

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rbx rbp rsi rdi r12-r15]
        
    Routine temporaries
        Total         :      76
            Global    :      35
            Local     :      41
        Regenerable   :      11
        Spilled       :       9
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      32 bytes*
            Reads     :       5 [3.08e-01 ~ 0.5%]
            Writes    :       5 [3.08e-01 ~ 0.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(249,17):remark #34051: REGISTER ALLOCATION : [_ZNSt6vectorIiSaIiEEC1Ev] /usr/include/c++/4.8.5/bits/stl_vector.h:249

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rax rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: ExtendedFlattenedHierarchy::getOverlappedVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ExtendedFlattenedHierarchy::getOverlappedVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const) [49] /home/akula/HAMeRS_IB/HAMeRS/include/extn/patch_hierarchies/ExtendedFlattenedHierarchy.hpp(128,9)
  -> INLINE: (132,43) std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>>::operator[](const std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>> *, std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>>::size_type) const
  -> INLINE: (132,57) std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::find(const std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>> *, const std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type &) const
    -> INLINE: /usr/include/c++/4.8.5/bits/stl_map.h:(837,26) std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::find(const std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type> *, const std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::key_type &) const
      -> INLINE: /usr/include/c++/4.8.5/bits/stl_tree.h:(1805,65) std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::_M_lower_bound(const std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::_Const_Link_type, std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::_Const_Link_type, const std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type &) const
        -> INLINE: (1157,29) std::less<SAMRAI::hier::BoxId>::operator()(const std::less<SAMRAI::hier::BoxId> *, const SAMRAI::hier::BoxId &, const SAMRAI::hier::BoxId &) const
          -> INLINE: /usr/include/c++/4.8.5/bits/stl_function.h:(235,20) SAMRAI::hier::BoxId::operator<(const SAMRAI::hier::BoxId *, const SAMRAI::hier::BoxId &) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(224,26) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(224,57) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(225,27) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(225,59) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,28) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,41) SAMRAI::hier::LocalId::operator<(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,57) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,29) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,42) SAMRAI::hier::LocalId::operator==(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,59) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(228,32) SAMRAI::hier::PeriodicId::operator<(const SAMRAI::hier::PeriodicId *, const SAMRAI::hier::PeriodicId &) const
      -> INLINE: /usr/include/c++/4.8.5/bits/stl_tree.h:(1807,33) std::less<SAMRAI::hier::BoxId>::operator()(const std::less<SAMRAI::hier::BoxId> *, const SAMRAI::hier::BoxId &, const SAMRAI::hier::BoxId &) const
        -> INLINE: /usr/include/c++/4.8.5/bits/stl_function.h:(235,20) SAMRAI::hier::BoxId::operator<(const SAMRAI::hier::BoxId *, const SAMRAI::hier::BoxId &) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(224,26) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(224,57) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(225,27) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(225,59) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,28) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,41) SAMRAI::hier::LocalId::operator<(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,57) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,29) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,42) SAMRAI::hier::LocalId::operator==(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,59) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(228,32) SAMRAI::hier::PeriodicId::operator<(const SAMRAI::hier::PeriodicId *, const SAMRAI::hier::PeriodicId &) const
  -> INLINE: (132,57) SAMRAI::hier::Box::getBoxId(const SAMRAI::hier::Box *) const
  -> INLINE: (134,21) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::value_type>::operator==(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (134,50) std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::end(const std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (134,50) std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>>::operator[](const std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>> *, std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>>::size_type) const
  -> INLINE: (136,17) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (136,17) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (136,17) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (136,17) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (136,17) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (136,17) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (136,17) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (136,17) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (136,17) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> INLINE: (136,17) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (136,17) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (136,17) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (136,17) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (136,17) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (136,17) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (141,23) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::value_type> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h(228,34) inlined into /home/akula/HAMeRS_IB/HAMeRS/include/extn/patch_hierarchies/ExtendedFlattenedHierarchy.hpp(133,57)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/home/akula/HAMeRS_IB/HAMeRS/include/extn/patch_hierarchies/ExtendedFlattenedHierarchy.hpp(128,9):remark #34051: REGISTER ALLOCATION : [_ZNK26ExtendedFlattenedHierarchy25getOverlappedVisibleBoxesERKN6SAMRAI4hier3BoxEi] /home/akula/HAMeRS_IB/HAMeRS/include/extn/patch_hierarchies/ExtendedFlattenedHierarchy.hpp:128

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rbp rsi rdi r8-r10 r12-r15]
        
    Routine temporaries
        Total         :     338
            Global    :      84
            Local     :     254
        Regenerable   :     121
        Spilled       :       6
        
    Routine stack
        Variables     :     421 bytes*
            Reads     :      24 [6.75e+00 ~ 3.0%]
            Writes    :      51 [2.84e+01 ~ 12.8%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/vector.tcc(67,5):remark #34051: REGISTER ALLOCATION : [_ZNSt6vectorIiSaIiEE7reserveEm] /usr/include/c++/4.8.5/bits/vector.tcc:67

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rbx rbp rsi rdi r12-r15]
        
    Routine temporaries
        Total         :      34
            Global    :      18
            Local     :      16
        Regenerable   :       3
        Spilled       :       6
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const) [51] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h(692,4)


    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h(692,4):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4hier12BoxContainer5beginEv] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:692

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdx rsi rdi]
        
    Routine temporaries
        Total         :      13
            Global    :       0
            Local     :      13
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)) [52] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h(183,7)
  -> INLINE: (186,13) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator++(std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (188,13) std::_List_const_iterator<SAMRAI::hier::Box>::operator++(std::_List_const_iterator<SAMRAI::hier::Box> *)


    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h(183,7):remark #34051: REGISTER ALLOCATION : [_ZN6SAMRAI4hier12BoxContainer25BoxContainerConstIteratorppEi] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:183

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    5[ rax rdx rsi rdi r15]
        
    Routine temporaries
        Total         :      19
            Global    :       8
            Local     :      11
        Regenerable   :       0
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::Box::contains(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::Box::contains(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const) [53] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(724,4)
  -> INLINE: (725,29) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
    -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
  -> INLINE: (725,29) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
    -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
  -> INLINE: (725,38) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (725,38) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (726,16) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (726,26) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (726,36) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (726,46) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(725,38)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(724,4):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4hier3Box8containsERKNS0_5IndexE] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:724

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rsi rdi r8]
        
    Routine temporaries
        Total         :      16
            Global    :      12
            Local     :       4
        Regenerable   :       2
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const) [54] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h(703,4)


    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h(703,4):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4hier12BoxContainer3endEv] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:703

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdx rsi rdi]
        
    Routine temporaries
        Total         :      13
            Global    :       0
            Local     :      13
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::~vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.8.5/bits/stl_vector.h(416,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between __first->_M_refcount->_M_pi (545:2) and *__mem (68:6)
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(415,7):remark #34051: REGISTER ALLOCATION : [_ZNSt6vectorISt10shared_ptrIN6SAMRAI4pdat8CellDataIdEEESaIS5_EED1Ev] /usr/include/c++/4.8.5/bits/stl_vector.h:415

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rbx rbp rsi rdi r13-r15]
        
    Routine temporaries
        Total         :      25
            Global    :      13
            Local     :      12
        Regenerable   :       3
        Spilled       :       5
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      40 bytes*
            Reads     :       5 [4.93e+00 ~ 4.5%]
            Writes    :       5 [4.93e+00 ~ 4.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::__shared_count<__gnu_cxx::_S_atomic>::__shared_count<ExtendedFlattenedHierarchy *>(std::__shared_count<__gnu_cxx::_S_atomic> *, ExtendedFlattenedHierarchy *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(449,2):remark #34051: REGISTER ALLOCATION : [_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1IP26ExtendedFlattenedHierarchyEET_] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:449

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rsi rdi r14-r15]
        
    Routine temporaries
        Total         :      28
            Global    :      10
            Local     :      18
        Regenerable   :       2
        Spilled       :       2
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       2 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::vector<bool, std::allocator<bool>>::~vector(std::vector<bool, std::allocator<bool>> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_bvector.h(621,33):remark #34051: REGISTER ALLOCATION : [_ZNSt6vectorIbSaIbEED1Ev] /usr/include/c++/4.8.5/bits/stl_bvector.h:621

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :      10
            Global    :       7
            Local     :       3
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FlowModelMPIHelperMaxMin::getMinQuantity(FlowModelMPIHelperMaxMin *, const std::string *, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FlowModelMPIHelperMaxMin::getMinQuantity(FlowModelMPIHelperMaxMin *, const std::string *, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &)) [58] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1370,1)
  -> INLINE: (1374,45) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1374,47) SAMRAI::hier::PatchHierarchy::getNumberOfLevels(const SAMRAI::hier::PatchHierarchy *) const
  -> INLINE: (1383,13) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (1385,26) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
  -> INLINE: (1385,26) std::shared_ptr<ExtendedFlattenedHierarchy>::shared_ptr<ExtendedFlattenedHierarchy>(std::shared_ptr<ExtendedFlattenedHierarchy> *, ExtendedFlattenedHierarchy *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1387,15) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (1396,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (1396,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (1396,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (1398,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (1398,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (1399,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (1399,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (1399,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1399,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (1399,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (1399,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (1400,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (1402,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1402,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (1402,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (1408,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1408,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (1410,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (1417,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (1419,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (1419,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1419,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (1419,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (1419,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (1422,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1422,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (1422,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (1422,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (1422,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (1435,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (1437,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1437,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (1440,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (1440,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (1444,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1444,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (1446,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (1448,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (1449,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (1449,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (1449,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (1449,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (1450,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (1452,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (1454,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (1456,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1458,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (1459,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (1461,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (1471,39) std::min<Real>(const Real &, const Real &)
  -> INLINE: (1480,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1480,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1480,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1481,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1494,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (1503,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (1503,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (1503,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (1505,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (1505,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (1506,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (1506,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (1506,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1506,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (1506,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (1506,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (1507,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (1509,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1509,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (1509,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (1515,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1515,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (1517,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (1524,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (1526,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (1526,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1526,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (1526,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (1526,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (1529,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1529,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (1529,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (1529,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (1529,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (1542,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (1544,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1544,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (1547,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (1547,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (1551,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1551,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (1552,78) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1552,80) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (1552,94) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (1554,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1555,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1556,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (1558,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (1559,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (1559,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (1559,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (1559,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (1560,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (1562,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (1564,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (1566,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1567,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1569,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (1570,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (1572,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (1573,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (1586,43) std::min<Real>(const Real &, const Real &)
  -> INLINE: (1596,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1596,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1596,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1597,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1610,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (1619,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (1619,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (1619,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (1621,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (1621,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (1622,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (1622,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (1622,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1622,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (1622,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (1622,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (1623,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (1625,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1625,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (1625,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (1631,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1631,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (1633,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (1640,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (1642,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (1642,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1642,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (1642,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (1642,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (1645,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1645,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (1645,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (1645,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (1645,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (1658,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (1660,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1660,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (1663,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (1663,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (1667,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1667,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (1668,78) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1668,80) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (1668,94) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (1670,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1671,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1672,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1673,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1674,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (1676,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (1677,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (1677,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (1677,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (1677,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (1678,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (1680,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (1682,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (1684,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1685,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1686,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1688,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (1689,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (1691,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (1692,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (1693,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (1710,47) std::min<Real>(const Real &, const Real &)
  -> INLINE: (1721,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1721,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1721,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1722,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1736,5) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1399,21)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1449,25)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1463,21)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed ANTI dependence between u[relative_idx_lo_0+i+num_ghosts_0_quantity] (1471:25) and u_min_local (1471:25)
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1463,21)
      <Remainder>
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(759,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1480,13)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1506,21)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1559,25)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1575,21)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed ANTI dependence between u[relative_idx_lo_0+i+num_ghosts_0_quantity+(relative_idx_lo_1+j (1586:29) and u_min_local (1586:29)

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1577,25)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed ANTI dependence between u[relative_idx_lo_0+i+num_ghosts_0_quantity+(relative_idx_lo_1+j (1586:29) and u_min_local (1586:29)
            remark #25439: unrolled with remainder by 2  
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1577,25)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(759,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1596,13)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1622,21)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1677,25)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1695,21)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed ANTI dependence between u[relative_idx_lo_0+i+num_ghosts_0_quantity+(relative_idx_lo_1+j (1710:33) and u_min_local (1710:33)

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1697,25)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed ANTI dependence between u[relative_idx_lo_0+i+num_ghosts_0_quantity+(relative_idx_lo_1+j (1710:33) and u_min_local (1710:33)

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1699,29)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed ANTI dependence between u[relative_idx_lo_0+i+num_ghosts_0_quantity+(relative_idx_lo_1+j (1710:33) and u_min_local (1710:33)
               remark #25439: unrolled with remainder by 2  
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1699,29)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(759,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1721,13)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1389,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1398,61) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1496,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1505,61) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1612,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1621,61) ]
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/hashtable.h(780,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable.h(780,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable.h(780,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable.h(1642,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable.h(1642,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable.h(1642,7):remark #34026: call to memset implemented as a call to optimized library version
/home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1370,1):remark #34051: REGISTER ALLOCATION : [_ZN24FlowModelMPIHelperMaxMin14getMinQuantityESsiRKSt10shared_ptrIN6SAMRAI4hier15VariableContextEE] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp:1370

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :    1072
            Global    :     270
            Local     :     802
        Regenerable   :     346
        Spilled       :      34
        
    Routine stack
        Variables     :    1288 bytes*
            Reads     :      93 [1.00e+03 ~ 2.9%]
            Writes    :      86 [2.84e+03 ~ 8.2%]
        Spills        :     224 bytes*
            Reads     :      62 [6.20e+02 ~ 1.8%]
            Writes    :      34 [2.23e+02 ~ 0.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FlowModelMPIHelperMaxMin::getMinReciprocalOfQuantity(FlowModelMPIHelperMaxMin *, const std::string *, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FlowModelMPIHelperMaxMin::getMinReciprocalOfQuantity(FlowModelMPIHelperMaxMin *, const std::string *, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &)) [59] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1748,1)
  -> INLINE: (1752,45) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1752,47) SAMRAI::hier::PatchHierarchy::getNumberOfLevels(const SAMRAI::hier::PatchHierarchy *) const
  -> INLINE: (1761,13) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (1763,26) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
  -> INLINE: (1763,26) std::shared_ptr<ExtendedFlattenedHierarchy>::shared_ptr<ExtendedFlattenedHierarchy>(std::shared_ptr<ExtendedFlattenedHierarchy> *, ExtendedFlattenedHierarchy *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1765,15) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (1774,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (1774,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (1774,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (1776,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (1776,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (1777,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (1777,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (1777,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1777,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (1777,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (1777,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (1778,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (1780,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1780,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (1780,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (1786,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1786,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (1788,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (1795,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (1797,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (1797,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1797,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (1797,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (1797,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (1800,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1800,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (1800,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (1800,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (1800,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (1813,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (1815,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1815,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (1818,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (1818,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (1822,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1822,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (1824,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (1826,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (1827,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (1827,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (1827,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (1827,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (1828,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (1830,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (1832,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (1834,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1836,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (1837,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (1839,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (1849,43) std::min<Real>(const Real &, const Real &)
  -> INLINE: (1858,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1858,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1858,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1859,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1872,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (1881,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (1881,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (1881,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (1883,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (1883,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (1884,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (1884,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (1884,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1884,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (1884,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (1884,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (1885,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (1887,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1887,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (1887,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (1893,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1893,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (1895,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (1902,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (1904,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (1904,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1904,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (1904,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (1904,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (1907,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1907,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (1907,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (1907,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (1907,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (1920,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (1922,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1922,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (1925,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (1925,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (1929,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1929,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (1930,78) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1930,80) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (1930,94) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (1932,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1933,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1934,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (1936,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (1937,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (1937,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (1937,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (1937,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (1938,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (1940,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (1942,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (1944,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1945,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1947,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (1948,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (1950,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (1951,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (1964,47) std::min<Real>(const Real &, const Real &)
  -> INLINE: (1974,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1974,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1974,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1975,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1988,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (1997,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (1997,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (1997,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (1999,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (1999,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (2000,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (2000,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (2000,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (2000,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (2000,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (2000,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (2001,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (2003,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2003,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (2003,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (2009,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (2009,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (2011,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (2018,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (2020,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (2020,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2020,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (2020,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (2020,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (2023,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2023,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (2023,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (2023,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (2023,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (2036,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (2038,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (2038,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (2041,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (2041,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (2045,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (2045,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (2046,78) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (2046,80) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (2046,94) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (2048,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (2049,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (2050,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (2051,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (2052,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (2054,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (2055,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (2055,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (2055,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (2055,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (2056,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (2058,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (2060,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (2062,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (2063,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (2064,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (2066,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (2067,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (2069,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (2070,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (2071,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (2088,51) std::min<Real>(const Real &, const Real &)
  -> INLINE: (2099,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2099,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2099,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2100,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2114,5) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1777,21)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1827,25)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1841,21)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed ANTI dependence between u[relative_idx_lo_0+i+num_ghosts_0_quantity] (1849:25) and u_inv_min_local (1849:25)
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1841,21)
      <Remainder>
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(759,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1858,13)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1884,21)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1937,25)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1953,21)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed ANTI dependence between u[relative_idx_lo_0+i+num_ghosts_0_quantity+(relative_idx_lo_1+j (1964:29) and u_inv_min_local (1964:29)

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1955,25)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed ANTI dependence between u[relative_idx_lo_0+i+num_ghosts_0_quantity+(relative_idx_lo_1+j (1964:29) and u_inv_min_local (1964:29)
            remark #25439: unrolled with remainder by 2  
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1955,25)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(759,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1974,13)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2000,21)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2055,25)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2073,21)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed ANTI dependence between u[relative_idx_lo_0+i+num_ghosts_0_quantity+(relative_idx_lo_1+j (2088:33) and u_inv_min_local (2088:33)

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2075,25)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed ANTI dependence between u[relative_idx_lo_0+i+num_ghosts_0_quantity+(relative_idx_lo_1+j (2088:33) and u_inv_min_local (2088:33)

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2077,29)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed ANTI dependence between u[relative_idx_lo_0+i+num_ghosts_0_quantity+(relative_idx_lo_1+j (2088:33) and u_inv_min_local (2088:33)
               remark #25439: unrolled with remainder by 2  
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2077,29)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(759,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2099,13)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1767,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1776,61) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1874,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1883,61) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1990,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1999,61) ]
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/hashtable.h(780,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable.h(780,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable.h(780,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable.h(1642,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable.h(1642,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable.h(1642,7):remark #34026: call to memset implemented as a call to optimized library version
/home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(1748,1):remark #34051: REGISTER ALLOCATION : [_ZN24FlowModelMPIHelperMaxMin26getMinReciprocalOfQuantityESsiRKSt10shared_ptrIN6SAMRAI4hier15VariableContextEE] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp:1748

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm2]
        
    Routine temporaries
        Total         :    1075
            Global    :     273
            Local     :     802
        Regenerable   :     349
        Spilled       :      34
        
    Routine stack
        Variables     :    1288 bytes*
            Reads     :      93 [1.00e+03 ~ 2.9%]
            Writes    :      86 [2.84e+03 ~ 8.2%]
        Spills        :     224 bytes*
            Reads     :      62 [6.20e+02 ~ 1.8%]
            Writes    :      34 [2.23e+02 ~ 0.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FlowModelMPIHelperMaxMin::getMinQuantity(FlowModelMPIHelperMaxMin *, const std::vector<std::string, std::allocator<std::string>> &, const std::vector<int, std::allocator<int>> &, const std::shared_ptr<SAMRAI::hier::VariableContext> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FlowModelMPIHelperMaxMin::getMinQuantity(FlowModelMPIHelperMaxMin *, const std::vector<std::string, std::allocator<std::string>> &, const std::vector<int, std::allocator<int>> &, const std::shared_ptr<SAMRAI::hier::VariableContext> &)) [60] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2126,1)
  -> INLINE: (2127,58) std::vector<std::string, std::allocator<std::string>>::size(const std::vector<std::string, std::allocator<std::string>> *) const
  -> DELETED: (2131,23) std::allocator<bool>::~allocator(std::allocator<bool> *)
  -> (2131,54) std::vector<bool, std::allocator<bool>>::~vector(std::vector<bool, std::allocator<bool>> *)
  -> DELETED: (2131,54) std::allocator<bool>::~allocator(std::allocator<bool> *)
  -> (2131,54) std::vector<bool, std::allocator<bool>>::vector(std::vector<bool, std::allocator<bool>> *, std::vector<bool, std::allocator<bool>>::size_type, const bool &, const std::vector<bool, std::allocator<bool>>::allocator_type &)
  -> INLINE: (2131,54) std::allocator<bool>::allocator(std::allocator<bool> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2133,5) std::vector<bool, std::allocator<bool>>::~vector(std::vector<bool, std::allocator<bool>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (2133,12) FlowModelMPIHelperMaxMin::getMinQuantity(FlowModelMPIHelperMaxMin *, const std::vector<std::string, std::allocator<std::string>> &, const std::vector<int, std::allocator<int>> &, const std::vector<bool, std::allocator<bool>> &, const std::shared_ptr<SAMRAI::hier::VariableContext> &)


    Report from: Code generation optimizations [cg]

/home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2126,1):remark #34051: REGISTER ALLOCATION : [_ZN24FlowModelMPIHelperMaxMin14getMinQuantityERKSt6vectorISsSaISsEERKS0_IiSaIiEERKSt10shared_ptrIN6SAMRAI4hier15VariableContextEE] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp:2126

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rsi rdi r8 r12-r15 zmm0]
        
    Routine temporaries
        Total         :      49
            Global    :      14
            Local     :      35
        Regenerable   :       9
        Spilled       :       5
        
    Routine stack
        Variables     :      50 bytes*
            Reads     :       3 [1.00e+00 ~ 2.1%]
            Writes    :       3 [1.00e+00 ~ 2.1%]
        Spills        :       8 bytes*
            Reads     :       1 [2.78e-01 ~ 0.6%]
            Writes    :       1 [2.78e-01 ~ 0.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FlowModelMPIHelperMaxMin::getMinQuantity(FlowModelMPIHelperMaxMin *, const std::vector<std::string, std::allocator<std::string>> &, const std::vector<int, std::allocator<int>> &, const std::vector<bool, std::allocator<bool>> &, const std::shared_ptr<SAMRAI::hier::VariableContext> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FlowModelMPIHelperMaxMin::getMinQuantity(FlowModelMPIHelperMaxMin *, const std::vector<std::string, std::allocator<std::string>> &, const std::vector<int, std::allocator<int>> &, const std::vector<bool, std::allocator<bool>> &, const std::shared_ptr<SAMRAI::hier::VariableContext> &)) [61] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2150,1)
  -> INLINE: (2151,58) std::vector<std::string, std::allocator<std::string>>::size(const std::vector<std::string, std::allocator<std::string>> *) const
  -> INLINE: (2159,45) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (2159,47) SAMRAI::hier::PatchHierarchy::getNumberOfLevels(const SAMRAI::hier::PatchHierarchy *) const
  -> INLINE: (2168,13) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (2170,26) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
  -> INLINE: (2170,26) std::shared_ptr<ExtendedFlattenedHierarchy>::shared_ptr<ExtendedFlattenedHierarchy>(std::shared_ptr<ExtendedFlattenedHierarchy> *, ExtendedFlattenedHierarchy *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2172,15) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (2181,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (2181,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (2181,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (2183,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (2183,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (2184,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (2184,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (2184,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (2184,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (2184,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (2184,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (2185,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (2187,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2187,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (2187,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (2193,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (2193,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (2195,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (2202,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (2204,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (2204,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2204,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (2204,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (2204,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (2209,25) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2209,25) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2209,79) std::vector<std::string, std::allocator<std::string>>::operator[](const std::vector<std::string, std::allocator<std::string>> *, std::vector<std::string, std::allocator<std::string>>::size_type) const
  -> (2209,85) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (2209,85) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (2209,85) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (2222,72) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::~vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> (2222,72) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> (2223,33) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::resize(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (2226,36) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (2226,41) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::operator=(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *, std::shared_ptr<SAMRAI::pdat::CellData<Real>> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2226,41) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2226,69) std::vector<std::string, std::allocator<std::string>>::operator[](const std::vector<std::string, std::allocator<std::string>> *, std::vector<std::string, std::allocator<std::string>>::size_type) const
  -> (2229,36) std::vector<Real *, std::allocator<Real *>>::~vector(std::vector<Real *, std::allocator<Real *>> *)
  -> (2229,36) std::vector<Real *, std::allocator<Real *>>::vector(std::vector<Real *, std::allocator<Real *>> *)
  -> INLINE: (2230,22) std::vector<Real *, std::allocator<Real *>>::resize(std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2233,25) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (2233,47) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (2233,51) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (2233,53) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (2233,81) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (2237,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (2237,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (2242,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (2242,42) ExtendedFlattenedHierarchy::getOverlappedVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> (2246,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (2246,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (2247,35) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (2251,76) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (2251,80) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (2251,82) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (2252,39) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2252,64) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (2255,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (2256,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (2256,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (2256,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (2256,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (2257,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (2259,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (2261,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (2263,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (2265,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (2266,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (2268,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (2269,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> (2282,64) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (2283,34) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (2283,34) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (2283,68) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (2283,68) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (2284,33) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (2286,77) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (2288,62) SAMRAI::hier::Box::contains(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
  -> INLINE: (2302,89) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (2304,47) std::vector<bool, std::allocator<bool>>::operator[](const std::vector<bool, std::allocator<bool>> *, std::vector<bool, std::allocator<bool>>::size_type) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2306,46) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (2310,46) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (2314,37) std::min<Real>(const Real &, const Real &)
  -> INLINE: (2323,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2323,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (2323,13) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::~vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> INLINE: (2323,13) std::vector<Real *, std::allocator<Real *>>::~vector(std::vector<Real *, std::allocator<Real *>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2323,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2324,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2337,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (2346,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (2346,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (2346,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (2348,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (2348,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (2349,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (2349,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (2349,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (2349,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (2349,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (2349,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (2350,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (2352,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2352,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (2352,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (2358,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (2358,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (2360,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (2367,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (2369,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (2369,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2369,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (2369,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (2369,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (2374,25) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2374,25) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2374,79) std::vector<std::string, std::allocator<std::string>>::operator[](const std::vector<std::string, std::allocator<std::string>> *, std::vector<std::string, std::allocator<std::string>>::size_type) const
  -> (2374,85) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (2374,85) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (2374,85) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (2387,72) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::~vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> (2387,72) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> (2388,33) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::resize(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (2391,36) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (2391,41) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::operator=(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *, std::shared_ptr<SAMRAI::pdat::CellData<Real>> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2391,41) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2391,69) std::vector<std::string, std::allocator<std::string>>::operator[](const std::vector<std::string, std::allocator<std::string>> *, std::vector<std::string, std::allocator<std::string>>::size_type) const
  -> (2394,36) std::vector<Real *, std::allocator<Real *>>::~vector(std::vector<Real *, std::allocator<Real *>> *)
  -> (2394,36) std::vector<Real *, std::allocator<Real *>>::vector(std::vector<Real *, std::allocator<Real *>> *)
  -> INLINE: (2395,22) std::vector<Real *, std::allocator<Real *>>::resize(std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2398,25) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (2398,47) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (2398,51) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (2398,53) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (2398,81) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (2402,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (2402,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (2407,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (2407,42) ExtendedFlattenedHierarchy::getOverlappedVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> (2411,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (2411,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (2412,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (2412,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (2413,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (2413,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (2414,35) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (2415,35) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (2416,38) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (2420,76) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (2420,80) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (2420,82) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (2421,80) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (2421,84) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (2421,86) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (2421,100) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (2423,39) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2423,64) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (2424,39) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2424,64) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (2425,42) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2425,71) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (2428,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (2429,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (2429,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (2429,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (2429,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (2430,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (2432,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (2434,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (2436,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (2437,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (2439,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (2440,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (2442,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (2443,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (2444,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (2445,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> (2460,68) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (2461,38) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (2461,38) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (2461,72) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (2461,72) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (2462,37) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (2464,81) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (2466,66) SAMRAI::hier::Box::contains(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
  -> INLINE: (2480,94) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (2481,79) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (2481,105) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (2483,51) std::vector<bool, std::allocator<bool>>::operator[](const std::vector<bool, std::allocator<bool>> *, std::vector<bool, std::allocator<bool>>::size_type) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2485,50) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (2489,50) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (2493,41) std::min<Real>(const Real &, const Real &)
  -> INLINE: (2503,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2503,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (2503,13) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::~vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> INLINE: (2503,13) std::vector<Real *, std::allocator<Real *>>::~vector(std::vector<Real *, std::allocator<Real *>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2503,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2503,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2503,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2504,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2517,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (2526,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (2526,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (2526,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (2528,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (2528,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (2529,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (2529,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (2529,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (2529,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (2529,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (2529,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (2530,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (2532,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2532,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (2532,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (2538,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (2538,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (2540,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (2547,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (2549,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (2549,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2549,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (2549,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (2549,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (2554,25) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2554,25) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2554,79) std::vector<std::string, std::allocator<std::string>>::operator[](const std::vector<std::string, std::allocator<std::string>> *, std::vector<std::string, std::allocator<std::string>>::size_type) const
  -> (2554,85) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (2554,85) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (2554,85) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (2567,72) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::~vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> (2567,72) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> (2568,33) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::resize(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (2571,36) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (2571,41) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::operator=(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *, std::shared_ptr<SAMRAI::pdat::CellData<Real>> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2571,41) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2571,69) std::vector<std::string, std::allocator<std::string>>::operator[](const std::vector<std::string, std::allocator<std::string>> *, std::vector<std::string, std::allocator<std::string>>::size_type) const
  -> (2574,36) std::vector<Real *, std::allocator<Real *>>::~vector(std::vector<Real *, std::allocator<Real *>> *)
  -> (2574,36) std::vector<Real *, std::allocator<Real *>>::vector(std::vector<Real *, std::allocator<Real *>> *)
  -> INLINE: (2575,22) std::vector<Real *, std::allocator<Real *>>::resize(std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2578,25) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (2578,47) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (2578,51) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (2578,53) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (2578,81) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (2582,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (2582,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (2587,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (2587,42) ExtendedFlattenedHierarchy::getOverlappedVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> (2591,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (2591,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (2592,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (2592,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (2593,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (2593,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (2594,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (2594,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (2595,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (2595,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (2596,35) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (2597,35) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (2598,35) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (2599,38) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (2600,38) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (2604,76) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (2604,80) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (2604,82) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (2605,80) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (2605,84) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (2605,86) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (2605,100) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (2607,39) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2607,64) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (2608,39) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2608,64) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (2609,39) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2609,64) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (2610,42) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2610,71) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (2611,42) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2611,71) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (2614,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (2615,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (2615,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (2615,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (2615,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (2616,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (2618,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (2620,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (2622,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (2623,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (2624,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (2626,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (2627,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (2629,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (2630,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (2631,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (2632,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (2633,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (2634,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> (2651,72) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (2652,42) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (2652,42) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (2652,76) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (2652,76) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (2653,41) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (2655,85) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (2657,70) SAMRAI::hier::Box::contains(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
  -> INLINE: (2671,98) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (2672,83) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (2672,109) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (2673,83) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (2673,109) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (2674,65) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (2676,55) std::vector<bool, std::allocator<bool>>::operator[](const std::vector<bool, std::allocator<bool>> *, std::vector<bool, std::allocator<bool>>::size_type) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2678,54) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (2682,54) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (2686,45) std::min<Real>(const Real &, const Real &)
  -> INLINE: (2697,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2697,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (2697,13) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::~vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> INLINE: (2697,13) std::vector<Real *, std::allocator<Real *>>::~vector(std::vector<Real *, std::allocator<Real *>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2697,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2697,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2697,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2697,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2697,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2698,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2712,5) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2206,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/4.8.5/bits/stl_pair.h(113,15) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2224,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2226,43) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2231,17)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between u_qi.u_qi.u_qi.u_qi[qi] (2233:25) and u_qi.u_qi.u_qi.u_qi (2233:25)
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2249,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2251,82) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2256,25)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2271,21)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2277,66) ]

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2283,34)
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      LOOP END

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2300,25)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed ANTI dependence between value (2306:33) and value (2306:33)
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2300,25)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2371,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/4.8.5/bits/stl_pair.h(113,15) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2389,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2391,43) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2396,17)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between u_qi.u_qi.u_qi.u_qi[qi] (2398:25) and u_qi.u_qi.u_qi.u_qi (2398:25)
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2418,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2420,82) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2429,25)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2447,21)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2455,79) ]

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2449,25)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2455,79) ]

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2461,38)
            remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2478,29)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed ANTI dependence between value (2485:37) and value (2485:37)
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2551,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/4.8.5/bits/stl_pair.h(113,15) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2569,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2571,43) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2576,17)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between u_qi.u_qi.u_qi.u_qi[qi] (2578:25) and u_qi.u_qi.u_qi.u_qi (2578:25)
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2602,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2604,82) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2615,25)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2636,21)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2646,97) ]

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2638,25)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2646,97) ]

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2640,29)
            remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2646,97) ]

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2652,42)
               remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2669,33)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed ANTI dependence between value (2678:41) and value (2678:41)
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2174,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2183,61) ]

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2184,21)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2202,17) ]
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2339,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2348,61) ]

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2349,21)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2367,17) ]
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2519,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2528,61) ]

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2529,21)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2547,17) ]
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2150,1):remark #34051: REGISTER ALLOCATION : [_ZN24FlowModelMPIHelperMaxMin14getMinQuantityERKSt6vectorISsSaISsEERKS0_IiSaIiEERKS0_IbSaIbEERKSt10shared_ptrIN6SAMRAI4hier15VariableContextEE] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp:2150

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :    1335
            Global    :     332
            Local     :    1003
        Regenerable   :     493
        Spilled       :      56
        
    Routine stack
        Variables     :    1955 bytes*
            Reads     :     157 [1.37e+04 ~ 2.3%]
            Writes    :      77 [3.09e+03 ~ 0.5%]
        Spills        :     400 bytes*
            Reads     :     159 [2.10e+04 ~ 3.5%]
            Writes    :      57 [5.59e+03 ~ 0.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FlowModelMPIHelperMaxMin::getMaxQuantityWithInhomogeneousXDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::string *, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FlowModelMPIHelperMaxMin::getMaxQuantityWithInhomogeneousXDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::string *, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &)) [62] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2724,1)
  -> (2725,23) std::vector<double, std::allocator<double>>::~vector(std::vector<double, std::allocator<double>> *)
  -> (2725,23) std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *)
  -> INLINE: (2727,45) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (2727,47) SAMRAI::hier::PatchHierarchy::getNumberOfLevels(const SAMRAI::hier::PatchHierarchy *) const
  -> INLINE: (2736,13) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (2738,26) std::shared_ptr<ExtendedFlattenedHierarchy>::shared_ptr<ExtendedFlattenedHierarchy>(std::shared_ptr<ExtendedFlattenedHierarchy> *, ExtendedFlattenedHierarchy *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (2738,26) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
  -> INLINE: (2740,15) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (2742,59) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (2746,22) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2747,43) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2762,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (2762,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (2762,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (2769,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (2769,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (2773,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (2773,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (2773,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (2776,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
  -> INLINE: (2778,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (2780,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (2780,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (2781,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (2781,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (2781,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (2781,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (2781,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (2781,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (2782,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (2784,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2784,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (2784,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (2790,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (2790,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (2792,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (2799,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (2801,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (2801,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2801,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (2801,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (2801,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (2804,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2804,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (2804,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (2804,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (2804,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (2817,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (2819,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (2819,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (2822,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (2822,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (2826,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (2826,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (2828,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (2830,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (2831,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (2831,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (2831,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (2831,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (2832,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (2834,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (2836,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (2838,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (2840,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (2841,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (2843,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (2844,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (2858,53) std::max<Real>(const Real &, const Real &)
  -> INLINE: (2868,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2868,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2868,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2869,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2884,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (2886,59) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (2890,22) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2891,43) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2906,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (2906,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (2906,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (2913,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (2913,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (2917,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (2917,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (2917,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (2920,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
  -> INLINE: (2922,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (2924,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (2924,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (2925,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (2925,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (2925,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (2925,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (2925,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (2925,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (2926,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (2928,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2928,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (2928,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (2934,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (2934,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (2936,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (2943,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (2945,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (2945,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2945,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (2945,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (2945,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (2948,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2948,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (2948,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (2948,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (2948,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (2961,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (2963,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (2963,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (2966,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (2966,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (2970,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (2970,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (2971,78) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (2971,80) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (2971,94) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (2973,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (2974,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (2975,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (2977,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (2978,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (2978,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (2978,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (2978,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (2979,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (2981,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (2983,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (2985,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (2986,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (2988,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (2989,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (2991,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (2993,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (2994,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (3011,57) std::max<Real>(const Real &, const Real &)
  -> INLINE: (3022,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3022,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3022,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3023,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3038,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (3040,59) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (3044,22) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3045,43) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3060,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (3060,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (3060,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (3067,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (3067,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (3071,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (3071,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (3071,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (3074,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
  -> INLINE: (3076,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (3078,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (3078,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (3079,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (3079,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (3079,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (3079,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (3079,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (3079,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (3080,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (3082,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3082,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (3082,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (3088,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (3088,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (3090,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (3097,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (3099,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (3099,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3099,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (3099,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (3099,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (3102,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3102,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (3102,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (3102,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (3102,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (3115,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (3117,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (3117,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (3120,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (3120,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (3124,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (3124,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (3125,78) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (3125,80) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (3125,94) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (3127,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (3128,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (3129,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (3130,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (3131,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (3133,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (3134,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (3134,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (3134,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (3134,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (3135,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (3137,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (3139,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (3141,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (3142,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (3143,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (3145,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (3146,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (3148,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (3151,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (3152,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (3153,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (3174,61) std::max<Real>(const Real &, const Real &)
  -> INLINE: (3186,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3186,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3186,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3187,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3203,5) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2749,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2749,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2749,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2749,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2749,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2749,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2771,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2781,21)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2831,25)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2846,21)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2854,25)
         <Peeled loop for vectorization, Multiversioned v1>
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2854,25)
         <Multiversioned v1>
            remark #25228: Loop multiversioned for Data Dependence
            remark #15300: LOOP WAS VECTORIZED
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2854,25)
         <Remainder loop for vectorization, Multiversioned v1>
            remark #15301: REMAINDER LOOP WAS VECTORIZED
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2854,25)
         <Remainder loop for vectorization, Multiversioned v1>
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2854,25)
         <Multiversioned v2>
            remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
            remark #25439: unrolled with remainder by 2  
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2854,25)
         <Remainder, Multiversioned v2>
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(759,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2868,13)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2893,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2893,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2893,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2893,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2893,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2893,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2915,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2925,21)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2978,25)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2996,21)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2998,25)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3007,29)
            <Peeled loop for vectorization, Multiversioned v1>
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3007,29)
            <Multiversioned v1>
               remark #25228: Loop multiversioned for Data Dependence
               remark #15300: LOOP WAS VECTORIZED
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3007,29)
            <Remainder loop for vectorization, Multiversioned v1>
               remark #15301: REMAINDER LOOP WAS VECTORIZED
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3007,29)
            <Remainder loop for vectorization, Multiversioned v1>
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3007,29)
            <Multiversioned v2>
               remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
               remark #25439: unrolled with remainder by 2  
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3007,29)
            <Remainder, Multiversioned v2>
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(759,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3022,13)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3047,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3047,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3047,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3047,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3047,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3047,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3069,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3079,21)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3134,25)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3155,21)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3157,25)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3159,29)
               remark #15542: loop was not vectorized: inner loop was already vectorized

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3170,33)
               <Peeled loop for vectorization, Multiversioned v1>
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3170,33)
               <Multiversioned v1>
                  remark #25228: Loop multiversioned for Data Dependence
                  remark #15300: LOOP WAS VECTORIZED
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3170,33)
               <Remainder loop for vectorization, Multiversioned v1>
                  remark #15301: REMAINDER LOOP WAS VECTORIZED
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3170,33)
               <Remainder loop for vectorization, Multiversioned v1>
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3170,33)
               <Multiversioned v2>
                  remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
                  remark #25439: unrolled with remainder by 2  
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3170,33)
               <Remainder, Multiversioned v2>
               LOOP END
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2755,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2769,36) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2899,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2913,36) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3053,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3067,36) ]
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable.h(1642,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable.h(1642,7):remark #34026: call to memset implemented as a call to optimized library version
/home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(2724,1):remark #34051: REGISTER ALLOCATION : [_ZN24FlowModelMPIHelperMaxMin41getMaxQuantityWithInhomogeneousXDirectionESsiRKSt10shared_ptrIN6SAMRAI4hier15VariableContextEE] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp:2724

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :    1467
            Global    :     399
            Local     :    1068
        Regenerable   :     398
        Spilled       :      72
        
    Routine stack
        Variables     :    1577 bytes*
            Reads     :      88 [8.53e+02 ~ 0.1%]
            Writes    :      59 [1.02e+02 ~ 0.0%]
        Spills        :     536 bytes*
            Reads     :     301 [7.82e+03 ~ 1.1%]
            Writes    :      80 [6.13e+03 ~ 0.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const) [63] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(611,4)
  -> INLINE: (614,11) SAMRAI::hier::IntVector::operator/=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
    -> INLINE: (589,43) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: (590,48) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: (590,48) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: (591,24) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
    -> INLINE: (591,52) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
    -> INLINE: (595,47) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: (597,21) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
    -> INLINE: (597,40) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(588,10) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(615,11)
   remark #15523: loop was not vectorized: loop control variable b was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(590,48) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(615,11)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      remark #25478: While Loop Unrolled by 2  
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(596,10) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(615,11)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(596,10) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(615,11)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(596,10) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(615,11)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(596,10) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(615,11)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
LOOP END

    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(611,4):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4hier9IntVectordvERKS1_] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:611

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r11 r13-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :      87
            Global    :      32
            Local     :      55
        Regenerable   :       1
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      16 bytes*
            Reads     :       4 [1.25e+00 ~ 0.7%]
            Writes    :       4 [1.25e+00 ~ 0.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)) [64] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(515,4)
  -> INLINE: (520,43) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (521,48) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (521,48) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (522,24) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (522,52) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (526,47) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (528,21) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (528,40) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(519,10)
   remark #15523: loop was not vectorized: loop control variable b was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(521,48)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between this (522:24) and *(this+(offset+i)*4) (522:24)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(521,48)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(527,10)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between this (528:21) and *(this+i*4) (528:21)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(527,10)
<Remainder>
LOOP END

    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(515,4):remark #34051: REGISTER ALLOCATION : [_ZN6SAMRAI4hier9IntVectormLERKS1_] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:515

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rbp rsi rdi r8-r11 r14-r15]
        
    Routine temporaries
        Total         :      68
            Global    :      22
            Local     :      46
        Regenerable   :       1
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      32 bytes*
            Reads     :       4 [1.40e+00 ~ 0.7%]
            Writes    :       4 [1.40e+00 ~ 0.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(249,17):remark #34051: REGISTER ALLOCATION : [_ZNSt6vectorIdSaIdEEC1Ev] /usr/include/c++/4.8.5/bits/stl_vector.h:249

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rax rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::vector<double, std::allocator<double>>::~vector(std::vector<double, std::allocator<double>> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(415,7):remark #34051: REGISTER ALLOCATION : [_ZNSt6vectorIdSaIdEED1Ev] /usr/include/c++/4.8.5/bits/stl_vector.h:415

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :      10
            Global    :       7
            Local     :       3
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FlowModelMPIHelperMaxMin::getMaxReciprocalOfQuantityWithInhomogeneousXDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::string *, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FlowModelMPIHelperMaxMin::getMaxReciprocalOfQuantityWithInhomogeneousXDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::string *, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &)) [69] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3215,1)
  -> (3216,23) std::vector<double, std::allocator<double>>::~vector(std::vector<double, std::allocator<double>> *)
  -> (3216,23) std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *)
  -> INLINE: (3218,45) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (3218,47) SAMRAI::hier::PatchHierarchy::getNumberOfLevels(const SAMRAI::hier::PatchHierarchy *) const
  -> INLINE: (3227,13) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (3229,26) std::shared_ptr<ExtendedFlattenedHierarchy>::shared_ptr<ExtendedFlattenedHierarchy>(std::shared_ptr<ExtendedFlattenedHierarchy> *, ExtendedFlattenedHierarchy *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (3229,26) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
  -> INLINE: (3231,15) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (3233,59) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (3237,33) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3238,58) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3253,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (3253,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (3253,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (3260,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (3260,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (3264,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (3264,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (3264,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (3267,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
  -> INLINE: (3269,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (3271,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (3271,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (3272,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (3272,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (3272,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (3272,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (3272,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (3272,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (3273,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (3275,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3275,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (3275,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (3281,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (3281,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (3283,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (3290,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (3292,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (3292,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3292,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (3292,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (3292,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (3295,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3295,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (3295,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (3295,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (3295,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (3308,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (3310,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (3310,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (3313,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (3313,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (3317,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (3317,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (3319,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (3321,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (3322,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (3322,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (3322,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (3322,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (3323,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (3325,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (3327,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (3329,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (3331,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (3332,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (3334,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (3335,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (3349,57) std::max<Real>(const Real &, const Real &)
  -> INLINE: (3359,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3359,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3359,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3360,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3375,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (3377,59) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (3381,33) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3382,58) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3397,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (3397,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (3397,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (3404,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (3404,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (3408,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (3408,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (3408,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (3411,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
  -> INLINE: (3413,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (3415,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (3415,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (3416,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (3416,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (3416,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (3416,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (3416,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (3416,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (3417,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (3419,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3419,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (3419,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (3425,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (3425,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (3427,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (3434,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (3436,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (3436,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3436,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (3436,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (3436,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (3439,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3439,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (3439,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (3439,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (3439,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (3452,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (3454,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (3454,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (3457,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (3457,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (3461,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (3461,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (3462,78) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (3462,80) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (3462,94) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (3464,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (3465,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (3466,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (3468,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (3469,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (3469,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (3469,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (3469,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (3470,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (3472,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (3474,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (3476,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (3477,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (3479,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (3480,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (3482,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (3484,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (3485,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (3502,61) std::max<Real>(const Real &, const Real &)
  -> INLINE: (3513,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3513,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3513,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3514,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3529,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (3531,59) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (3535,33) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3536,58) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3551,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (3551,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (3551,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (3558,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (3558,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (3562,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (3562,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (3562,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (3565,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
  -> INLINE: (3567,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (3569,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (3569,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (3570,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (3570,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (3570,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (3570,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (3570,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (3570,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (3571,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (3573,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3573,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (3573,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (3579,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (3579,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (3581,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (3588,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (3590,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (3590,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3590,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (3590,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (3590,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (3593,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3593,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (3593,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (3593,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (3593,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (3606,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (3608,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (3608,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (3611,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (3611,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (3615,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (3615,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (3616,78) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (3616,80) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (3616,94) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (3618,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (3619,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (3620,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (3621,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (3622,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (3624,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (3625,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (3625,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (3625,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (3625,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (3626,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (3628,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (3630,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (3632,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (3633,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (3634,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (3636,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (3637,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (3639,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (3642,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (3643,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (3644,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (3665,65) std::max<Real>(const Real &, const Real &)
  -> INLINE: (3677,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3677,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3677,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3678,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3694,5) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3240,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3240,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3240,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3240,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3240,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3240,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3262,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3272,21)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3322,25)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3337,21)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3345,25)
         <Peeled loop for vectorization, Multiversioned v1>
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3345,25)
         <Multiversioned v1>
            remark #25228: Loop multiversioned for Data Dependence
            remark #15300: LOOP WAS VECTORIZED
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3345,25)
         <Remainder loop for vectorization, Multiversioned v1>
            remark #15301: REMAINDER LOOP WAS VECTORIZED
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3345,25)
         <Remainder loop for vectorization, Multiversioned v1>
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3345,25)
         <Multiversioned v2>
            remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
            remark #25439: unrolled with remainder by 2  
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3345,25)
         <Remainder, Multiversioned v2>
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(759,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3359,13)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3384,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3384,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3384,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3384,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3384,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3384,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3406,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3416,21)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3469,25)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3487,21)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3489,25)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3498,29)
            <Peeled loop for vectorization, Multiversioned v1>
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3498,29)
            <Multiversioned v1>
               remark #25228: Loop multiversioned for Data Dependence
               remark #15300: LOOP WAS VECTORIZED
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3498,29)
            <Remainder loop for vectorization, Multiversioned v1>
               remark #15301: REMAINDER LOOP WAS VECTORIZED
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3498,29)
            <Remainder loop for vectorization, Multiversioned v1>
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3498,29)
            <Multiversioned v2>
               remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
               remark #25439: unrolled with remainder by 2  
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3498,29)
            <Remainder, Multiversioned v2>
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(759,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3513,13)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3538,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3538,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3538,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3538,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3538,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3538,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3560,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3570,21)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3625,25)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3646,21)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3648,25)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3650,29)
               remark #15542: loop was not vectorized: inner loop was already vectorized

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3661,33)
               <Peeled loop for vectorization, Multiversioned v1>
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3661,33)
               <Multiversioned v1>
                  remark #25228: Loop multiversioned for Data Dependence
                  remark #15300: LOOP WAS VECTORIZED
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3661,33)
               <Remainder loop for vectorization, Multiversioned v1>
                  remark #15301: REMAINDER LOOP WAS VECTORIZED
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3661,33)
               <Remainder loop for vectorization, Multiversioned v1>
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3661,33)
               <Multiversioned v2>
                  remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
                  remark #25439: unrolled with remainder by 2  
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3661,33)
               <Remainder, Multiversioned v2>
               LOOP END
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3246,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3260,36) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3390,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3404,36) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3544,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3558,36) ]
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable.h(1642,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable.h(1642,7):remark #34026: call to memset implemented as a call to optimized library version
/home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3215,1):remark #34051: REGISTER ALLOCATION : [_ZN24FlowModelMPIHelperMaxMin53getMaxReciprocalOfQuantityWithInhomogeneousXDirectionESsiRKSt10shared_ptrIN6SAMRAI4hier15VariableContextEE] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp:3215

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   27[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm12]
        
    Routine temporaries
        Total         :    1500
            Global    :     402
            Local     :    1098
        Regenerable   :     401
        Spilled       :      72
        
    Routine stack
        Variables     :    1577 bytes*
            Reads     :      88 [8.53e+02 ~ 0.1%]
            Writes    :      59 [1.02e+02 ~ 0.0%]
        Spills        :     536 bytes*
            Reads     :     301 [7.82e+03 ~ 1.0%]
            Writes    :      80 [6.13e+03 ~ 0.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FlowModelMPIHelperMaxMin::getMaxQuantityWithInhomogeneousXDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::vector<std::string, std::allocator<std::string>> &, const std::vector<int, std::allocator<int>> &, const std::shared_ptr<SAMRAI::hier::VariableContext> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FlowModelMPIHelperMaxMin::getMaxQuantityWithInhomogeneousXDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::vector<std::string, std::allocator<std::string>> &, const std::vector<int, std::allocator<int>> &, const std::shared_ptr<SAMRAI::hier::VariableContext> &)) [70] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3706,1)
  -> INLINE: (3707,58) std::vector<std::string, std::allocator<std::string>>::size(const std::vector<std::string, std::allocator<std::string>> *) const
  -> DELETED: (3711,23) std::allocator<bool>::~allocator(std::allocator<bool> *)
  -> (3711,54) std::vector<bool, std::allocator<bool>>::~vector(std::vector<bool, std::allocator<bool>> *)
  -> DELETED: (3711,54) std::allocator<bool>::~allocator(std::allocator<bool> *)
  -> (3711,54) std::vector<bool, std::allocator<bool>>::vector(std::vector<bool, std::allocator<bool>> *, std::vector<bool, std::allocator<bool>>::size_type, const bool &, const std::vector<bool, std::allocator<bool>>::allocator_type &)
  -> INLINE: (3711,54) std::allocator<bool>::allocator(std::allocator<bool> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3713,5) std::vector<bool, std::allocator<bool>>::~vector(std::vector<bool, std::allocator<bool>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (3713,12) FlowModelMPIHelperMaxMin::getMaxQuantityWithInhomogeneousXDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::vector<std::string, std::allocator<std::string>> &, const std::vector<int, std::allocator<int>> &, const std::vector<bool, std::allocator<bool>> &, const std::shared_ptr<SAMRAI::hier::VariableContext> &)


    Report from: Code generation optimizations [cg]

/home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3706,1):remark #34051: REGISTER ALLOCATION : [_ZN24FlowModelMPIHelperMaxMin41getMaxQuantityWithInhomogeneousXDirectionERKSt6vectorISsSaISsEERKS0_IiSaIiEERKSt10shared_ptrIN6SAMRAI4hier15VariableContextEE] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp:3706

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rsi rdi r8-r9 r12-r15]
        
    Routine temporaries
        Total         :      49
            Global    :      13
            Local     :      36
        Regenerable   :       9
        Spilled       :       5
        
    Routine stack
        Variables     :      50 bytes*
            Reads     :       3 [1.00e+00 ~ 2.0%]
            Writes    :       3 [1.00e+00 ~ 2.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FlowModelMPIHelperMaxMin::getMaxQuantityWithInhomogeneousXDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::vector<std::string, std::allocator<std::string>> &, const std::vector<int, std::allocator<int>> &, const std::vector<bool, std::allocator<bool>> &, const std::shared_ptr<SAMRAI::hier::VariableContext> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FlowModelMPIHelperMaxMin::getMaxQuantityWithInhomogeneousXDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::vector<std::string, std::allocator<std::string>> &, const std::vector<int, std::allocator<int>> &, const std::vector<bool, std::allocator<bool>> &, const std::shared_ptr<SAMRAI::hier::VariableContext> &)) [71] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3730,1)
  -> INLINE: (3731,58) std::vector<std::string, std::allocator<std::string>>::size(const std::vector<std::string, std::allocator<std::string>> *) const
  -> (3736,23) std::vector<double, std::allocator<double>>::~vector(std::vector<double, std::allocator<double>> *)
  -> (3736,23) std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *)
  -> INLINE: (3738,45) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (3738,47) SAMRAI::hier::PatchHierarchy::getNumberOfLevels(const SAMRAI::hier::PatchHierarchy *) const
  -> INLINE: (3747,13) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (3749,26) std::shared_ptr<ExtendedFlattenedHierarchy>::shared_ptr<ExtendedFlattenedHierarchy>(std::shared_ptr<ExtendedFlattenedHierarchy> *, ExtendedFlattenedHierarchy *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (3749,26) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
  -> INLINE: (3751,15) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (3753,59) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (3757,22) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (3758,41) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3773,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (3773,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (3773,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (3780,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (3780,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (3784,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (3784,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (3784,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (3787,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
  -> INLINE: (3789,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (3791,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (3791,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (3792,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (3792,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (3792,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (3792,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (3792,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (3792,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (3793,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (3795,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3795,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (3795,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (3801,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (3801,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (3803,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (3810,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (3812,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (3812,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3812,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (3812,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (3812,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (3817,25) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3817,25) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3817,79) std::vector<std::string, std::allocator<std::string>>::operator[](const std::vector<std::string, std::allocator<std::string>> *, std::vector<std::string, std::allocator<std::string>>::size_type) const
  -> (3817,85) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (3817,85) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (3817,85) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (3830,72) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::~vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> (3830,72) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> (3831,33) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::resize(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (3834,36) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (3834,41) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::operator=(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *, std::shared_ptr<SAMRAI::pdat::CellData<Real>> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3834,41) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3834,69) std::vector<std::string, std::allocator<std::string>>::operator[](const std::vector<std::string, std::allocator<std::string>> *, std::vector<std::string, std::allocator<std::string>>::size_type) const
  -> (3837,36) std::vector<Real *, std::allocator<Real *>>::~vector(std::vector<Real *, std::allocator<Real *>> *)
  -> (3837,36) std::vector<Real *, std::allocator<Real *>>::vector(std::vector<Real *, std::allocator<Real *>> *)
  -> (3838,22) std::vector<Real *, std::allocator<Real *>>::resize(std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (3841,25) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (3841,47) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (3841,51) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (3841,53) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (3841,81) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (3845,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (3845,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (3850,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (3850,42) ExtendedFlattenedHierarchy::getOverlappedVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> (3854,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (3854,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (3855,35) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (3859,76) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (3859,80) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (3859,82) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> (3860,39) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
  -> INLINE: (3860,64) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (3863,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (3864,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (3864,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (3864,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (3864,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (3865,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (3867,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (3869,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (3871,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (3873,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (3874,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (3876,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (3877,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> (3890,64) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (3891,34) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (3891,34) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (3891,68) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (3891,68) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (3892,33) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (3894,77) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (3896,62) SAMRAI::hier::Box::contains(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
  -> INLINE: (3914,93) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (3916,51) std::vector<bool, std::allocator<bool>>::operator[](const std::vector<bool, std::allocator<bool>> *, std::vector<bool, std::allocator<bool>>::size_type) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3918,50) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (3922,50) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (3926,51) std::max<Real>(const Real &, const Real &)
  -> INLINE: (3936,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3936,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (3936,13) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::~vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> (3936,13) std::vector<Real *, std::allocator<Real *>>::~vector(std::vector<Real *, std::allocator<Real *>> *)
  -> (3936,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> INLINE: (3937,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3952,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (3954,59) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (3958,22) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (3959,41) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3974,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (3974,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (3974,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (3981,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (3981,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (3985,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (3985,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (3985,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (3988,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
  -> INLINE: (3990,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (3992,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (3992,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (3993,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (3993,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (3993,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (3993,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (3993,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (3993,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (3994,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (3996,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3996,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (3996,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (4002,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (4002,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (4004,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (4011,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (4013,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (4013,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4013,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (4013,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (4013,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (4018,25) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4018,25) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4018,79) std::vector<std::string, std::allocator<std::string>>::operator[](const std::vector<std::string, std::allocator<std::string>> *, std::vector<std::string, std::allocator<std::string>>::size_type) const
  -> (4018,85) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (4018,85) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (4018,85) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (4031,72) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::~vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> (4031,72) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> (4032,33) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::resize(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (4035,36) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (4035,41) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::operator=(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *, std::shared_ptr<SAMRAI::pdat::CellData<Real>> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4035,41) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4035,69) std::vector<std::string, std::allocator<std::string>>::operator[](const std::vector<std::string, std::allocator<std::string>> *, std::vector<std::string, std::allocator<std::string>>::size_type) const
  -> (4038,36) std::vector<Real *, std::allocator<Real *>>::~vector(std::vector<Real *, std::allocator<Real *>> *)
  -> (4038,36) std::vector<Real *, std::allocator<Real *>>::vector(std::vector<Real *, std::allocator<Real *>> *)
  -> (4039,22) std::vector<Real *, std::allocator<Real *>>::resize(std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (4042,25) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (4042,47) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (4042,51) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (4042,53) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (4042,81) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (4046,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (4046,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (4051,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (4051,42) ExtendedFlattenedHierarchy::getOverlappedVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> (4055,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (4055,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (4056,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (4056,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (4057,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (4057,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (4058,35) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (4059,35) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (4060,38) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (4064,76) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (4064,80) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (4064,82) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (4065,80) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (4065,84) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (4065,86) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (4065,100) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> (4067,39) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
  -> INLINE: (4067,64) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (4068,39) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
  -> INLINE: (4068,64) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (4069,42) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
  -> INLINE: (4069,71) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (4072,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (4073,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (4073,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (4073,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (4073,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (4074,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (4076,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (4078,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (4080,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (4081,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (4083,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (4084,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (4086,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (4087,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (4088,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (4089,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> (4104,68) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (4105,38) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (4105,38) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (4105,72) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (4105,72) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (4106,37) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (4108,81) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (4110,66) SAMRAI::hier::Box::contains(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
  -> INLINE: (4128,98) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (4129,83) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (4129,109) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (4131,55) std::vector<bool, std::allocator<bool>>::operator[](const std::vector<bool, std::allocator<bool>> *, std::vector<bool, std::allocator<bool>>::size_type) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4133,54) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (4137,54) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (4141,55) std::max<Real>(const Real &, const Real &)
  -> INLINE: (4152,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4152,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (4152,13) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::~vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> (4152,13) std::vector<Real *, std::allocator<Real *>>::~vector(std::vector<Real *, std::allocator<Real *>> *)
  -> (4152,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (4152,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (4152,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> INLINE: (4153,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4168,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (4170,59) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (4174,22) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (4175,41) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4190,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (4190,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (4190,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (4197,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (4197,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (4201,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (4201,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (4201,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (4204,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
  -> INLINE: (4206,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (4208,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (4208,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (4209,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (4209,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (4209,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (4209,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (4209,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (4209,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (4210,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (4212,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4212,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (4212,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (4218,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (4218,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (4220,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (4227,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (4229,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (4229,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4229,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (4229,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (4229,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (4234,25) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4234,25) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4234,79) std::vector<std::string, std::allocator<std::string>>::operator[](const std::vector<std::string, std::allocator<std::string>> *, std::vector<std::string, std::allocator<std::string>>::size_type) const
  -> (4234,85) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (4234,85) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (4234,85) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (4247,72) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::~vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> (4247,72) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> (4248,33) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::resize(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (4251,36) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (4251,41) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::operator=(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *, std::shared_ptr<SAMRAI::pdat::CellData<Real>> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4251,41) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4251,69) std::vector<std::string, std::allocator<std::string>>::operator[](const std::vector<std::string, std::allocator<std::string>> *, std::vector<std::string, std::allocator<std::string>>::size_type) const
  -> (4254,36) std::vector<Real *, std::allocator<Real *>>::~vector(std::vector<Real *, std::allocator<Real *>> *)
  -> (4254,36) std::vector<Real *, std::allocator<Real *>>::vector(std::vector<Real *, std::allocator<Real *>> *)
  -> (4255,22) std::vector<Real *, std::allocator<Real *>>::resize(std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (4258,25) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (4258,47) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (4258,51) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (4258,53) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (4258,81) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (4262,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (4262,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (4267,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (4267,42) ExtendedFlattenedHierarchy::getOverlappedVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> (4271,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (4271,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (4272,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (4272,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (4273,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (4273,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (4274,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (4274,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (4275,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (4275,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (4276,35) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (4277,35) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (4278,35) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (4279,38) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (4280,38) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (4284,76) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (4284,80) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (4284,82) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (4285,80) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (4285,84) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (4285,86) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (4285,100) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> (4287,39) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
  -> INLINE: (4287,64) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (4288,39) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
  -> INLINE: (4288,64) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (4289,39) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
  -> INLINE: (4289,64) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (4290,42) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
  -> INLINE: (4290,71) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (4291,42) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
  -> INLINE: (4291,71) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (4294,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (4295,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (4295,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (4295,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (4295,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (4296,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (4298,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (4300,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (4302,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (4303,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (4304,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (4306,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (4307,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (4309,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (4310,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (4311,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (4312,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (4313,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (4314,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> (4331,72) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (4332,42) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (4332,42) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (4332,76) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (4332,76) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (4333,41) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (4335,85) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (4337,70) SAMRAI::hier::Box::contains(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
  -> INLINE: (4355,102) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (4356,87) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (4356,113) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (4357,87) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (4357,113) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (4358,69) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (4360,59) std::vector<bool, std::allocator<bool>>::operator[](const std::vector<bool, std::allocator<bool>> *, std::vector<bool, std::allocator<bool>>::size_type) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4362,58) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (4366,58) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (4370,59) std::max<Real>(const Real &, const Real &)
  -> INLINE: (4382,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4382,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (4382,13) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::~vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> (4382,13) std::vector<Real *, std::allocator<Real *>>::~vector(std::vector<Real *, std::allocator<Real *>> *)
  -> (4382,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (4382,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (4382,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (4382,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (4382,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> INLINE: (4383,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4399,5) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3760,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3760,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3760,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3760,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3760,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3760,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3782,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3814,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/4.8.5/bits/stl_pair.h(113,15) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3832,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3834,43) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3839,17)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between u_qi.u_qi.u_qi.u_qi (3841:25) and u_qi.u_qi.u_qi.u_qi[qi] (3841:25)
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3857,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3859,82) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3864,25)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3879,21)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3885,66) ]

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3891,34)
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      LOOP END

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3906,25)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed ANTI dependence between num_ghosts_0_u_qi.num_ghosts_0_u_qi.num_ghosts_0_u_qi.num_ghosts (3914:93) and max_local[idx_fine] (3926:29)

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3912,29)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed ANTI dependence between value (3918:37) and value (3918:37)
            remark #25439: unrolled with remainder by 2  
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3912,29)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3961,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3961,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3961,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3961,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3961,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3961,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3983,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4015,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/4.8.5/bits/stl_pair.h(113,15) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4033,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4035,43) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4040,17)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between u_qi.u_qi.u_qi.u_qi (4042:25) and u_qi.u_qi.u_qi.u_qi[qi] (4042:25)
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4062,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4064,82) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4073,25)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4091,21)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4099,79) ]

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4093,25)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4099,79) ]

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4105,38)
            remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4120,29)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed ANTI dependence between num_ghosts_0_u_qi.num_ghosts_0_u_qi.num_ghosts_0_u_qi.num_ghosts (4129:109) and max_local[idx_fine] (4141:33)

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4126,33)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed ANTI dependence between value (4133:41) and value (4133:41)
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4177,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4177,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4177,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4177,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4177,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4177,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4199,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4231,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/4.8.5/bits/stl_pair.h(113,15) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4249,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4251,43) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4256,17)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between u_qi.u_qi.u_qi.u_qi (4258:25) and u_qi.u_qi.u_qi.u_qi[qi] (4258:25)
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4282,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4284,82) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4295,25)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4316,21)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4326,97) ]

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4318,25)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4326,97) ]

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4320,29)
            remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4326,97) ]

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4332,42)
               remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4347,33)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed ANTI dependence between num_ghosts_0_u_qi.num_ghosts_0_u_qi.num_ghosts_0_u_qi.num_ghosts (4358:69) and max_local[idx_fine] (4370:37)

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4353,37)
                  remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
                  remark #15346: vector dependence: assumed ANTI dependence between value (4362:45) and value (4362:45)
               LOOP END
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3766,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3780,36) ]

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3792,21)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3810,17) ]
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3967,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3981,36) ]

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3993,21)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4011,17) ]
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4183,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4197,36) ]

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4209,21)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4227,17) ]
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(3730,1):remark #34051: REGISTER ALLOCATION : [_ZN24FlowModelMPIHelperMaxMin41getMaxQuantityWithInhomogeneousXDirectionERKSt6vectorISsSaISsEERKS0_IiSaIiEERKS0_IbSaIbEERKSt10shared_ptrIN6SAMRAI4hier15VariableContextEE] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp:3730

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :    1570
            Global    :     419
            Local     :    1151
        Regenerable   :     552
        Spilled       :      96
        
    Routine stack
        Variables     :    2227 bytes*
            Reads     :     106 [2.71e+04 ~ 0.6%]
            Writes    :      67 [4.78e+02 ~ 0.0%]
        Spills        :     728 bytes*
            Reads     :     326 [2.72e+05 ~ 6.3%]
            Writes    :     103 [7.77e+04 ~ 1.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::vector<Real *, std::allocator<Real *>>::resize(std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /usr/include/c++/4.8.5/bits/stl_vector.h(668,4)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /usr/include/c++/4.8.5/bits/stl_vector.h(668,4)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /usr/include/c++/4.8.5/bits/stl_vector.h(668,4)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /usr/include/c++/4.8.5/bits/stl_vector.h(668,4)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /usr/include/c++/4.8.5/bits/stl_vector.h(668,4)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /usr/include/c++/4.8.5/bits/stl_vector.h(668,4)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(749,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(749,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_vector.h(665,7):remark #34051: REGISTER ALLOCATION : [_ZNSt6vectorIPdSaIS0_EE6resizeEm] /usr/include/c++/4.8.5/bits/stl_vector.h:665

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rbx rsi rdi r12-r15 zmm0]
        
    Routine temporaries
        Total         :      54
            Global    :      25
            Local     :      29
        Regenerable   :       7
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      16 bytes*
            Reads     :       3 [5.75e-02 ~ 0.2%]
            Writes    :       3 [1.88e-02 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_vector.h(902,7):remark #34051: REGISTER ALLOCATION : [_ZNSt6vectorIiSaIiEE9push_backERKi] /usr/include/c++/4.8.5/bits/stl_vector.h:902

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rbp rsi rdi r12-r15]
        
    Routine temporaries
        Total         :      35
            Global    :      17
            Local     :      18
        Regenerable   :       2
        Spilled       :       5
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(415,7):remark #34051: REGISTER ALLOCATION : [_ZNSt6vectorIiSaIiEED1Ev] /usr/include/c++/4.8.5/bits/stl_vector.h:415

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :      10
            Global    :       7
            Local     :       3
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::vector<Real *, std::allocator<Real *>>::~vector(std::vector<Real *, std::allocator<Real *>> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(415,7):remark #34051: REGISTER ALLOCATION : [_ZNSt6vectorIPdSaIS0_EED1Ev] /usr/include/c++/4.8.5/bits/stl_vector.h:415

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :      10
            Global    :       7
            Local     :       3
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /usr/include/c++/4.8.5/bits/stl_vector.h(668,4)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /usr/include/c++/4.8.5/bits/stl_vector.h(668,4)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /usr/include/c++/4.8.5/bits/stl_vector.h(668,4)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /usr/include/c++/4.8.5/bits/stl_vector.h(668,4)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /usr/include/c++/4.8.5/bits/stl_vector.h(668,4)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /usr/include/c++/4.8.5/bits/stl_vector.h(668,4)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(749,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(749,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_vector.h(665,7):remark #34051: REGISTER ALLOCATION : [_ZNSt6vectorIdSaIdEE6resizeEm] /usr/include/c++/4.8.5/bits/stl_vector.h:665

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rsi rdi r8 r12-r15 zmm0]
        
    Routine temporaries
        Total         :      58
            Global    :      29
            Local     :      29
        Regenerable   :      11
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      16 bytes*
            Reads     :       4 [6.76e-02 ~ 0.2%]
            Writes    :       4 [2.89e-02 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FlowModelMPIHelperMaxMin::getMinQuantityWithInhomogeneousXDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::string *, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FlowModelMPIHelperMaxMin::getMinQuantityWithInhomogeneousXDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::string *, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &)) [77] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4411,1)
  -> (4412,23) std::vector<double, std::allocator<double>>::~vector(std::vector<double, std::allocator<double>> *)
  -> (4412,23) std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *)
  -> INLINE: (4414,45) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (4414,47) SAMRAI::hier::PatchHierarchy::getNumberOfLevels(const SAMRAI::hier::PatchHierarchy *) const
  -> INLINE: (4423,13) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (4425,26) std::shared_ptr<ExtendedFlattenedHierarchy>::shared_ptr<ExtendedFlattenedHierarchy>(std::shared_ptr<ExtendedFlattenedHierarchy> *, ExtendedFlattenedHierarchy *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (4425,26) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
  -> INLINE: (4427,15) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (4429,59) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (4433,22) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4434,43) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4449,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (4449,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (4449,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (4456,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (4456,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (4460,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (4460,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (4460,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (4463,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
  -> INLINE: (4465,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (4467,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (4467,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (4468,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (4468,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (4468,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (4468,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (4468,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (4468,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (4469,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (4471,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4471,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (4471,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (4477,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (4477,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (4479,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (4486,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (4488,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (4488,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4488,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (4488,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (4488,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (4491,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4491,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (4491,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (4491,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (4491,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (4504,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (4506,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (4506,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (4509,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (4509,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (4513,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (4513,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (4515,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (4517,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (4518,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (4518,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (4518,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (4518,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (4519,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (4521,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (4523,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (4525,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (4527,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (4528,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (4530,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (4531,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (4545,53) std::min<Real>(const Real &, const Real &)
  -> INLINE: (4555,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4555,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4555,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4556,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4571,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (4573,59) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (4577,22) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4578,43) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4593,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (4593,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (4593,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (4600,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (4600,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (4604,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (4604,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (4604,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (4607,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
  -> INLINE: (4609,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (4611,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (4611,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (4612,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (4612,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (4612,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (4612,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (4612,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (4612,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (4613,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (4615,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4615,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (4615,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (4621,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (4621,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (4623,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (4630,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (4632,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (4632,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4632,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (4632,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (4632,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (4635,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4635,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (4635,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (4635,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (4635,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (4648,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (4650,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (4650,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (4653,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (4653,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (4657,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (4657,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (4658,78) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (4658,80) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (4658,94) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (4660,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (4661,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (4662,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (4664,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (4665,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (4665,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (4665,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (4665,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (4666,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (4668,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (4670,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (4672,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (4673,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (4675,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (4676,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (4678,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (4680,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (4681,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (4698,57) std::min<Real>(const Real &, const Real &)
  -> INLINE: (4709,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4709,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4709,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4710,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4725,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (4727,59) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (4731,22) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4732,43) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4747,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (4747,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (4747,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (4754,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (4754,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (4758,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (4758,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (4758,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (4761,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
  -> INLINE: (4763,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (4765,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (4765,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (4766,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (4766,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (4766,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (4766,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (4766,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (4766,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (4767,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (4769,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4769,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (4769,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (4775,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (4775,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (4777,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (4784,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (4786,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (4786,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4786,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (4786,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (4786,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (4789,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4789,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (4789,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (4789,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (4789,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (4802,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (4804,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (4804,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (4807,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (4807,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (4811,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (4811,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (4812,78) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (4812,80) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (4812,94) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (4814,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (4815,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (4816,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (4817,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (4818,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (4820,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (4821,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (4821,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (4821,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (4821,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (4822,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (4824,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (4826,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (4828,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (4829,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (4830,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (4832,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (4833,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (4835,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (4838,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (4839,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (4840,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (4861,61) std::min<Real>(const Real &, const Real &)
  -> INLINE: (4873,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4873,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4873,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4874,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4890,5) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4436,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4436,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4436,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4436,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4436,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4436,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4458,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4468,21)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4518,25)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4533,21)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4541,25)
         <Peeled loop for vectorization, Multiversioned v1>
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4541,25)
         <Multiversioned v1>
            remark #25228: Loop multiversioned for Data Dependence
            remark #15300: LOOP WAS VECTORIZED
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4541,25)
         <Remainder loop for vectorization, Multiversioned v1>
            remark #15301: REMAINDER LOOP WAS VECTORIZED
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4541,25)
         <Remainder loop for vectorization, Multiversioned v1>
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4541,25)
         <Multiversioned v2>
            remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
            remark #25439: unrolled with remainder by 2  
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4541,25)
         <Remainder, Multiversioned v2>
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(759,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4555,13)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4580,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4580,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4580,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4580,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4580,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4580,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4602,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4612,21)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4665,25)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4683,21)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4685,25)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4694,29)
            <Peeled loop for vectorization, Multiversioned v1>
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4694,29)
            <Multiversioned v1>
               remark #25228: Loop multiversioned for Data Dependence
               remark #15300: LOOP WAS VECTORIZED
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4694,29)
            <Remainder loop for vectorization, Multiversioned v1>
               remark #15301: REMAINDER LOOP WAS VECTORIZED
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4694,29)
            <Remainder loop for vectorization, Multiversioned v1>
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4694,29)
            <Multiversioned v2>
               remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
               remark #25439: unrolled with remainder by 2  
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4694,29)
            <Remainder, Multiversioned v2>
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(759,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4709,13)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4734,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4734,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4734,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4734,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4734,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4734,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4756,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4766,21)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4821,25)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4842,21)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4844,25)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4846,29)
               remark #15542: loop was not vectorized: inner loop was already vectorized

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4857,33)
               <Peeled loop for vectorization, Multiversioned v1>
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4857,33)
               <Multiversioned v1>
                  remark #25228: Loop multiversioned for Data Dependence
                  remark #15300: LOOP WAS VECTORIZED
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4857,33)
               <Remainder loop for vectorization, Multiversioned v1>
                  remark #15301: REMAINDER LOOP WAS VECTORIZED
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4857,33)
               <Remainder loop for vectorization, Multiversioned v1>
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4857,33)
               <Multiversioned v2>
                  remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
                  remark #25439: unrolled with remainder by 2  
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4857,33)
               <Remainder, Multiversioned v2>
               LOOP END
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4442,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4456,36) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4586,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4600,36) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4740,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4754,36) ]
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable.h(1642,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable.h(1642,7):remark #34026: call to memset implemented as a call to optimized library version
/home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4411,1):remark #34051: REGISTER ALLOCATION : [_ZN24FlowModelMPIHelperMaxMin41getMinQuantityWithInhomogeneousXDirectionESsiRKSt10shared_ptrIN6SAMRAI4hier15VariableContextEE] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp:4411

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :    1467
            Global    :     399
            Local     :    1068
        Regenerable   :     398
        Spilled       :      72
        
    Routine stack
        Variables     :    1577 bytes*
            Reads     :      88 [8.53e+02 ~ 0.1%]
            Writes    :      59 [1.02e+02 ~ 0.0%]
        Spills        :     536 bytes*
            Reads     :     301 [7.82e+03 ~ 1.1%]
            Writes    :      80 [6.13e+03 ~ 0.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FlowModelMPIHelperMaxMin::getMinReciprocalOfQuantityWithInhomogeneousXDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::string *, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FlowModelMPIHelperMaxMin::getMinReciprocalOfQuantityWithInhomogeneousXDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::string *, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &)) [78] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4902,1)
  -> (4903,23) std::vector<double, std::allocator<double>>::~vector(std::vector<double, std::allocator<double>> *)
  -> (4903,23) std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *)
  -> INLINE: (4905,45) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (4905,47) SAMRAI::hier::PatchHierarchy::getNumberOfLevels(const SAMRAI::hier::PatchHierarchy *) const
  -> INLINE: (4914,13) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (4916,26) std::shared_ptr<ExtendedFlattenedHierarchy>::shared_ptr<ExtendedFlattenedHierarchy>(std::shared_ptr<ExtendedFlattenedHierarchy> *, ExtendedFlattenedHierarchy *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (4916,26) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
  -> INLINE: (4918,15) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (4920,59) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (4924,33) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4925,58) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4940,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (4940,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (4940,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (4947,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (4947,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (4951,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (4951,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (4951,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (4954,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
  -> INLINE: (4956,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (4958,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (4958,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (4959,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (4959,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (4959,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (4959,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (4959,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (4959,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (4960,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (4962,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4962,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (4962,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (4968,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (4968,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (4970,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (4977,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (4979,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (4979,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4979,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (4979,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (4979,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (4982,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4982,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (4982,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (4982,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (4982,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (4995,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (4997,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (4997,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (5000,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (5000,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (5004,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (5004,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (5006,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (5008,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (5009,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (5009,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (5009,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (5009,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (5010,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (5012,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (5014,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (5016,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (5018,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (5019,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (5021,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (5022,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (5036,57) std::min<Real>(const Real &, const Real &)
  -> INLINE: (5046,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5046,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5046,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5047,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5062,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (5064,59) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (5068,33) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5069,58) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5084,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (5084,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (5084,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (5091,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (5091,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (5095,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (5095,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (5095,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (5098,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
  -> INLINE: (5100,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (5102,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (5102,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (5103,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (5103,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (5103,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (5103,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (5103,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (5103,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (5104,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (5106,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5106,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (5106,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (5112,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (5112,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (5114,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (5121,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (5123,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (5123,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5123,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (5123,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (5123,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (5126,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5126,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (5126,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (5126,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (5126,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (5139,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (5141,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (5141,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (5144,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (5144,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (5148,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (5148,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (5149,78) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (5149,80) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (5149,94) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (5151,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (5152,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (5153,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (5155,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (5156,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (5156,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (5156,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (5156,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (5157,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (5159,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (5161,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (5163,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (5164,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (5166,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (5167,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (5169,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (5171,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (5172,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (5189,61) std::min<Real>(const Real &, const Real &)
  -> INLINE: (5200,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5200,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5200,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5201,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5216,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (5218,59) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (5222,33) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5223,58) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5238,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (5238,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (5238,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (5245,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (5245,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (5249,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (5249,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (5249,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (5252,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
  -> INLINE: (5254,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (5256,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (5256,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (5257,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (5257,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (5257,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (5257,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (5257,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (5257,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (5258,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (5260,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5260,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (5260,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (5266,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (5266,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (5268,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (5275,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (5277,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (5277,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5277,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (5277,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (5277,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (5280,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5280,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (5280,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (5280,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (5280,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (5293,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (5295,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (5295,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (5298,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (5298,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (5302,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (5302,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (5303,78) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (5303,80) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (5303,94) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (5305,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (5306,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (5307,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (5308,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (5309,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (5311,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (5312,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (5312,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (5312,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (5312,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (5313,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (5315,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (5317,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (5319,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (5320,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (5321,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (5323,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (5324,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (5326,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (5329,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (5330,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (5331,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (5352,65) std::min<Real>(const Real &, const Real &)
  -> INLINE: (5364,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5364,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5364,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5365,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5381,5) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4927,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4927,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4927,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4927,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4927,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4927,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4949,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4959,21)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5009,25)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5024,21)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5032,25)
         <Peeled loop for vectorization, Multiversioned v1>
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5032,25)
         <Multiversioned v1>
            remark #25228: Loop multiversioned for Data Dependence
            remark #15300: LOOP WAS VECTORIZED
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5032,25)
         <Remainder loop for vectorization, Multiversioned v1>
            remark #15301: REMAINDER LOOP WAS VECTORIZED
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5032,25)
         <Remainder loop for vectorization, Multiversioned v1>
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5032,25)
         <Multiversioned v2>
            remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
            remark #25439: unrolled with remainder by 2  
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5032,25)
         <Remainder, Multiversioned v2>
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(759,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5046,13)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5071,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5071,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5071,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5071,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5071,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5071,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5093,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5103,21)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5156,25)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5174,21)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5176,25)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5185,29)
            <Peeled loop for vectorization, Multiversioned v1>
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5185,29)
            <Multiversioned v1>
               remark #25228: Loop multiversioned for Data Dependence
               remark #15300: LOOP WAS VECTORIZED
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5185,29)
            <Remainder loop for vectorization, Multiversioned v1>
               remark #15301: REMAINDER LOOP WAS VECTORIZED
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5185,29)
            <Remainder loop for vectorization, Multiversioned v1>
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5185,29)
            <Multiversioned v2>
               remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
               remark #25439: unrolled with remainder by 2  
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5185,29)
            <Remainder, Multiversioned v2>
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(759,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5200,13)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5225,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5225,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5225,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5225,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5225,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5225,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5247,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5257,21)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5312,25)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5333,21)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5335,25)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5337,29)
               remark #15542: loop was not vectorized: inner loop was already vectorized

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5348,33)
               <Peeled loop for vectorization, Multiversioned v1>
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5348,33)
               <Multiversioned v1>
                  remark #25228: Loop multiversioned for Data Dependence
                  remark #15300: LOOP WAS VECTORIZED
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5348,33)
               <Remainder loop for vectorization, Multiversioned v1>
                  remark #15301: REMAINDER LOOP WAS VECTORIZED
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5348,33)
               <Remainder loop for vectorization, Multiversioned v1>
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5348,33)
               <Multiversioned v2>
                  remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
                  remark #25439: unrolled with remainder by 2  
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5348,33)
               <Remainder, Multiversioned v2>
               LOOP END
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4933,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4947,36) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5077,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5091,36) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5231,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5245,36) ]
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable.h(1642,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable.h(1642,7):remark #34026: call to memset implemented as a call to optimized library version
/home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(4902,1):remark #34051: REGISTER ALLOCATION : [_ZN24FlowModelMPIHelperMaxMin53getMinReciprocalOfQuantityWithInhomogeneousXDirectionESsiRKSt10shared_ptrIN6SAMRAI4hier15VariableContextEE] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp:4902

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   27[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm12]
        
    Routine temporaries
        Total         :    1500
            Global    :     402
            Local     :    1098
        Regenerable   :     401
        Spilled       :      72
        
    Routine stack
        Variables     :    1577 bytes*
            Reads     :      88 [8.53e+02 ~ 0.1%]
            Writes    :      59 [1.02e+02 ~ 0.0%]
        Spills        :     536 bytes*
            Reads     :     301 [7.82e+03 ~ 1.0%]
            Writes    :      80 [6.13e+03 ~ 0.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FlowModelMPIHelperMaxMin::getMinQuantityWithInhomogeneousXDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::vector<std::string, std::allocator<std::string>> &, const std::vector<int, std::allocator<int>> &, const std::shared_ptr<SAMRAI::hier::VariableContext> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FlowModelMPIHelperMaxMin::getMinQuantityWithInhomogeneousXDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::vector<std::string, std::allocator<std::string>> &, const std::vector<int, std::allocator<int>> &, const std::shared_ptr<SAMRAI::hier::VariableContext> &)) [79] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5393,1)
  -> INLINE: (5394,58) std::vector<std::string, std::allocator<std::string>>::size(const std::vector<std::string, std::allocator<std::string>> *) const
  -> DELETED: (5398,23) std::allocator<bool>::~allocator(std::allocator<bool> *)
  -> (5398,54) std::vector<bool, std::allocator<bool>>::~vector(std::vector<bool, std::allocator<bool>> *)
  -> DELETED: (5398,54) std::allocator<bool>::~allocator(std::allocator<bool> *)
  -> (5398,54) std::vector<bool, std::allocator<bool>>::vector(std::vector<bool, std::allocator<bool>> *, std::vector<bool, std::allocator<bool>>::size_type, const bool &, const std::vector<bool, std::allocator<bool>>::allocator_type &)
  -> INLINE: (5398,54) std::allocator<bool>::allocator(std::allocator<bool> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5400,5) std::vector<bool, std::allocator<bool>>::~vector(std::vector<bool, std::allocator<bool>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (5400,12) FlowModelMPIHelperMaxMin::getMinQuantityWithInhomogeneousXDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::vector<std::string, std::allocator<std::string>> &, const std::vector<int, std::allocator<int>> &, const std::vector<bool, std::allocator<bool>> &, const std::shared_ptr<SAMRAI::hier::VariableContext> &)


    Report from: Code generation optimizations [cg]

/home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5393,1):remark #34051: REGISTER ALLOCATION : [_ZN24FlowModelMPIHelperMaxMin41getMinQuantityWithInhomogeneousXDirectionERKSt6vectorISsSaISsEERKS0_IiSaIiEERKSt10shared_ptrIN6SAMRAI4hier15VariableContextEE] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp:5393

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rsi rdi r8-r9 r12-r15]
        
    Routine temporaries
        Total         :      49
            Global    :      13
            Local     :      36
        Regenerable   :       9
        Spilled       :       5
        
    Routine stack
        Variables     :      50 bytes*
            Reads     :       3 [1.00e+00 ~ 2.0%]
            Writes    :       3 [1.00e+00 ~ 2.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FlowModelMPIHelperMaxMin::getMinQuantityWithInhomogeneousXDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::vector<std::string, std::allocator<std::string>> &, const std::vector<int, std::allocator<int>> &, const std::vector<bool, std::allocator<bool>> &, const std::shared_ptr<SAMRAI::hier::VariableContext> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FlowModelMPIHelperMaxMin::getMinQuantityWithInhomogeneousXDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::vector<std::string, std::allocator<std::string>> &, const std::vector<int, std::allocator<int>> &, const std::vector<bool, std::allocator<bool>> &, const std::shared_ptr<SAMRAI::hier::VariableContext> &)) [80] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5417,1)
  -> INLINE: (5418,58) std::vector<std::string, std::allocator<std::string>>::size(const std::vector<std::string, std::allocator<std::string>> *) const
  -> (5423,23) std::vector<double, std::allocator<double>>::~vector(std::vector<double, std::allocator<double>> *)
  -> (5423,23) std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *)
  -> INLINE: (5425,45) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (5425,47) SAMRAI::hier::PatchHierarchy::getNumberOfLevels(const SAMRAI::hier::PatchHierarchy *) const
  -> INLINE: (5434,13) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (5436,26) std::shared_ptr<ExtendedFlattenedHierarchy>::shared_ptr<ExtendedFlattenedHierarchy>(std::shared_ptr<ExtendedFlattenedHierarchy> *, ExtendedFlattenedHierarchy *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (5436,26) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
  -> INLINE: (5438,15) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (5440,59) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (5444,22) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (5445,41) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5460,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (5460,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (5460,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (5467,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (5467,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (5471,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (5471,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (5471,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (5474,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
  -> INLINE: (5476,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (5478,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (5478,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (5479,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (5479,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (5479,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (5479,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (5479,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (5479,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (5480,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (5482,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5482,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (5482,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (5488,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (5488,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (5490,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (5497,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (5499,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (5499,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5499,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (5499,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (5499,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (5504,25) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5504,25) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5504,79) std::vector<std::string, std::allocator<std::string>>::operator[](const std::vector<std::string, std::allocator<std::string>> *, std::vector<std::string, std::allocator<std::string>>::size_type) const
  -> (5504,85) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (5504,85) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (5504,85) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (5517,72) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::~vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> (5517,72) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> (5518,33) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::resize(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (5521,36) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (5521,41) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::operator=(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *, std::shared_ptr<SAMRAI::pdat::CellData<Real>> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5521,41) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5521,69) std::vector<std::string, std::allocator<std::string>>::operator[](const std::vector<std::string, std::allocator<std::string>> *, std::vector<std::string, std::allocator<std::string>>::size_type) const
  -> (5524,36) std::vector<Real *, std::allocator<Real *>>::~vector(std::vector<Real *, std::allocator<Real *>> *)
  -> (5524,36) std::vector<Real *, std::allocator<Real *>>::vector(std::vector<Real *, std::allocator<Real *>> *)
  -> (5525,22) std::vector<Real *, std::allocator<Real *>>::resize(std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (5528,25) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (5528,47) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (5528,51) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (5528,53) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (5528,81) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (5532,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (5532,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (5537,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (5537,42) ExtendedFlattenedHierarchy::getOverlappedVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> (5541,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (5541,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (5542,35) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (5546,76) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (5546,80) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (5546,82) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> (5547,39) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
  -> INLINE: (5547,64) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (5550,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (5551,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (5551,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (5551,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (5551,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (5552,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (5554,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (5556,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (5558,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (5560,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (5561,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (5563,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (5564,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> (5577,64) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (5578,34) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (5578,34) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (5578,68) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (5578,68) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (5579,33) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (5581,77) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (5583,62) SAMRAI::hier::Box::contains(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
  -> INLINE: (5601,93) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (5603,51) std::vector<bool, std::allocator<bool>>::operator[](const std::vector<bool, std::allocator<bool>> *, std::vector<bool, std::allocator<bool>>::size_type) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5605,50) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (5609,50) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (5613,51) std::min<Real>(const Real &, const Real &)
  -> INLINE: (5623,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5623,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (5623,13) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::~vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> (5623,13) std::vector<Real *, std::allocator<Real *>>::~vector(std::vector<Real *, std::allocator<Real *>> *)
  -> (5623,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> INLINE: (5624,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5639,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (5641,59) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (5645,22) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (5646,41) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5661,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (5661,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (5661,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (5668,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (5668,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (5672,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (5672,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (5672,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (5675,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
  -> INLINE: (5677,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (5679,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (5679,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (5680,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (5680,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (5680,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (5680,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (5680,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (5680,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (5681,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (5683,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5683,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (5683,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (5689,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (5689,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (5691,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (5698,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (5700,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (5700,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5700,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (5700,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (5700,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (5705,25) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5705,25) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5705,79) std::vector<std::string, std::allocator<std::string>>::operator[](const std::vector<std::string, std::allocator<std::string>> *, std::vector<std::string, std::allocator<std::string>>::size_type) const
  -> (5705,85) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (5705,85) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (5705,85) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (5718,72) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::~vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> (5718,72) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> (5719,33) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::resize(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (5722,36) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (5722,41) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::operator=(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *, std::shared_ptr<SAMRAI::pdat::CellData<Real>> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5722,41) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5722,69) std::vector<std::string, std::allocator<std::string>>::operator[](const std::vector<std::string, std::allocator<std::string>> *, std::vector<std::string, std::allocator<std::string>>::size_type) const
  -> (5725,36) std::vector<Real *, std::allocator<Real *>>::~vector(std::vector<Real *, std::allocator<Real *>> *)
  -> (5725,36) std::vector<Real *, std::allocator<Real *>>::vector(std::vector<Real *, std::allocator<Real *>> *)
  -> (5726,22) std::vector<Real *, std::allocator<Real *>>::resize(std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (5729,25) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (5729,47) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (5729,51) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (5729,53) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (5729,81) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (5733,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (5733,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (5738,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (5738,42) ExtendedFlattenedHierarchy::getOverlappedVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> (5742,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (5742,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (5743,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (5743,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (5744,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (5744,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (5745,35) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (5746,35) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (5747,38) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (5751,76) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (5751,80) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (5751,82) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (5752,80) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (5752,84) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (5752,86) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (5752,100) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> (5754,39) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
  -> INLINE: (5754,64) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (5755,39) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
  -> INLINE: (5755,64) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (5756,42) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
  -> INLINE: (5756,71) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (5759,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (5760,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (5760,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (5760,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (5760,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (5761,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (5763,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (5765,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (5767,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (5768,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (5770,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (5771,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (5773,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (5774,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (5775,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (5776,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> (5791,68) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (5792,38) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (5792,38) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (5792,72) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (5792,72) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (5793,37) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (5795,81) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (5797,66) SAMRAI::hier::Box::contains(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
  -> INLINE: (5815,98) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (5816,83) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (5816,109) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (5818,55) std::vector<bool, std::allocator<bool>>::operator[](const std::vector<bool, std::allocator<bool>> *, std::vector<bool, std::allocator<bool>>::size_type) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5820,54) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (5824,54) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (5828,55) std::min<Real>(const Real &, const Real &)
  -> INLINE: (5839,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5839,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (5839,13) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::~vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> (5839,13) std::vector<Real *, std::allocator<Real *>>::~vector(std::vector<Real *, std::allocator<Real *>> *)
  -> (5839,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (5839,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (5839,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> INLINE: (5840,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5855,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (5857,59) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (5861,22) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (5862,41) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5877,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (5877,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (5877,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (5884,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (5884,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (5888,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (5888,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (5888,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (5891,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
  -> INLINE: (5893,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (5895,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (5895,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (5896,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (5896,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (5896,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (5896,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (5896,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (5896,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (5897,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (5899,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5899,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (5899,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (5905,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (5905,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (5907,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (5914,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (5916,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (5916,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5916,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (5916,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (5916,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (5921,25) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5921,25) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5921,79) std::vector<std::string, std::allocator<std::string>>::operator[](const std::vector<std::string, std::allocator<std::string>> *, std::vector<std::string, std::allocator<std::string>>::size_type) const
  -> (5921,85) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (5921,85) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (5921,85) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (5934,72) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::~vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> (5934,72) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> (5935,33) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::resize(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (5938,36) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (5938,41) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::operator=(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *, std::shared_ptr<SAMRAI::pdat::CellData<Real>> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5938,41) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5938,69) std::vector<std::string, std::allocator<std::string>>::operator[](const std::vector<std::string, std::allocator<std::string>> *, std::vector<std::string, std::allocator<std::string>>::size_type) const
  -> (5941,36) std::vector<Real *, std::allocator<Real *>>::~vector(std::vector<Real *, std::allocator<Real *>> *)
  -> (5941,36) std::vector<Real *, std::allocator<Real *>>::vector(std::vector<Real *, std::allocator<Real *>> *)
  -> (5942,22) std::vector<Real *, std::allocator<Real *>>::resize(std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (5945,25) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (5945,47) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (5945,51) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (5945,53) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (5945,81) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (5949,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (5949,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (5954,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (5954,42) ExtendedFlattenedHierarchy::getOverlappedVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> (5958,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (5958,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (5959,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (5959,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (5960,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (5960,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (5961,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (5961,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (5962,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (5962,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (5963,35) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (5964,35) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (5965,35) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (5966,38) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (5967,38) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (5971,76) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (5971,80) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (5971,82) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (5972,80) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (5972,84) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (5972,86) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (5972,100) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> (5974,39) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
  -> INLINE: (5974,64) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (5975,39) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
  -> INLINE: (5975,64) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (5976,39) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
  -> INLINE: (5976,64) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (5977,42) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
  -> INLINE: (5977,71) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (5978,42) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
  -> INLINE: (5978,71) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (5981,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (5982,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (5982,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (5982,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (5982,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (5983,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (5985,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (5987,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (5989,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (5990,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (5991,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (5993,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (5994,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (5996,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (5997,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (5998,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (5999,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (6000,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (6001,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> (6018,72) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (6019,42) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (6019,42) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (6019,76) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (6019,76) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (6020,41) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (6022,85) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (6024,70) SAMRAI::hier::Box::contains(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
  -> INLINE: (6042,102) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (6043,87) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (6043,113) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (6044,87) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (6044,113) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (6045,69) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (6047,59) std::vector<bool, std::allocator<bool>>::operator[](const std::vector<bool, std::allocator<bool>> *, std::vector<bool, std::allocator<bool>>::size_type) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6049,58) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (6053,58) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (6057,59) std::min<Real>(const Real &, const Real &)
  -> INLINE: (6069,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6069,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (6069,13) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::~vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> (6069,13) std::vector<Real *, std::allocator<Real *>>::~vector(std::vector<Real *, std::allocator<Real *>> *)
  -> (6069,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (6069,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (6069,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (6069,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (6069,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> INLINE: (6070,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6086,5) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5447,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5447,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5447,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5447,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5447,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5447,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5469,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5501,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/4.8.5/bits/stl_pair.h(113,15) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5519,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5521,43) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5526,17)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between u_qi.u_qi.u_qi.u_qi (5528:25) and u_qi.u_qi.u_qi.u_qi[qi] (5528:25)
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5544,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5546,82) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5551,25)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5566,21)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5572,66) ]

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5578,34)
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      LOOP END

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5593,25)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed ANTI dependence between num_ghosts_0_u_qi.num_ghosts_0_u_qi.num_ghosts_0_u_qi.num_ghosts (5601:93) and min_local[idx_fine] (5613:29)

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5599,29)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed ANTI dependence between value (5605:37) and value (5605:37)
            remark #25439: unrolled with remainder by 2  
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5599,29)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5648,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5648,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5648,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5648,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5648,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5648,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5670,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5702,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/4.8.5/bits/stl_pair.h(113,15) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5720,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5722,43) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5727,17)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between u_qi.u_qi.u_qi.u_qi (5729:25) and u_qi.u_qi.u_qi.u_qi[qi] (5729:25)
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5749,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5751,82) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5760,25)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5778,21)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5786,79) ]

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5780,25)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5786,79) ]

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5792,38)
            remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5807,29)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed ANTI dependence between num_ghosts_0_u_qi.num_ghosts_0_u_qi.num_ghosts_0_u_qi.num_ghosts (5816:109) and min_local[idx_fine] (5828:33)

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5813,33)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed ANTI dependence between value (5820:41) and value (5820:41)
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5864,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5864,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5864,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5864,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5864,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5864,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5886,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5918,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/4.8.5/bits/stl_pair.h(113,15) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5936,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5938,43) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5943,17)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between u_qi.u_qi.u_qi.u_qi (5945:25) and u_qi.u_qi.u_qi.u_qi[qi] (5945:25)
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5969,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5971,82) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5982,25)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6003,21)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6013,97) ]

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6005,25)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6013,97) ]

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6007,29)
            remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6013,97) ]

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6019,42)
               remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6034,33)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed ANTI dependence between num_ghosts_0_u_qi.num_ghosts_0_u_qi.num_ghosts_0_u_qi.num_ghosts (6045:69) and min_local[idx_fine] (6057:37)

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6040,37)
                  remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
                  remark #15346: vector dependence: assumed ANTI dependence between value (6049:45) and value (6049:45)
               LOOP END
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5453,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5467,36) ]

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5479,21)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5497,17) ]
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5654,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5668,36) ]

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5680,21)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5698,17) ]
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5870,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5884,36) ]

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5896,21)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5914,17) ]
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(5417,1):remark #34051: REGISTER ALLOCATION : [_ZN24FlowModelMPIHelperMaxMin41getMinQuantityWithInhomogeneousXDirectionERKSt6vectorISsSaISsEERKS0_IiSaIiEERKS0_IbSaIbEERKSt10shared_ptrIN6SAMRAI4hier15VariableContextEE] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp:5417

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :    1570
            Global    :     419
            Local     :    1151
        Regenerable   :     552
        Spilled       :      96
        
    Routine stack
        Variables     :    2227 bytes*
            Reads     :     106 [2.71e+04 ~ 0.6%]
            Writes    :      67 [4.78e+02 ~ 0.0%]
        Spills        :     728 bytes*
            Reads     :     326 [2.72e+05 ~ 6.3%]
            Writes    :     103 [7.77e+04 ~ 1.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FlowModelMPIHelperMaxMin::getMaxQuantityWithInhomogeneousYDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::string *, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FlowModelMPIHelperMaxMin::getMaxQuantityWithInhomogeneousYDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::string *, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &)) [81] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6098,1)
  -> (6099,23) std::vector<double, std::allocator<double>>::~vector(std::vector<double, std::allocator<double>> *)
  -> (6099,23) std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *)
  -> INLINE: (6101,45) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (6101,47) SAMRAI::hier::PatchHierarchy::getNumberOfLevels(const SAMRAI::hier::PatchHierarchy *) const
  -> INLINE: (6110,13) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (6112,26) std::shared_ptr<ExtendedFlattenedHierarchy>::shared_ptr<ExtendedFlattenedHierarchy>(std::shared_ptr<ExtendedFlattenedHierarchy> *, ExtendedFlattenedHierarchy *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (6112,26) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
  -> INLINE: (6114,15) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (6116,9) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6116,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6116,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (6116,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (6116,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6116,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (6116,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (6116,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (6116,9) std::operator<<<char, std::char_traits<char>, std::allocator<char>>(std::basic_ostream<char, std::char_traits<char>> &, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)
  -> (6116,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (6116,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (6116,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (6116,9) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> INLINE: (6116,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6116,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6116,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6122,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (6124,59) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (6128,22) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6129,43) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6144,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (6144,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (6144,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (6151,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (6151,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (6155,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (6155,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (6155,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (6158,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
  -> INLINE: (6160,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (6162,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (6162,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (6163,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (6163,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (6163,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (6163,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (6163,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (6163,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (6164,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (6166,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6166,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (6166,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (6172,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (6172,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (6174,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (6181,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (6183,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (6183,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6183,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (6183,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (6183,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (6186,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6186,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (6186,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (6186,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (6186,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (6199,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (6201,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (6201,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (6204,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (6204,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (6208,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (6208,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (6209,78) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (6209,80) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (6209,94) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (6211,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (6212,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (6213,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (6215,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (6216,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (6216,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (6216,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (6216,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (6217,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (6219,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (6221,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (6223,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (6224,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (6226,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (6227,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (6230,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (6231,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (6232,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (6249,57) std::max<Real>(const Real &, const Real &)
  -> INLINE: (6260,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6260,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6260,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6261,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6276,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (6278,59) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (6282,22) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6283,43) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6298,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (6298,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (6298,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (6305,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (6305,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (6309,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (6309,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (6309,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (6312,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
  -> INLINE: (6314,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (6316,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (6316,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (6317,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (6317,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (6317,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (6317,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (6317,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (6317,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (6318,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (6320,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6320,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (6320,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (6326,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (6326,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (6328,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (6335,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (6337,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (6337,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6337,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (6337,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (6337,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (6340,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6340,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (6340,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (6340,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (6340,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (6353,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (6355,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (6355,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (6358,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (6358,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (6362,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (6362,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (6363,78) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (6363,80) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (6363,94) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (6365,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (6366,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (6367,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (6368,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (6369,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (6371,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (6372,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (6372,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (6372,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (6372,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (6373,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (6375,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (6377,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (6379,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (6380,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (6381,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (6383,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (6384,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (6387,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (6389,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (6390,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (6391,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (6412,61) std::max<Real>(const Real &, const Real &)
  -> INLINE: (6424,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6424,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6424,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6425,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6441,5) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6128,22)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6128,22)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6128,22)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6128,22)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6128,22)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6128,22)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6131,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6131,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6131,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6131,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6131,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6131,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6153,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6163,21)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6216,25)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6234,21)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6236,25)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6245,29)
            <Peeled loop for vectorization, Multiversioned v1>
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6245,29)
            <Multiversioned v1>
               remark #25228: Loop multiversioned for Data Dependence
               remark #15300: LOOP WAS VECTORIZED
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6245,29)
            <Remainder loop for vectorization, Multiversioned v1>
               remark #15301: REMAINDER LOOP WAS VECTORIZED
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6245,29)
            <Remainder loop for vectorization, Multiversioned v1>
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6245,29)
            <Multiversioned v2>
               remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
               remark #25439: unrolled with remainder by 2  
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6245,29)
            <Remainder, Multiversioned v2>
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(759,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6260,13)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6285,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6285,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6285,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6285,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6285,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6285,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6307,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6317,21)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6372,25)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6393,21)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6395,25)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6397,29)
               remark #15542: loop was not vectorized: inner loop was already vectorized

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6408,33)
               <Peeled loop for vectorization, Multiversioned v1>
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6408,33)
               <Multiversioned v1>
                  remark #25228: Loop multiversioned for Data Dependence
                  remark #15300: LOOP WAS VECTORIZED
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6408,33)
               <Remainder loop for vectorization, Multiversioned v1>
                  remark #15301: REMAINDER LOOP WAS VECTORIZED
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6408,33)
               <Remainder loop for vectorization, Multiversioned v1>
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6408,33)
               <Multiversioned v2>
                  remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
                  remark #25439: unrolled with remainder by 2  
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6408,33)
               <Remainder, Multiversioned v2>
               LOOP END
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(759,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6424,13)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6137,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6151,36) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6291,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6305,36) ]
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable.h(780,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable.h(780,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable.h(1642,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable.h(1642,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(749,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(749,7):remark #34026: call to memset implemented as a call to optimized library version
/home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6098,1):remark #34051: REGISTER ALLOCATION : [_ZN24FlowModelMPIHelperMaxMin41getMaxQuantityWithInhomogeneousYDirectionESsiRKSt10shared_ptrIN6SAMRAI4hier15VariableContextEE] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp:6098

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :    1369
            Global    :     380
            Local     :     989
        Regenerable   :     397
        Spilled       :      65
        
    Routine stack
        Variables     :    1497 bytes*
            Reads     :      86 [3.68e+01 ~ 0.1%]
            Writes    :     110 [4.02e+01 ~ 0.1%]
        Spills        :     480 bytes*
            Reads     :     245 [5.38e+02 ~ 1.4%]
            Writes    :      79 [2.86e+02 ~ 0.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FlowModelMPIHelperMaxMin::getMaxReciprocalOfQuantityWithInhomogeneousYDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::string *, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FlowModelMPIHelperMaxMin::getMaxReciprocalOfQuantityWithInhomogeneousYDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::string *, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &)) [82] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6453,1)
  -> (6454,23) std::vector<double, std::allocator<double>>::~vector(std::vector<double, std::allocator<double>> *)
  -> (6454,23) std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *)
  -> INLINE: (6456,45) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (6456,47) SAMRAI::hier::PatchHierarchy::getNumberOfLevels(const SAMRAI::hier::PatchHierarchy *) const
  -> INLINE: (6465,13) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (6467,26) std::shared_ptr<ExtendedFlattenedHierarchy>::shared_ptr<ExtendedFlattenedHierarchy>(std::shared_ptr<ExtendedFlattenedHierarchy> *, ExtendedFlattenedHierarchy *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (6467,26) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
  -> INLINE: (6469,15) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (6471,9) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6471,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6471,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (6471,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (6471,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6471,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (6471,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (6471,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (6471,9) std::operator<<<char, std::char_traits<char>, std::allocator<char>>(std::basic_ostream<char, std::char_traits<char>> &, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)
  -> (6471,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (6471,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (6471,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (6471,9) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> INLINE: (6471,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6471,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6471,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6477,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (6479,59) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (6483,33) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6484,58) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6499,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (6499,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (6499,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (6506,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (6506,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (6510,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (6510,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (6510,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (6513,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
  -> INLINE: (6515,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (6517,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (6517,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (6518,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (6518,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (6518,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (6518,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (6518,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (6518,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (6519,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (6521,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6521,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (6521,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (6527,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (6527,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (6529,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (6536,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (6538,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (6538,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6538,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (6538,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (6538,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (6541,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6541,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (6541,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (6541,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (6541,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (6554,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (6556,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (6556,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (6559,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (6559,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (6563,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (6563,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (6564,78) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (6564,80) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (6564,94) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (6566,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (6567,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (6568,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (6570,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (6571,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (6571,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (6571,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (6571,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (6572,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (6574,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (6576,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (6578,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (6579,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (6581,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (6582,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (6585,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (6586,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (6587,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (6604,61) std::max<Real>(const Real &, const Real &)
  -> INLINE: (6615,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6615,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6615,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6616,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6631,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (6633,59) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (6637,33) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6638,58) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6653,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (6653,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (6653,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (6660,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (6660,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (6664,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (6664,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (6664,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (6667,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
  -> INLINE: (6669,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (6671,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (6671,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (6672,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (6672,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (6672,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (6672,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (6672,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (6672,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (6673,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (6675,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6675,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (6675,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (6681,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (6681,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (6683,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (6690,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (6692,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (6692,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6692,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (6692,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (6692,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (6695,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6695,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (6695,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (6695,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (6695,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (6708,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (6710,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (6710,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (6713,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (6713,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (6717,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (6717,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (6718,78) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (6718,80) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (6718,94) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (6720,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (6721,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (6722,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (6723,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (6724,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (6726,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (6727,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (6727,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (6727,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (6727,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (6728,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (6730,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (6732,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (6734,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (6735,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (6736,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (6738,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (6739,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (6742,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (6744,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (6745,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (6746,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (6767,65) std::max<Real>(const Real &, const Real &)
  -> INLINE: (6779,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6779,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6779,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6780,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6796,5) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6483,33)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6483,33)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6483,33)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6483,33)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6483,33)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6483,33)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6486,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6486,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6486,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6486,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6486,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6486,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6508,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6518,21)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6571,25)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6589,21)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6591,25)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6600,29)
            <Peeled loop for vectorization, Multiversioned v1>
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6600,29)
            <Multiversioned v1>
               remark #25228: Loop multiversioned for Data Dependence
               remark #15300: LOOP WAS VECTORIZED
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6600,29)
            <Remainder loop for vectorization, Multiversioned v1>
               remark #15301: REMAINDER LOOP WAS VECTORIZED
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6600,29)
            <Remainder loop for vectorization, Multiversioned v1>
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6600,29)
            <Multiversioned v2>
               remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
               remark #25439: unrolled with remainder by 2  
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6600,29)
            <Remainder, Multiversioned v2>
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(759,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6615,13)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6640,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6640,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6640,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6640,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6640,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6640,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6662,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6672,21)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6727,25)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6748,21)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6750,25)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6752,29)
               remark #15542: loop was not vectorized: inner loop was already vectorized

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6763,33)
               <Peeled loop for vectorization, Multiversioned v1>
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6763,33)
               <Multiversioned v1>
                  remark #25228: Loop multiversioned for Data Dependence
                  remark #15300: LOOP WAS VECTORIZED
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6763,33)
               <Remainder loop for vectorization, Multiversioned v1>
                  remark #15301: REMAINDER LOOP WAS VECTORIZED
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6763,33)
               <Remainder loop for vectorization, Multiversioned v1>
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6763,33)
               <Multiversioned v2>
                  remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
                  remark #25439: unrolled with remainder by 2  
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6763,33)
               <Remainder, Multiversioned v2>
               LOOP END
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(759,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6779,13)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6492,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6506,36) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6646,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6660,36) ]
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable.h(780,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable.h(780,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable.h(1642,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable.h(1642,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(749,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(749,7):remark #34026: call to memset implemented as a call to optimized library version
/home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6453,1):remark #34051: REGISTER ALLOCATION : [_ZN24FlowModelMPIHelperMaxMin53getMaxReciprocalOfQuantityWithInhomogeneousYDirectionESsiRKSt10shared_ptrIN6SAMRAI4hier15VariableContextEE] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp:6453

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   27[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm12]
        
    Routine temporaries
        Total         :    1391
            Global    :     382
            Local     :    1009
        Regenerable   :     399
        Spilled       :      65
        
    Routine stack
        Variables     :    1497 bytes*
            Reads     :      86 [3.68e+01 ~ 0.1%]
            Writes    :     110 [4.02e+01 ~ 0.1%]
        Spills        :     480 bytes*
            Reads     :     245 [5.38e+02 ~ 1.2%]
            Writes    :      79 [2.86e+02 ~ 0.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FlowModelMPIHelperMaxMin::getMaxQuantityWithInhomogeneousYDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::vector<std::string, std::allocator<std::string>> &, const std::vector<int, std::allocator<int>> &, const std::shared_ptr<SAMRAI::hier::VariableContext> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FlowModelMPIHelperMaxMin::getMaxQuantityWithInhomogeneousYDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::vector<std::string, std::allocator<std::string>> &, const std::vector<int, std::allocator<int>> &, const std::shared_ptr<SAMRAI::hier::VariableContext> &)) [83] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6808,1)
  -> INLINE: (6809,58) std::vector<std::string, std::allocator<std::string>>::size(const std::vector<std::string, std::allocator<std::string>> *) const
  -> DELETED: (6813,23) std::allocator<bool>::~allocator(std::allocator<bool> *)
  -> (6813,54) std::vector<bool, std::allocator<bool>>::~vector(std::vector<bool, std::allocator<bool>> *)
  -> DELETED: (6813,54) std::allocator<bool>::~allocator(std::allocator<bool> *)
  -> (6813,54) std::vector<bool, std::allocator<bool>>::vector(std::vector<bool, std::allocator<bool>> *, std::vector<bool, std::allocator<bool>>::size_type, const bool &, const std::vector<bool, std::allocator<bool>>::allocator_type &)
  -> INLINE: (6813,54) std::allocator<bool>::allocator(std::allocator<bool> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6815,5) std::vector<bool, std::allocator<bool>>::~vector(std::vector<bool, std::allocator<bool>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (6815,12) FlowModelMPIHelperMaxMin::getMaxQuantityWithInhomogeneousYDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::vector<std::string, std::allocator<std::string>> &, const std::vector<int, std::allocator<int>> &, const std::vector<bool, std::allocator<bool>> &, const std::shared_ptr<SAMRAI::hier::VariableContext> &)


    Report from: Code generation optimizations [cg]

/home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6808,1):remark #34051: REGISTER ALLOCATION : [_ZN24FlowModelMPIHelperMaxMin41getMaxQuantityWithInhomogeneousYDirectionERKSt6vectorISsSaISsEERKS0_IiSaIiEERKSt10shared_ptrIN6SAMRAI4hier15VariableContextEE] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp:6808

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rsi rdi r8-r9 r12-r15]
        
    Routine temporaries
        Total         :      49
            Global    :      13
            Local     :      36
        Regenerable   :       9
        Spilled       :       5
        
    Routine stack
        Variables     :      50 bytes*
            Reads     :       3 [1.00e+00 ~ 2.0%]
            Writes    :       3 [1.00e+00 ~ 2.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FlowModelMPIHelperMaxMin::getMaxQuantityWithInhomogeneousYDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::vector<std::string, std::allocator<std::string>> &, const std::vector<int, std::allocator<int>> &, const std::vector<bool, std::allocator<bool>> &, const std::shared_ptr<SAMRAI::hier::VariableContext> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FlowModelMPIHelperMaxMin::getMaxQuantityWithInhomogeneousYDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::vector<std::string, std::allocator<std::string>> &, const std::vector<int, std::allocator<int>> &, const std::vector<bool, std::allocator<bool>> &, const std::shared_ptr<SAMRAI::hier::VariableContext> &)) [84] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6832,1)
  -> INLINE: (6833,58) std::vector<std::string, std::allocator<std::string>>::size(const std::vector<std::string, std::allocator<std::string>> *) const
  -> (6838,23) std::vector<double, std::allocator<double>>::~vector(std::vector<double, std::allocator<double>> *)
  -> (6838,23) std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *)
  -> INLINE: (6840,45) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (6840,47) SAMRAI::hier::PatchHierarchy::getNumberOfLevels(const SAMRAI::hier::PatchHierarchy *) const
  -> INLINE: (6849,13) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (6851,26) std::shared_ptr<ExtendedFlattenedHierarchy>::shared_ptr<ExtendedFlattenedHierarchy>(std::shared_ptr<ExtendedFlattenedHierarchy> *, ExtendedFlattenedHierarchy *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (6851,26) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
  -> INLINE: (6853,15) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (6855,9) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6855,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6855,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (6855,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (6855,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6855,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (6855,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (6855,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (6855,9) std::operator<<<char, std::char_traits<char>, std::allocator<char>>(std::basic_ostream<char, std::char_traits<char>> &, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)
  -> (6855,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (6855,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (6855,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (6855,9) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> INLINE: (6855,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6855,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6855,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6861,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (6863,59) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (6867,22) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6868,41) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6883,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (6883,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (6883,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (6890,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (6890,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (6894,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (6894,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (6894,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (6897,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
  -> INLINE: (6899,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (6901,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (6901,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (6902,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (6902,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (6902,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (6902,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (6902,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (6902,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (6903,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (6905,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6905,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (6905,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (6911,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (6911,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (6913,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (6920,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (6922,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (6922,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6922,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (6922,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (6922,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (6927,25) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6927,25) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6927,79) std::vector<std::string, std::allocator<std::string>>::operator[](const std::vector<std::string, std::allocator<std::string>> *, std::vector<std::string, std::allocator<std::string>>::size_type) const
  -> (6927,85) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (6927,85) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (6927,85) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (6940,72) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::~vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> (6940,72) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> (6941,33) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::resize(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (6944,36) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (6944,41) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::operator=(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *, std::shared_ptr<SAMRAI::pdat::CellData<Real>> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6944,41) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6944,69) std::vector<std::string, std::allocator<std::string>>::operator[](const std::vector<std::string, std::allocator<std::string>> *, std::vector<std::string, std::allocator<std::string>>::size_type) const
  -> (6947,36) std::vector<Real *, std::allocator<Real *>>::~vector(std::vector<Real *, std::allocator<Real *>> *)
  -> (6947,36) std::vector<Real *, std::allocator<Real *>>::vector(std::vector<Real *, std::allocator<Real *>> *)
  -> INLINE: (6948,22) std::vector<Real *, std::allocator<Real *>>::resize(std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6951,25) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (6951,47) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (6951,51) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (6951,53) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (6951,81) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (6955,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (6955,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (6960,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (6960,42) ExtendedFlattenedHierarchy::getOverlappedVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> (6964,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (6964,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (6965,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (6965,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (6966,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (6966,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (6967,35) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (6968,35) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (6969,38) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (6973,76) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (6973,80) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (6973,82) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (6974,80) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (6974,84) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (6974,86) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (6974,100) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (6976,39) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6976,64) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (6977,39) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6977,64) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (6978,42) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (6978,71) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (6981,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (6982,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (6982,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (6982,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (6982,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (6983,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (6985,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (6987,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (6989,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (6990,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (6992,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (6993,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (6995,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (6996,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (6997,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (6998,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> (7013,68) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (7014,38) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (7014,38) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (7014,72) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (7014,72) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (7015,37) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (7017,81) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (7019,66) SAMRAI::hier::Box::contains(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
  -> INLINE: (7037,98) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (7038,83) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (7038,109) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (7040,55) std::vector<bool, std::allocator<bool>>::operator[](const std::vector<bool, std::allocator<bool>> *, std::vector<bool, std::allocator<bool>>::size_type) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7042,54) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (7046,54) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (7050,55) std::max<Real>(const Real &, const Real &)
  -> INLINE: (7061,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7061,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (7061,13) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::~vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> INLINE: (7061,13) std::vector<Real *, std::allocator<Real *>>::~vector(std::vector<Real *, std::allocator<Real *>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7061,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7061,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7061,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7062,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7077,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (7079,59) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (7083,22) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7084,41) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7099,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (7099,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (7099,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (7106,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (7106,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (7110,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (7110,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (7110,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (7113,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
  -> INLINE: (7115,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (7117,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (7117,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (7118,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (7118,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (7118,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (7118,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (7118,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (7118,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (7119,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (7121,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7121,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (7121,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (7127,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (7127,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (7129,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (7136,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (7138,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (7138,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7138,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (7138,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (7138,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (7143,25) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7143,25) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7143,79) std::vector<std::string, std::allocator<std::string>>::operator[](const std::vector<std::string, std::allocator<std::string>> *, std::vector<std::string, std::allocator<std::string>>::size_type) const
  -> (7143,85) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (7143,85) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (7143,85) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (7156,72) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::~vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> (7156,72) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> (7157,33) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::resize(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (7160,36) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (7160,41) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::operator=(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *, std::shared_ptr<SAMRAI::pdat::CellData<Real>> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7160,41) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7160,69) std::vector<std::string, std::allocator<std::string>>::operator[](const std::vector<std::string, std::allocator<std::string>> *, std::vector<std::string, std::allocator<std::string>>::size_type) const
  -> (7163,36) std::vector<Real *, std::allocator<Real *>>::~vector(std::vector<Real *, std::allocator<Real *>> *)
  -> (7163,36) std::vector<Real *, std::allocator<Real *>>::vector(std::vector<Real *, std::allocator<Real *>> *)
  -> INLINE: (7164,22) std::vector<Real *, std::allocator<Real *>>::resize(std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7167,25) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (7167,47) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (7167,51) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (7167,53) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (7167,81) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (7171,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (7171,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (7176,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (7176,42) ExtendedFlattenedHierarchy::getOverlappedVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> (7180,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (7180,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (7181,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (7181,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (7182,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (7182,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (7183,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (7183,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (7184,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (7184,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (7185,35) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (7186,35) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (7187,35) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (7188,38) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (7189,38) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (7193,76) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (7193,80) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (7193,82) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (7194,80) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (7194,84) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (7194,86) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (7194,100) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (7196,39) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7196,64) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (7197,39) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7197,64) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (7198,39) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7198,64) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (7199,42) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7199,71) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (7200,42) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7200,71) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (7203,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (7204,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (7204,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (7204,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (7204,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (7205,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (7207,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (7209,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (7211,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (7212,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (7213,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (7215,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (7216,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (7218,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (7219,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (7220,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (7221,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (7222,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (7223,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> (7240,72) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (7241,42) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (7241,42) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (7241,76) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (7241,76) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (7242,41) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (7244,85) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (7246,70) SAMRAI::hier::Box::contains(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
  -> INLINE: (7264,102) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (7265,87) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (7265,113) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (7266,87) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (7266,113) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (7267,69) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (7269,59) std::vector<bool, std::allocator<bool>>::operator[](const std::vector<bool, std::allocator<bool>> *, std::vector<bool, std::allocator<bool>>::size_type) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7271,58) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (7275,58) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (7279,59) std::max<Real>(const Real &, const Real &)
  -> INLINE: (7291,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7291,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (7291,13) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::~vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> INLINE: (7291,13) std::vector<Real *, std::allocator<Real *>>::~vector(std::vector<Real *, std::allocator<Real *>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7291,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7291,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7291,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7291,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7291,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7292,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7308,5) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6870,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6870,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6870,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6870,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6870,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6870,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6892,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6924,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/4.8.5/bits/stl_pair.h(113,15) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6942,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6944,43) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6949,17)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between u_qi.u_qi.u_qi.u_qi (6951:25) and u_qi.u_qi.u_qi.u_qi[qi] (6951:25)
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6971,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6973,82) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6982,25)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7000,21)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7008,79) ]

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7002,25)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7008,79) ]

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7014,38)
            remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7029,29)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed ANTI dependence between num_ghosts_0_u_qi.num_ghosts_0_u_qi.num_ghosts_0_u_qi.num_ghosts (7038:109) and max_local[idx_fine] (7050:33)

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7035,33)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed ANTI dependence between value (7042:41) and value (7042:41)
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7086,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7086,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7086,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7086,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7086,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7086,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7108,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7140,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/4.8.5/bits/stl_pair.h(113,15) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7158,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7160,43) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7165,17)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between u_qi.u_qi.u_qi.u_qi (7167:25) and u_qi.u_qi.u_qi.u_qi[qi] (7167:25)
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7191,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7193,82) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7204,25)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7225,21)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7235,97) ]

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7227,25)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7235,97) ]

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7229,29)
            remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7235,97) ]

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7241,42)
               remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7256,33)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed ANTI dependence between num_ghosts_0_u_qi.num_ghosts_0_u_qi.num_ghosts_0_u_qi.num_ghosts (7267:69) and max_local[idx_fine] (7279:37)

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7262,37)
                  remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
                  remark #15346: vector dependence: assumed ANTI dependence between value (7271:45) and value (7271:45)
               LOOP END
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6876,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6890,36) ]

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6902,21)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6920,17) ]
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7092,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7106,36) ]

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7118,21)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7136,17) ]
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/basic_string.h(1725,18):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/basic_string.h(1725,18):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(6832,1):remark #34051: REGISTER ALLOCATION : [_ZN24FlowModelMPIHelperMaxMin41getMaxQuantityWithInhomogeneousYDirectionERKSt6vectorISsSaISsEERKS0_IiSaIiEERKS0_IbSaIbEERKSt10shared_ptrIN6SAMRAI4hier15VariableContextEE] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp:6832

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :    1440
            Global    :     385
            Local     :    1055
        Regenerable   :     489
        Spilled       :      75
        
    Routine stack
        Variables     :    1989 bytes*
            Reads     :     144 [1.59e+03 ~ 0.7%]
            Writes    :     112 [3.79e+01 ~ 0.0%]
        Spills        :     560 bytes*
            Reads     :     239 [1.30e+04 ~ 5.4%]
            Writes    :      83 [4.44e+03 ~ 1.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FlowModelMPIHelperMaxMin::getMinQuantityWithInhomogeneousYDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::string *, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FlowModelMPIHelperMaxMin::getMinQuantityWithInhomogeneousYDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::string *, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &)) [85] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7320,1)
  -> (7321,23) std::vector<double, std::allocator<double>>::~vector(std::vector<double, std::allocator<double>> *)
  -> (7321,23) std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *)
  -> INLINE: (7323,45) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (7323,47) SAMRAI::hier::PatchHierarchy::getNumberOfLevels(const SAMRAI::hier::PatchHierarchy *) const
  -> INLINE: (7332,13) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (7334,26) std::shared_ptr<ExtendedFlattenedHierarchy>::shared_ptr<ExtendedFlattenedHierarchy>(std::shared_ptr<ExtendedFlattenedHierarchy> *, ExtendedFlattenedHierarchy *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (7334,26) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
  -> INLINE: (7336,15) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (7338,9) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7338,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7338,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (7338,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (7338,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7338,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (7338,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (7338,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (7338,9) std::operator<<<char, std::char_traits<char>, std::allocator<char>>(std::basic_ostream<char, std::char_traits<char>> &, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)
  -> (7338,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (7338,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (7338,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (7338,9) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> INLINE: (7338,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7338,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7338,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7344,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (7346,59) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (7350,22) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7351,43) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7366,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (7366,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (7366,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (7373,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (7373,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (7377,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (7377,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (7377,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (7380,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
  -> INLINE: (7382,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (7384,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (7384,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (7385,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (7385,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (7385,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (7385,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (7385,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (7385,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (7386,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (7388,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7388,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (7388,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (7394,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (7394,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (7396,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (7403,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (7405,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (7405,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7405,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (7405,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (7405,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (7408,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7408,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (7408,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (7408,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (7408,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (7421,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (7423,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (7423,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (7426,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (7426,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (7430,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (7430,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (7431,78) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (7431,80) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (7431,94) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (7433,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (7434,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (7435,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (7437,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (7438,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (7438,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (7438,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (7438,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (7439,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (7441,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (7443,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (7445,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (7446,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (7448,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (7449,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (7452,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (7453,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (7454,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (7471,57) std::min<Real>(const Real &, const Real &)
  -> INLINE: (7482,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7482,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7482,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7483,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7498,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (7500,59) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (7504,22) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7505,43) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7520,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (7520,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (7520,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (7527,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (7527,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (7531,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (7531,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (7531,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (7534,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
  -> INLINE: (7536,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (7538,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (7538,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (7539,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (7539,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (7539,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (7539,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (7539,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (7539,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (7540,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (7542,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7542,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (7542,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (7548,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (7548,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (7550,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (7557,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (7559,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (7559,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7559,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (7559,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (7559,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (7562,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7562,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (7562,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (7562,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (7562,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (7575,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (7577,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (7577,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (7580,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (7580,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (7584,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (7584,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (7585,78) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (7585,80) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (7585,94) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (7587,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (7588,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (7589,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (7590,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (7591,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (7593,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (7594,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (7594,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (7594,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (7594,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (7595,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (7597,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (7599,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (7601,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (7602,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (7603,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (7605,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (7606,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (7609,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (7611,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (7612,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (7613,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (7634,61) std::min<Real>(const Real &, const Real &)
  -> INLINE: (7646,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7646,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7646,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7647,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7663,5) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7350,22)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7350,22)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7350,22)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7350,22)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7350,22)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7350,22)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7353,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7353,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7353,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7353,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7353,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7353,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7375,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7385,21)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7438,25)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7456,21)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7458,25)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7467,29)
            <Peeled loop for vectorization, Multiversioned v1>
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7467,29)
            <Multiversioned v1>
               remark #25228: Loop multiversioned for Data Dependence
               remark #15300: LOOP WAS VECTORIZED
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7467,29)
            <Remainder loop for vectorization, Multiversioned v1>
               remark #15301: REMAINDER LOOP WAS VECTORIZED
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7467,29)
            <Remainder loop for vectorization, Multiversioned v1>
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7467,29)
            <Multiversioned v2>
               remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
               remark #25439: unrolled with remainder by 2  
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7467,29)
            <Remainder, Multiversioned v2>
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(759,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7482,13)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7507,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7507,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7507,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7507,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7507,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7507,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7529,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7539,21)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7594,25)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7615,21)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7617,25)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7619,29)
               remark #15542: loop was not vectorized: inner loop was already vectorized

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7630,33)
               <Peeled loop for vectorization, Multiversioned v1>
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7630,33)
               <Multiversioned v1>
                  remark #25228: Loop multiversioned for Data Dependence
                  remark #15300: LOOP WAS VECTORIZED
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7630,33)
               <Remainder loop for vectorization, Multiversioned v1>
                  remark #15301: REMAINDER LOOP WAS VECTORIZED
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7630,33)
               <Remainder loop for vectorization, Multiversioned v1>
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7630,33)
               <Multiversioned v2>
                  remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
                  remark #25439: unrolled with remainder by 2  
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7630,33)
               <Remainder, Multiversioned v2>
               LOOP END
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(759,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7646,13)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7359,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7373,36) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7513,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7527,36) ]
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable.h(780,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable.h(780,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable.h(1642,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable.h(1642,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(749,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(749,7):remark #34026: call to memset implemented as a call to optimized library version
/home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7320,1):remark #34051: REGISTER ALLOCATION : [_ZN24FlowModelMPIHelperMaxMin41getMinQuantityWithInhomogeneousYDirectionESsiRKSt10shared_ptrIN6SAMRAI4hier15VariableContextEE] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp:7320

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :    1369
            Global    :     380
            Local     :     989
        Regenerable   :     397
        Spilled       :      65
        
    Routine stack
        Variables     :    1497 bytes*
            Reads     :      86 [3.68e+01 ~ 0.1%]
            Writes    :     110 [4.02e+01 ~ 0.1%]
        Spills        :     480 bytes*
            Reads     :     245 [5.38e+02 ~ 1.4%]
            Writes    :      79 [2.86e+02 ~ 0.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FlowModelMPIHelperMaxMin::getMinReciprocalOfQuantityWithInhomogeneousYDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::string *, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FlowModelMPIHelperMaxMin::getMinReciprocalOfQuantityWithInhomogeneousYDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::string *, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &)) [86] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7675,1)
  -> (7676,23) std::vector<double, std::allocator<double>>::~vector(std::vector<double, std::allocator<double>> *)
  -> (7676,23) std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *)
  -> INLINE: (7678,45) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (7678,47) SAMRAI::hier::PatchHierarchy::getNumberOfLevels(const SAMRAI::hier::PatchHierarchy *) const
  -> INLINE: (7687,13) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (7689,26) std::shared_ptr<ExtendedFlattenedHierarchy>::shared_ptr<ExtendedFlattenedHierarchy>(std::shared_ptr<ExtendedFlattenedHierarchy> *, ExtendedFlattenedHierarchy *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (7689,26) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
  -> INLINE: (7691,15) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (7693,9) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7693,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7693,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (7693,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (7693,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7693,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (7693,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (7693,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (7693,9) std::operator<<<char, std::char_traits<char>, std::allocator<char>>(std::basic_ostream<char, std::char_traits<char>> &, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)
  -> (7693,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (7693,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (7693,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (7693,9) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> INLINE: (7693,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7693,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7693,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7699,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (7701,59) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (7705,33) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7706,58) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7721,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (7721,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (7721,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (7728,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (7728,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (7732,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (7732,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (7732,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (7735,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
  -> INLINE: (7737,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (7739,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (7739,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (7740,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (7740,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (7740,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (7740,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (7740,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (7740,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (7741,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (7743,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7743,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (7743,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (7749,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (7749,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (7751,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (7758,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (7760,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (7760,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7760,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (7760,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (7760,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (7763,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7763,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (7763,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (7763,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (7763,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (7776,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (7778,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (7778,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (7781,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (7781,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (7785,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (7785,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (7786,78) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (7786,80) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (7786,94) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (7788,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (7789,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (7790,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (7792,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (7793,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (7793,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (7793,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (7793,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (7794,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (7796,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (7798,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (7800,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (7801,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (7803,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (7804,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (7807,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (7808,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (7809,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (7826,61) std::min<Real>(const Real &, const Real &)
  -> INLINE: (7837,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7837,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7837,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7838,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7853,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (7855,59) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (7859,33) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7860,58) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7875,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (7875,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (7875,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (7882,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (7882,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (7886,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (7886,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (7886,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (7889,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
  -> INLINE: (7891,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (7893,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (7893,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (7894,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (7894,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (7894,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (7894,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (7894,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (7894,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (7895,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (7897,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7897,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (7897,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (7903,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (7903,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (7905,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (7912,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (7914,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (7914,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7914,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (7914,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (7914,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (7917,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (7917,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (7917,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (7917,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (7917,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (7930,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (7932,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (7932,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (7935,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (7935,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (7939,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (7939,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (7940,78) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (7940,80) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (7940,94) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (7942,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (7943,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (7944,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (7945,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (7946,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (7948,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (7949,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (7949,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (7949,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (7949,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (7950,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (7952,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (7954,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (7956,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (7957,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (7958,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (7960,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (7961,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (7964,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (7966,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (7967,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (7968,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (7989,65) std::min<Real>(const Real &, const Real &)
  -> INLINE: (8001,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8001,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8001,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8002,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8018,5) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7705,33)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7705,33)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7705,33)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7705,33)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7705,33)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7705,33)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7708,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7708,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7708,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7708,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7708,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7708,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7730,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7740,21)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7793,25)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7811,21)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7813,25)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7822,29)
            <Peeled loop for vectorization, Multiversioned v1>
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7822,29)
            <Multiversioned v1>
               remark #25228: Loop multiversioned for Data Dependence
               remark #15300: LOOP WAS VECTORIZED
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7822,29)
            <Remainder loop for vectorization, Multiversioned v1>
               remark #15301: REMAINDER LOOP WAS VECTORIZED
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7822,29)
            <Remainder loop for vectorization, Multiversioned v1>
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7822,29)
            <Multiversioned v2>
               remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
               remark #25439: unrolled with remainder by 2  
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7822,29)
            <Remainder, Multiversioned v2>
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(759,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7837,13)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7862,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7862,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7862,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7862,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7862,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7862,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7884,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7894,21)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7949,25)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7970,21)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7972,25)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7974,29)
               remark #15542: loop was not vectorized: inner loop was already vectorized

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7985,33)
               <Peeled loop for vectorization, Multiversioned v1>
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7985,33)
               <Multiversioned v1>
                  remark #25228: Loop multiversioned for Data Dependence
                  remark #15300: LOOP WAS VECTORIZED
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7985,33)
               <Remainder loop for vectorization, Multiversioned v1>
                  remark #15301: REMAINDER LOOP WAS VECTORIZED
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7985,33)
               <Remainder loop for vectorization, Multiversioned v1>
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7985,33)
               <Multiversioned v2>
                  remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
                  remark #25439: unrolled with remainder by 2  
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7985,33)
               <Remainder, Multiversioned v2>
               LOOP END
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(759,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8001,13)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7714,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7728,36) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7868,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7882,36) ]
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable.h(780,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable.h(780,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable.h(1642,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable.h(1642,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(749,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(749,7):remark #34026: call to memset implemented as a call to optimized library version
/home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(7675,1):remark #34051: REGISTER ALLOCATION : [_ZN24FlowModelMPIHelperMaxMin53getMinReciprocalOfQuantityWithInhomogeneousYDirectionESsiRKSt10shared_ptrIN6SAMRAI4hier15VariableContextEE] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp:7675

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   27[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm12]
        
    Routine temporaries
        Total         :    1391
            Global    :     382
            Local     :    1009
        Regenerable   :     399
        Spilled       :      65
        
    Routine stack
        Variables     :    1497 bytes*
            Reads     :      86 [3.68e+01 ~ 0.1%]
            Writes    :     110 [4.02e+01 ~ 0.1%]
        Spills        :     480 bytes*
            Reads     :     245 [5.38e+02 ~ 1.2%]
            Writes    :      79 [2.86e+02 ~ 0.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FlowModelMPIHelperMaxMin::getMinQuantityWithInhomogeneousYDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::vector<std::string, std::allocator<std::string>> &, const std::vector<int, std::allocator<int>> &, const std::shared_ptr<SAMRAI::hier::VariableContext> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FlowModelMPIHelperMaxMin::getMinQuantityWithInhomogeneousYDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::vector<std::string, std::allocator<std::string>> &, const std::vector<int, std::allocator<int>> &, const std::shared_ptr<SAMRAI::hier::VariableContext> &)) [87] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8030,1)
  -> INLINE: (8031,58) std::vector<std::string, std::allocator<std::string>>::size(const std::vector<std::string, std::allocator<std::string>> *) const
  -> DELETED: (8035,23) std::allocator<bool>::~allocator(std::allocator<bool> *)
  -> (8035,54) std::vector<bool, std::allocator<bool>>::~vector(std::vector<bool, std::allocator<bool>> *)
  -> DELETED: (8035,54) std::allocator<bool>::~allocator(std::allocator<bool> *)
  -> (8035,54) std::vector<bool, std::allocator<bool>>::vector(std::vector<bool, std::allocator<bool>> *, std::vector<bool, std::allocator<bool>>::size_type, const bool &, const std::vector<bool, std::allocator<bool>>::allocator_type &)
  -> INLINE: (8035,54) std::allocator<bool>::allocator(std::allocator<bool> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8037,5) std::vector<bool, std::allocator<bool>>::~vector(std::vector<bool, std::allocator<bool>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (8037,12) FlowModelMPIHelperMaxMin::getMinQuantityWithInhomogeneousYDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::vector<std::string, std::allocator<std::string>> &, const std::vector<int, std::allocator<int>> &, const std::vector<bool, std::allocator<bool>> &, const std::shared_ptr<SAMRAI::hier::VariableContext> &)


    Report from: Code generation optimizations [cg]

/home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8030,1):remark #34051: REGISTER ALLOCATION : [_ZN24FlowModelMPIHelperMaxMin41getMinQuantityWithInhomogeneousYDirectionERKSt6vectorISsSaISsEERKS0_IiSaIiEERKSt10shared_ptrIN6SAMRAI4hier15VariableContextEE] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp:8030

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rsi rdi r8-r9 r12-r15]
        
    Routine temporaries
        Total         :      49
            Global    :      13
            Local     :      36
        Regenerable   :       9
        Spilled       :       5
        
    Routine stack
        Variables     :      50 bytes*
            Reads     :       3 [1.00e+00 ~ 2.0%]
            Writes    :       3 [1.00e+00 ~ 2.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FlowModelMPIHelperMaxMin::getMinQuantityWithInhomogeneousYDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::vector<std::string, std::allocator<std::string>> &, const std::vector<int, std::allocator<int>> &, const std::vector<bool, std::allocator<bool>> &, const std::shared_ptr<SAMRAI::hier::VariableContext> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FlowModelMPIHelperMaxMin::getMinQuantityWithInhomogeneousYDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::vector<std::string, std::allocator<std::string>> &, const std::vector<int, std::allocator<int>> &, const std::vector<bool, std::allocator<bool>> &, const std::shared_ptr<SAMRAI::hier::VariableContext> &)) [88] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8054,1)
  -> INLINE: (8055,58) std::vector<std::string, std::allocator<std::string>>::size(const std::vector<std::string, std::allocator<std::string>> *) const
  -> (8060,23) std::vector<double, std::allocator<double>>::~vector(std::vector<double, std::allocator<double>> *)
  -> (8060,23) std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *)
  -> INLINE: (8062,45) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (8062,47) SAMRAI::hier::PatchHierarchy::getNumberOfLevels(const SAMRAI::hier::PatchHierarchy *) const
  -> INLINE: (8071,13) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (8073,26) std::shared_ptr<ExtendedFlattenedHierarchy>::shared_ptr<ExtendedFlattenedHierarchy>(std::shared_ptr<ExtendedFlattenedHierarchy> *, ExtendedFlattenedHierarchy *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (8073,26) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
  -> INLINE: (8075,15) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (8077,9) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8077,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8077,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (8077,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (8077,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8077,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (8077,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (8077,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (8077,9) std::operator<<<char, std::char_traits<char>, std::allocator<char>>(std::basic_ostream<char, std::char_traits<char>> &, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)
  -> (8077,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (8077,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (8077,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (8077,9) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> INLINE: (8077,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8077,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8077,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8083,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (8085,59) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (8089,22) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8090,41) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8105,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (8105,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (8105,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (8112,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (8112,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (8116,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (8116,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (8116,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (8119,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
  -> INLINE: (8121,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (8123,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (8123,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (8124,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (8124,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (8124,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (8124,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (8124,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (8124,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (8125,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (8127,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8127,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (8127,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (8133,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (8133,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (8135,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (8142,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (8144,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (8144,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8144,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (8144,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (8144,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (8149,25) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8149,25) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8149,79) std::vector<std::string, std::allocator<std::string>>::operator[](const std::vector<std::string, std::allocator<std::string>> *, std::vector<std::string, std::allocator<std::string>>::size_type) const
  -> (8149,85) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (8149,85) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (8149,85) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (8162,72) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::~vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> (8162,72) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> (8163,33) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::resize(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (8166,36) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (8166,41) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::operator=(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *, std::shared_ptr<SAMRAI::pdat::CellData<Real>> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8166,41) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8166,69) std::vector<std::string, std::allocator<std::string>>::operator[](const std::vector<std::string, std::allocator<std::string>> *, std::vector<std::string, std::allocator<std::string>>::size_type) const
  -> (8169,36) std::vector<Real *, std::allocator<Real *>>::~vector(std::vector<Real *, std::allocator<Real *>> *)
  -> (8169,36) std::vector<Real *, std::allocator<Real *>>::vector(std::vector<Real *, std::allocator<Real *>> *)
  -> INLINE: (8170,22) std::vector<Real *, std::allocator<Real *>>::resize(std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8173,25) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (8173,47) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (8173,51) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (8173,53) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (8173,81) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (8177,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (8177,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (8182,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (8182,42) ExtendedFlattenedHierarchy::getOverlappedVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> (8186,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (8186,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (8187,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (8187,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (8188,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (8188,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (8189,35) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (8190,35) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (8191,38) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (8195,76) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (8195,80) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (8195,82) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (8196,80) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (8196,84) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (8196,86) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (8196,100) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (8198,39) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8198,64) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (8199,39) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8199,64) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (8200,42) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8200,71) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (8203,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (8204,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (8204,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (8204,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (8204,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (8205,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (8207,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (8209,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (8211,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (8212,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (8214,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (8215,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (8217,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (8218,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (8219,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (8220,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> (8235,68) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (8236,38) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (8236,38) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (8236,72) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (8236,72) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (8237,37) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (8239,81) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (8241,66) SAMRAI::hier::Box::contains(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
  -> INLINE: (8259,98) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (8260,83) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (8260,109) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (8262,55) std::vector<bool, std::allocator<bool>>::operator[](const std::vector<bool, std::allocator<bool>> *, std::vector<bool, std::allocator<bool>>::size_type) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8264,54) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (8268,54) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (8272,55) std::min<Real>(const Real &, const Real &)
  -> INLINE: (8283,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8283,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (8283,13) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::~vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> INLINE: (8283,13) std::vector<Real *, std::allocator<Real *>>::~vector(std::vector<Real *, std::allocator<Real *>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8283,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8283,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8283,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8284,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8299,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (8301,59) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (8305,22) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8306,41) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8321,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (8321,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (8321,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (8328,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (8328,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (8332,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (8332,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (8332,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (8335,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
  -> INLINE: (8337,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (8339,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (8339,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (8340,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (8340,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (8340,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (8340,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (8340,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (8340,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (8341,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (8343,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8343,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (8343,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (8349,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (8349,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (8351,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (8358,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (8360,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (8360,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8360,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (8360,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (8360,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (8365,25) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8365,25) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8365,79) std::vector<std::string, std::allocator<std::string>>::operator[](const std::vector<std::string, std::allocator<std::string>> *, std::vector<std::string, std::allocator<std::string>>::size_type) const
  -> (8365,85) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (8365,85) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (8365,85) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (8378,72) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::~vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> (8378,72) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> (8379,33) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::resize(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (8382,36) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (8382,41) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::operator=(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *, std::shared_ptr<SAMRAI::pdat::CellData<Real>> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8382,41) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8382,69) std::vector<std::string, std::allocator<std::string>>::operator[](const std::vector<std::string, std::allocator<std::string>> *, std::vector<std::string, std::allocator<std::string>>::size_type) const
  -> (8385,36) std::vector<Real *, std::allocator<Real *>>::~vector(std::vector<Real *, std::allocator<Real *>> *)
  -> (8385,36) std::vector<Real *, std::allocator<Real *>>::vector(std::vector<Real *, std::allocator<Real *>> *)
  -> INLINE: (8386,22) std::vector<Real *, std::allocator<Real *>>::resize(std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8389,25) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (8389,47) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (8389,51) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (8389,53) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (8389,81) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (8393,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (8393,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (8398,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (8398,42) ExtendedFlattenedHierarchy::getOverlappedVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> (8402,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (8402,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (8403,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (8403,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (8404,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (8404,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (8405,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (8405,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (8406,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (8406,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (8407,35) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (8408,35) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (8409,35) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (8410,38) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (8411,38) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (8415,76) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (8415,80) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (8415,82) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (8416,80) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (8416,84) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (8416,86) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (8416,100) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (8418,39) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8418,64) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (8419,39) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8419,64) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (8420,39) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8420,64) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (8421,42) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8421,71) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (8422,42) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8422,71) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (8425,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (8426,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (8426,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (8426,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (8426,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (8427,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (8429,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (8431,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (8433,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (8434,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (8435,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (8437,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (8438,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (8440,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (8441,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (8442,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (8443,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (8444,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (8445,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> (8462,72) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (8463,42) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (8463,42) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (8463,76) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (8463,76) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (8464,41) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (8466,85) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (8468,70) SAMRAI::hier::Box::contains(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
  -> INLINE: (8486,102) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (8487,87) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (8487,113) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (8488,87) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (8488,113) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (8489,69) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (8491,59) std::vector<bool, std::allocator<bool>>::operator[](const std::vector<bool, std::allocator<bool>> *, std::vector<bool, std::allocator<bool>>::size_type) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8493,58) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (8497,58) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (8501,59) std::min<Real>(const Real &, const Real &)
  -> INLINE: (8513,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8513,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (8513,13) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::~vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> INLINE: (8513,13) std::vector<Real *, std::allocator<Real *>>::~vector(std::vector<Real *, std::allocator<Real *>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8513,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8513,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8513,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8513,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8513,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8514,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8530,5) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8092,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8092,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8092,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8092,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8092,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8092,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8114,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8146,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/4.8.5/bits/stl_pair.h(113,15) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8164,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8166,43) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8171,17)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between u_qi.u_qi.u_qi.u_qi (8173:25) and u_qi.u_qi.u_qi.u_qi[qi] (8173:25)
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8193,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8195,82) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8204,25)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8222,21)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8230,79) ]

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8224,25)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8230,79) ]

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8236,38)
            remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8251,29)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed ANTI dependence between num_ghosts_0_u_qi.num_ghosts_0_u_qi.num_ghosts_0_u_qi.num_ghosts (8260:109) and min_local[idx_fine] (8272:33)

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8257,33)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed ANTI dependence between value (8264:41) and value (8264:41)
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8308,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8308,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8308,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8308,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8308,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8308,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8330,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8362,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/4.8.5/bits/stl_pair.h(113,15) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8380,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8382,43) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8387,17)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between u_qi.u_qi.u_qi.u_qi (8389:25) and u_qi.u_qi.u_qi.u_qi[qi] (8389:25)
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8413,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8415,82) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8426,25)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8447,21)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8457,97) ]

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8449,25)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8457,97) ]

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8451,29)
            remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8457,97) ]

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8463,42)
               remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8478,33)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed ANTI dependence between num_ghosts_0_u_qi.num_ghosts_0_u_qi.num_ghosts_0_u_qi.num_ghosts (8489:69) and min_local[idx_fine] (8501:37)

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8484,37)
                  remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
                  remark #15346: vector dependence: assumed ANTI dependence between value (8493:45) and value (8493:45)
               LOOP END
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8098,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8112,36) ]

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8124,21)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8142,17) ]
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8314,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8328,36) ]

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8340,21)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8358,17) ]
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/basic_string.h(1725,18):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/basic_string.h(1725,18):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8054,1):remark #34051: REGISTER ALLOCATION : [_ZN24FlowModelMPIHelperMaxMin41getMinQuantityWithInhomogeneousYDirectionERKSt6vectorISsSaISsEERKS0_IiSaIiEERKS0_IbSaIbEERKSt10shared_ptrIN6SAMRAI4hier15VariableContextEE] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp:8054

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :    1440
            Global    :     385
            Local     :    1055
        Regenerable   :     489
        Spilled       :      75
        
    Routine stack
        Variables     :    1989 bytes*
            Reads     :     144 [1.59e+03 ~ 0.7%]
            Writes    :     112 [3.79e+01 ~ 0.0%]
        Spills        :     560 bytes*
            Reads     :     239 [1.30e+04 ~ 5.4%]
            Writes    :      83 [4.44e+03 ~ 1.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FlowModelMPIHelperMaxMin::getMaxQuantityWithInhomogeneousZDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::string *, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FlowModelMPIHelperMaxMin::getMaxQuantityWithInhomogeneousZDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::string *, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &)) [89] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8542,1)
  -> (8543,23) std::vector<double, std::allocator<double>>::~vector(std::vector<double, std::allocator<double>> *)
  -> (8543,23) std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *)
  -> INLINE: (8545,45) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (8545,47) SAMRAI::hier::PatchHierarchy::getNumberOfLevels(const SAMRAI::hier::PatchHierarchy *) const
  -> INLINE: (8554,13) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (8556,26) std::shared_ptr<ExtendedFlattenedHierarchy>::shared_ptr<ExtendedFlattenedHierarchy>(std::shared_ptr<ExtendedFlattenedHierarchy> *, ExtendedFlattenedHierarchy *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (8556,26) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
  -> INLINE: (8558,15) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (8560,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (8560,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (8560,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8560,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (8560,9) std::operator<<<char, std::char_traits<char>, std::allocator<char>>(std::basic_ostream<char, std::char_traits<char>> &, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)
  -> (8560,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (8560,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (8560,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (8560,9) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> INLINE: (8560,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8560,9) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8560,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (8560,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (8560,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8560,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8560,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8566,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (8568,9) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8568,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8568,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (8568,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (8568,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8568,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (8568,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (8568,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (8568,9) std::operator<<<char, std::char_traits<char>, std::allocator<char>>(std::basic_ostream<char, std::char_traits<char>> &, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)
  -> (8568,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (8568,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (8568,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (8568,9) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> INLINE: (8568,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8568,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8568,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8574,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (8576,59) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (8580,22) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8581,43) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8596,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (8596,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(495,28) std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>> *, std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>>::size_type) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(495,28) std::shared_ptr<SAMRAI::hier::PatchLevel>::shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const std::shared_ptr<SAMRAI::hier::PatchLevel> &)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (8596,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (8603,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (8603,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (8607,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (8607,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (8607,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> INLINE: (8610,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
    -> /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(614,11) SAMRAI::hier::IntVector::operator/=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (8612,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (8614,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (8614,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (8615,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (8615,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (8615,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (8615,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (8615,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (8615,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (8616,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1222,10) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator++(std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8618,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8618,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (8618,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (8624,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (8624,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (8626,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (8633,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (8635,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (8635,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8635,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (8635,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (8635,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (8638,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8638,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8638,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(1133,28) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> (8638,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (8638,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (8651,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (8653,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (8653,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (8656,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (8656,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (8660,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (8660,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (8661,78) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (8661,80) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (8661,94) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (8663,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (8664,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (8665,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (8666,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (8667,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (8669,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (8670,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
  -> INLINE: (8670,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
  -> INLINE: (8670,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (8670,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (8671,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(186,13) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator++(std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(188,13) std::_List_const_iterator<SAMRAI::hier::Box>::operator++(std::_List_const_iterator<SAMRAI::hier::Box> *)
  -> INLINE: (8673,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,30) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator*(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,44) std::_List_const_iterator<SAMRAI::hier::Box>::operator*(const std::_List_const_iterator<SAMRAI::hier::Box> *) const
  -> (8675,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (8677,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (8678,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (8679,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (8681,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (8682,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
    -> /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(284,11) SAMRAI::hier::Index::operator-=(SAMRAI::hier::Index *, const SAMRAI::hier::Index &)
  -> INLINE: (8686,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (8687,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (8688,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (8689,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (8710,61) std::max<Real>(const Real &, const Real &)
  -> INLINE: (8722,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8722,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8722,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8723,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8739,5) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8580,22)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8580,22)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8580,22)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8580,22)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8580,22)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8580,22)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8583,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8583,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8583,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8583,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8583,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8583,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8605,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8615,21)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8670,25)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8691,21)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8693,25)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8695,29)
               remark #15542: loop was not vectorized: inner loop was already vectorized

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8706,33)
               <Peeled loop for vectorization, Multiversioned v1>
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8706,33)
               <Multiversioned v1>
                  remark #25228: Loop multiversioned for Data Dependence
                  remark #15300: LOOP WAS VECTORIZED
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8706,33)
               <Remainder loop for vectorization, Multiversioned v1>
                  remark #15301: REMAINDER LOOP WAS VECTORIZED
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8706,33)
               <Remainder loop for vectorization, Multiversioned v1>
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8706,33)
               <Multiversioned v2>
                  remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
                  remark #25439: unrolled with remainder by 2  
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8706,33)
               <Remainder, Multiversioned v2>
               LOOP END
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(759,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8722,13)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8589,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8603,36) ]
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable.h(780,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable.h(1642,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(749,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(749,7):remark #34026: call to memset implemented as a call to optimized library version
/home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8542,1):remark #34051: REGISTER ALLOCATION : [_ZN24FlowModelMPIHelperMaxMin41getMaxQuantityWithInhomogeneousZDirectionESsiRKSt10shared_ptrIN6SAMRAI4hier15VariableContextEE] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp:8542

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :    1212
            Global    :     311
            Local     :     901
        Regenerable   :     397
        Spilled       :      51
        
    Routine stack
        Variables     :    1378 bytes*
            Reads     :      95 [1.04e+01 ~ 0.5%]
            Writes    :     142 [3.31e+01 ~ 1.7%]
        Spills        :     368 bytes*
            Reads     :     168 [2.98e+01 ~ 1.5%]
            Writes    :      79 [8.39e+00 ~ 0.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::IntVector::operator/=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::IntVector::operator/=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)) [91] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(584,4)
  -> INLINE: (589,43) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (590,48) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (590,48) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (591,24) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (591,52) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (595,47) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (597,21) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (597,40) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(588,10)
   remark #15523: loop was not vectorized: loop control variable b was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(590,48)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      remark #25478: While Loop Unrolled by 2  
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(596,10)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(596,10)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(596,10)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(596,10)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
LOOP END

    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(584,4):remark #34051: REGISTER ALLOCATION : [_ZN6SAMRAI4hier9IntVectordVERKS1_] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:584

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :      84
            Global    :      31
            Local     :      53
        Regenerable   :       1
        Spilled       :       5
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      40 bytes*
            Reads     :      10 [3.05e+00 ~ 1.6%]
            Writes    :      10 [3.05e+00 ~ 1.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::Index::operator-=(SAMRAI::hier::Index *, const SAMRAI::hier::Index &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::Index::operator-=(SAMRAI::hier::Index *, const SAMRAI::hier::Index &)) [92] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(265,4)
  -> INLINE: (267,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (267,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(267,42)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between this->d_index[i] (268:10) and rhs->d_index[i] (268:10)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(267,42)
<Remainder>
LOOP END

    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(265,4):remark #34051: REGISTER ALLOCATION : [_ZN6SAMRAI4hier5IndexmIERKS1_] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:265

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rsi rdi r8-r11]
        
    Routine temporaries
        Total         :      24
            Global    :      13
            Local     :      11
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FlowModelMPIHelperMaxMin::getMaxReciprocalOfQuantityWithInhomogeneousZDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::string *, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FlowModelMPIHelperMaxMin::getMaxReciprocalOfQuantityWithInhomogeneousZDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::string *, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &)) [93] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8751,1)
  -> (8752,23) std::vector<double, std::allocator<double>>::~vector(std::vector<double, std::allocator<double>> *)
  -> (8752,23) std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *)
  -> INLINE: (8754,45) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (8754,47) SAMRAI::hier::PatchHierarchy::getNumberOfLevels(const SAMRAI::hier::PatchHierarchy *) const
  -> INLINE: (8763,13) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (8765,26) std::shared_ptr<ExtendedFlattenedHierarchy>::shared_ptr<ExtendedFlattenedHierarchy>(std::shared_ptr<ExtendedFlattenedHierarchy> *, ExtendedFlattenedHierarchy *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (8765,26) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
  -> INLINE: (8767,15) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (8769,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (8769,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (8769,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8769,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (8769,9) std::operator<<<char, std::char_traits<char>, std::allocator<char>>(std::basic_ostream<char, std::char_traits<char>> &, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)
  -> (8769,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (8769,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (8769,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (8769,9) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> INLINE: (8769,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8769,9) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8769,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (8769,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (8769,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8769,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8769,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8775,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (8777,9) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8777,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8777,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (8777,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (8777,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8777,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (8777,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (8777,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (8777,9) std::operator<<<char, std::char_traits<char>, std::allocator<char>>(std::basic_ostream<char, std::char_traits<char>> &, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)
  -> (8777,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (8777,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (8777,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (8777,9) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> INLINE: (8777,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8777,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8777,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8783,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (8785,59) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (8789,33) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8790,58) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8805,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (8805,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(495,28) std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>> *, std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>>::size_type) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(495,28) std::shared_ptr<SAMRAI::hier::PatchLevel>::shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const std::shared_ptr<SAMRAI::hier::PatchLevel> &)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (8805,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (8812,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (8812,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (8816,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (8816,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (8816,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> INLINE: (8819,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
    -> /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(614,11) SAMRAI::hier::IntVector::operator/=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (8821,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (8823,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (8823,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (8824,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (8824,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (8824,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (8824,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (8824,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (8824,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (8825,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1222,10) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator++(std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8827,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8827,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (8827,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (8833,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (8833,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (8835,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (8842,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (8844,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (8844,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8844,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (8844,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (8844,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (8847,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8847,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8847,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(1133,28) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> (8847,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (8847,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (8860,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (8862,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (8862,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (8865,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (8865,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (8869,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (8869,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (8870,78) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (8870,80) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (8870,94) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (8872,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (8873,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (8874,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (8875,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (8876,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (8878,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (8879,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
  -> INLINE: (8879,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
  -> INLINE: (8879,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (8879,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (8880,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(186,13) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator++(std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(188,13) std::_List_const_iterator<SAMRAI::hier::Box>::operator++(std::_List_const_iterator<SAMRAI::hier::Box> *)
  -> INLINE: (8882,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,30) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator*(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,44) std::_List_const_iterator<SAMRAI::hier::Box>::operator*(const std::_List_const_iterator<SAMRAI::hier::Box> *) const
  -> (8884,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (8886,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (8887,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (8888,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (8890,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (8891,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
    -> /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(284,11) SAMRAI::hier::Index::operator-=(SAMRAI::hier::Index *, const SAMRAI::hier::Index &)
  -> INLINE: (8895,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (8896,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (8897,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (8898,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (8919,65) std::max<Real>(const Real &, const Real &)
  -> INLINE: (8931,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8931,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8931,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8932,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8948,5) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8789,33)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8789,33)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8789,33)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8789,33)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8789,33)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8789,33)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8792,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8792,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8792,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8792,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8792,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8792,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8814,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8824,21)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8879,25)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8900,21)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8902,25)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8904,29)
               remark #15542: loop was not vectorized: inner loop was already vectorized

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8915,33)
               <Peeled loop for vectorization, Multiversioned v1>
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8915,33)
               <Multiversioned v1>
                  remark #25228: Loop multiversioned for Data Dependence
                  remark #15300: LOOP WAS VECTORIZED
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8915,33)
               <Remainder loop for vectorization, Multiversioned v1>
                  remark #15301: REMAINDER LOOP WAS VECTORIZED
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8915,33)
               <Remainder loop for vectorization, Multiversioned v1>
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8915,33)
               <Multiversioned v2>
                  remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
                  remark #25439: unrolled with remainder by 2  
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8915,33)
               <Remainder, Multiversioned v2>
               LOOP END
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(759,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8931,13)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8798,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8812,36) ]
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable.h(780,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable.h(1642,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(749,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(749,7):remark #34026: call to memset implemented as a call to optimized library version
/home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8751,1):remark #34051: REGISTER ALLOCATION : [_ZN24FlowModelMPIHelperMaxMin53getMaxReciprocalOfQuantityWithInhomogeneousZDirectionESsiRKSt10shared_ptrIN6SAMRAI4hier15VariableContextEE] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp:8751

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   27[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm12]
        
    Routine temporaries
        Total         :    1223
            Global    :     312
            Local     :     911
        Regenerable   :     398
        Spilled       :      51
        
    Routine stack
        Variables     :    1378 bytes*
            Reads     :      95 [1.04e+01 ~ 0.5%]
            Writes    :     142 [3.31e+01 ~ 1.4%]
        Spills        :     368 bytes*
            Reads     :     165 [2.98e+01 ~ 1.3%]
            Writes    :      76 [8.39e+00 ~ 0.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FlowModelMPIHelperMaxMin::getMaxQuantityWithInhomogeneousZDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::vector<std::string, std::allocator<std::string>> &, const std::vector<int, std::allocator<int>> &, const std::shared_ptr<SAMRAI::hier::VariableContext> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FlowModelMPIHelperMaxMin::getMaxQuantityWithInhomogeneousZDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::vector<std::string, std::allocator<std::string>> &, const std::vector<int, std::allocator<int>> &, const std::shared_ptr<SAMRAI::hier::VariableContext> &)) [94] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8960,1)
  -> INLINE: (8961,58) std::vector<std::string, std::allocator<std::string>>::size(const std::vector<std::string, std::allocator<std::string>> *) const
  -> DELETED: (8965,23) std::allocator<bool>::~allocator(std::allocator<bool> *)
  -> (8965,54) std::vector<bool, std::allocator<bool>>::~vector(std::vector<bool, std::allocator<bool>> *)
  -> DELETED: (8965,54) std::allocator<bool>::~allocator(std::allocator<bool> *)
  -> (8965,54) std::vector<bool, std::allocator<bool>>::vector(std::vector<bool, std::allocator<bool>> *, std::vector<bool, std::allocator<bool>>::size_type, const bool &, const std::vector<bool, std::allocator<bool>>::allocator_type &)
  -> INLINE: (8965,54) std::allocator<bool>::allocator(std::allocator<bool> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (8967,5) std::vector<bool, std::allocator<bool>>::~vector(std::vector<bool, std::allocator<bool>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (8967,12) FlowModelMPIHelperMaxMin::getMaxQuantityWithInhomogeneousZDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::vector<std::string, std::allocator<std::string>> &, const std::vector<int, std::allocator<int>> &, const std::vector<bool, std::allocator<bool>> &, const std::shared_ptr<SAMRAI::hier::VariableContext> &)


    Report from: Code generation optimizations [cg]

/home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8960,1):remark #34051: REGISTER ALLOCATION : [_ZN24FlowModelMPIHelperMaxMin41getMaxQuantityWithInhomogeneousZDirectionERKSt6vectorISsSaISsEERKS0_IiSaIiEERKSt10shared_ptrIN6SAMRAI4hier15VariableContextEE] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp:8960

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rsi rdi r8-r9 r12-r15]
        
    Routine temporaries
        Total         :      49
            Global    :      13
            Local     :      36
        Regenerable   :       9
        Spilled       :       5
        
    Routine stack
        Variables     :      50 bytes*
            Reads     :       3 [1.00e+00 ~ 2.0%]
            Writes    :       3 [1.00e+00 ~ 2.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FlowModelMPIHelperMaxMin::getMaxQuantityWithInhomogeneousZDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::vector<std::string, std::allocator<std::string>> &, const std::vector<int, std::allocator<int>> &, const std::vector<bool, std::allocator<bool>> &, const std::shared_ptr<SAMRAI::hier::VariableContext> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FlowModelMPIHelperMaxMin::getMaxQuantityWithInhomogeneousZDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::vector<std::string, std::allocator<std::string>> &, const std::vector<int, std::allocator<int>> &, const std::vector<bool, std::allocator<bool>> &, const std::shared_ptr<SAMRAI::hier::VariableContext> &)) [95] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8984,1)
  -> INLINE: (8985,58) std::vector<std::string, std::allocator<std::string>>::size(const std::vector<std::string, std::allocator<std::string>> *) const
  -> (8990,23) std::vector<double, std::allocator<double>>::~vector(std::vector<double, std::allocator<double>> *)
  -> (8990,23) std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *)
  -> INLINE: (8992,45) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (8992,47) SAMRAI::hier::PatchHierarchy::getNumberOfLevels(const SAMRAI::hier::PatchHierarchy *) const
  -> INLINE: (9001,13) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (9003,26) std::shared_ptr<ExtendedFlattenedHierarchy>::shared_ptr<ExtendedFlattenedHierarchy>(std::shared_ptr<ExtendedFlattenedHierarchy> *, ExtendedFlattenedHierarchy *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (9003,26) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
  -> INLINE: (9005,15) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (9007,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (9007,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (9007,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9007,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (9007,9) std::operator<<<char, std::char_traits<char>, std::allocator<char>>(std::basic_ostream<char, std::char_traits<char>> &, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)
  -> (9007,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (9007,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (9007,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (9007,9) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> INLINE: (9007,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9007,9) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9007,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (9007,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (9007,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9007,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9007,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9013,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (9015,9) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9015,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9015,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (9015,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (9015,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9015,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (9015,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (9015,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (9015,9) std::operator<<<char, std::char_traits<char>, std::allocator<char>>(std::basic_ostream<char, std::char_traits<char>> &, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)
  -> (9015,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (9015,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (9015,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (9015,9) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> INLINE: (9015,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9015,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9015,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9021,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (9023,59) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (9027,22) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9028,41) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9043,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (9043,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (9043,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (9050,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (9050,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (9054,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (9054,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (9054,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (9057,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
  -> INLINE: (9059,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (9061,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (9061,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (9062,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (9062,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (9062,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (9062,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (9062,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (9062,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (9063,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (9065,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9065,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (9065,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (9071,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (9071,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (9073,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (9080,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (9082,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (9082,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9082,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (9082,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (9082,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (9087,25) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9087,25) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9087,79) std::vector<std::string, std::allocator<std::string>>::operator[](const std::vector<std::string, std::allocator<std::string>> *, std::vector<std::string, std::allocator<std::string>>::size_type) const
  -> (9087,85) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (9087,85) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (9087,85) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (9100,72) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::~vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> (9100,72) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> (9101,33) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::resize(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (9104,36) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (9104,41) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::operator=(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *, std::shared_ptr<SAMRAI::pdat::CellData<Real>> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9104,41) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9104,69) std::vector<std::string, std::allocator<std::string>>::operator[](const std::vector<std::string, std::allocator<std::string>> *, std::vector<std::string, std::allocator<std::string>>::size_type) const
  -> (9107,36) std::vector<Real *, std::allocator<Real *>>::~vector(std::vector<Real *, std::allocator<Real *>> *)
  -> (9107,36) std::vector<Real *, std::allocator<Real *>>::vector(std::vector<Real *, std::allocator<Real *>> *)
  -> INLINE: (9108,22) std::vector<Real *, std::allocator<Real *>>::resize(std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9111,25) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (9111,47) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (9111,51) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (9111,53) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (9111,81) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (9115,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (9115,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (9120,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (9120,42) ExtendedFlattenedHierarchy::getOverlappedVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> (9124,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (9124,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (9125,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (9125,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (9126,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (9126,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (9127,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (9127,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (9128,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (9128,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (9129,35) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (9130,35) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (9131,35) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (9132,38) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (9133,38) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (9137,76) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (9137,80) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (9137,82) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (9138,80) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (9138,84) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (9138,86) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (9138,100) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (9140,39) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9140,64) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (9141,39) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9141,64) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (9142,39) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9142,64) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (9143,42) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9143,71) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (9144,42) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9144,71) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (9147,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (9148,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (9148,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> INLINE: (9148,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (9148,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (9149,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (9151,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (9153,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (9155,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (9156,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (9157,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (9159,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (9160,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (9162,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (9163,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (9164,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (9165,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (9166,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (9167,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (9184,72) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (9185,42) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (9185,42) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> INLINE: (9185,76) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (9185,76) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (9186,41) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (9188,85) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (9190,70) SAMRAI::hier::Box::contains(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
  -> INLINE: (9208,102) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (9209,87) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (9209,113) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (9210,87) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (9210,113) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (9211,69) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (9213,59) std::vector<bool, std::allocator<bool>>::operator[](const std::vector<bool, std::allocator<bool>> *, std::vector<bool, std::allocator<bool>>::size_type) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9215,58) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (9219,58) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (9223,59) std::max<Real>(const Real &, const Real &)
  -> INLINE: (9235,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9235,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9235,13) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::~vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9235,13) std::vector<Real *, std::allocator<Real *>>::~vector(std::vector<Real *, std::allocator<Real *>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9235,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9235,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9235,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9235,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9235,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9236,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9252,5) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9030,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9030,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9030,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9030,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9030,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9030,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9052,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9084,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/4.8.5/bits/stl_pair.h(113,15) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9102,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9104,43) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9109,17)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between u_qi.u_qi.u_qi.u_qi (9111:25) and u_qi.u_qi.u_qi.u_qi[qi] (9111:25)
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9135,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9137,82) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9148,25)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9169,21)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9179,97) ]

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9171,25)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9179,97) ]

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9173,29)
            remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9179,97) ]

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9185,42)
               remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9200,33)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed ANTI dependence between num_ghosts_0_u_qi.num_ghosts_0_u_qi.num_ghosts_0_u_qi.num_ghosts (9211:69) and max_local[idx_fine] (9223:37)

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9206,37)
                  remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
                  remark #15346: vector dependence: assumed ANTI dependence between value (9215:45) and value (9215:45)
               LOOP END
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9235,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between __first->_M_refcount->_M_pi (545:2) and *__mem (68:6)
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(759,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9235,13)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9036,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9062,21)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9080,17) ]
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable.h(780,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable.h(1642,7):remark #34026: call to memset implemented as a call to optimized library version
/home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(8984,1):remark #34051: REGISTER ALLOCATION : [_ZN24FlowModelMPIHelperMaxMin41getMaxQuantityWithInhomogeneousZDirectionERKSt6vectorISsSaISsEERKS0_IiSaIiEERKS0_IbSaIbEERKSt10shared_ptrIN6SAMRAI4hier15VariableContextEE] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp:8984

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :    1317
            Global    :     337
            Local     :     980
        Regenerable   :     467
        Spilled       :      49
        
    Routine stack
        Variables     :    1642 bytes*
            Reads     :     119 [8.77e+01 ~ 0.7%]
            Writes    :     148 [3.31e+01 ~ 0.3%]
        Spills        :     352 bytes*
            Reads     :     115 [7.54e+02 ~ 6.1%]
            Writes    :      51 [2.09e+02 ~ 1.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Vector_base<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::~_Vector_base(std::_Vector_base<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(160,7):remark #34051: REGISTER ALLOCATION : [_ZNSt12_Vector_baseISt10shared_ptrIN6SAMRAI4pdat8CellDataIdEEESaIS5_EED1Ev] /usr/include/c++/4.8.5/bits/stl_vector.h:160

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :      10
            Global    :       7
            Local     :       3
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FlowModelMPIHelperMaxMin::getMinQuantityWithInhomogeneousZDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::string *, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FlowModelMPIHelperMaxMin::getMinQuantityWithInhomogeneousZDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::string *, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &)) [97] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9264,1)
  -> (9265,23) std::vector<double, std::allocator<double>>::~vector(std::vector<double, std::allocator<double>> *)
  -> (9265,23) std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *)
  -> INLINE: (9267,45) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (9267,47) SAMRAI::hier::PatchHierarchy::getNumberOfLevels(const SAMRAI::hier::PatchHierarchy *) const
  -> INLINE: (9276,13) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (9278,26) std::shared_ptr<ExtendedFlattenedHierarchy>::shared_ptr<ExtendedFlattenedHierarchy>(std::shared_ptr<ExtendedFlattenedHierarchy> *, ExtendedFlattenedHierarchy *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (9278,26) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
  -> INLINE: (9280,15) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (9282,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (9282,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (9282,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9282,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (9282,9) std::operator<<<char, std::char_traits<char>, std::allocator<char>>(std::basic_ostream<char, std::char_traits<char>> &, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)
  -> (9282,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (9282,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (9282,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (9282,9) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> INLINE: (9282,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9282,9) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9282,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (9282,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (9282,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9282,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9282,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9288,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (9290,9) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9290,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9290,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (9290,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (9290,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9290,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (9290,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (9290,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (9290,9) std::operator<<<char, std::char_traits<char>, std::allocator<char>>(std::basic_ostream<char, std::char_traits<char>> &, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)
  -> (9290,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (9290,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (9290,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (9290,9) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> INLINE: (9290,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9290,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9290,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9296,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (9298,59) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (9302,22) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9303,43) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9318,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (9318,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(495,28) std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>> *, std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>>::size_type) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(495,28) std::shared_ptr<SAMRAI::hier::PatchLevel>::shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const std::shared_ptr<SAMRAI::hier::PatchLevel> &)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (9318,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (9325,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (9325,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (9329,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (9329,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (9329,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> INLINE: (9332,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
    -> /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(614,11) SAMRAI::hier::IntVector::operator/=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (9334,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (9336,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (9336,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (9337,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (9337,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (9337,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (9337,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (9337,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (9337,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (9338,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1222,10) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator++(std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9340,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9340,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (9340,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (9346,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (9346,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (9348,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (9355,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (9357,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (9357,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9357,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (9357,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (9357,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (9360,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9360,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9360,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(1133,28) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> (9360,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (9360,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (9373,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (9375,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (9375,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (9378,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (9378,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (9382,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (9382,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (9383,78) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (9383,80) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (9383,94) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (9385,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (9386,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (9387,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (9388,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (9389,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (9391,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (9392,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
  -> INLINE: (9392,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
  -> INLINE: (9392,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (9392,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (9393,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(186,13) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator++(std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(188,13) std::_List_const_iterator<SAMRAI::hier::Box>::operator++(std::_List_const_iterator<SAMRAI::hier::Box> *)
  -> INLINE: (9395,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,30) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator*(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,44) std::_List_const_iterator<SAMRAI::hier::Box>::operator*(const std::_List_const_iterator<SAMRAI::hier::Box> *) const
  -> (9397,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (9399,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (9400,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (9401,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (9403,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (9404,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
    -> /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(284,11) SAMRAI::hier::Index::operator-=(SAMRAI::hier::Index *, const SAMRAI::hier::Index &)
  -> INLINE: (9408,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (9409,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (9410,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (9411,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (9432,61) std::min<Real>(const Real &, const Real &)
  -> INLINE: (9444,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9444,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9444,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9445,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9461,5) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9302,22)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9302,22)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9302,22)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9302,22)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9302,22)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9302,22)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9305,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9305,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9305,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9305,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9305,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9305,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9327,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9337,21)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9392,25)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9413,21)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9415,25)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9417,29)
               remark #15542: loop was not vectorized: inner loop was already vectorized

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9428,33)
               <Peeled loop for vectorization, Multiversioned v1>
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9428,33)
               <Multiversioned v1>
                  remark #25228: Loop multiversioned for Data Dependence
                  remark #15300: LOOP WAS VECTORIZED
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9428,33)
               <Remainder loop for vectorization, Multiversioned v1>
                  remark #15301: REMAINDER LOOP WAS VECTORIZED
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9428,33)
               <Remainder loop for vectorization, Multiversioned v1>
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9428,33)
               <Multiversioned v2>
                  remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
                  remark #25439: unrolled with remainder by 2  
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9428,33)
               <Remainder, Multiversioned v2>
               LOOP END
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(759,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9444,13)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9311,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9325,36) ]
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable.h(780,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable.h(1642,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(749,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(749,7):remark #34026: call to memset implemented as a call to optimized library version
/home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9264,1):remark #34051: REGISTER ALLOCATION : [_ZN24FlowModelMPIHelperMaxMin41getMinQuantityWithInhomogeneousZDirectionESsiRKSt10shared_ptrIN6SAMRAI4hier15VariableContextEE] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp:9264

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :    1212
            Global    :     311
            Local     :     901
        Regenerable   :     397
        Spilled       :      51
        
    Routine stack
        Variables     :    1378 bytes*
            Reads     :      95 [1.04e+01 ~ 0.5%]
            Writes    :     142 [3.31e+01 ~ 1.7%]
        Spills        :     368 bytes*
            Reads     :     168 [2.98e+01 ~ 1.5%]
            Writes    :      79 [8.39e+00 ~ 0.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FlowModelMPIHelperMaxMin::getMinReciprocalOfQuantityWithInhomogeneousZDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::string *, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FlowModelMPIHelperMaxMin::getMinReciprocalOfQuantityWithInhomogeneousZDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::string *, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &)) [98] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9473,1)
  -> (9474,23) std::vector<double, std::allocator<double>>::~vector(std::vector<double, std::allocator<double>> *)
  -> (9474,23) std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *)
  -> INLINE: (9476,45) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (9476,47) SAMRAI::hier::PatchHierarchy::getNumberOfLevels(const SAMRAI::hier::PatchHierarchy *) const
  -> INLINE: (9485,13) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (9487,26) std::shared_ptr<ExtendedFlattenedHierarchy>::shared_ptr<ExtendedFlattenedHierarchy>(std::shared_ptr<ExtendedFlattenedHierarchy> *, ExtendedFlattenedHierarchy *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (9487,26) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
  -> INLINE: (9489,15) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (9491,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (9491,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (9491,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9491,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (9491,9) std::operator<<<char, std::char_traits<char>, std::allocator<char>>(std::basic_ostream<char, std::char_traits<char>> &, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)
  -> (9491,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (9491,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (9491,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (9491,9) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> INLINE: (9491,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9491,9) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9491,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (9491,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (9491,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9491,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9491,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9497,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (9499,9) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9499,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9499,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (9499,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (9499,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9499,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (9499,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (9499,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (9499,9) std::operator<<<char, std::char_traits<char>, std::allocator<char>>(std::basic_ostream<char, std::char_traits<char>> &, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)
  -> (9499,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (9499,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (9499,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (9499,9) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> INLINE: (9499,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9499,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9499,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9505,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (9507,59) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (9511,33) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9512,58) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9527,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (9527,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(495,28) std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>> *, std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>>::size_type) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(495,28) std::shared_ptr<SAMRAI::hier::PatchLevel>::shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const std::shared_ptr<SAMRAI::hier::PatchLevel> &)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (9527,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (9534,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (9534,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (9538,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (9538,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (9538,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> INLINE: (9541,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
    -> /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(614,11) SAMRAI::hier::IntVector::operator/=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (9543,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (9545,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (9545,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (9546,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (9546,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (9546,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (9546,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (9546,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (9546,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (9547,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1222,10) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator++(std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9549,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9549,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (9549,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (9555,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (9555,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (9557,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (9564,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (9566,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (9566,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9566,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (9566,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (9566,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (9569,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9569,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9569,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(1133,28) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> (9569,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (9569,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (9582,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (9584,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (9584,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (9587,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (9587,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (9591,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (9591,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (9592,78) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (9592,80) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (9592,94) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (9594,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (9595,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (9596,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (9597,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (9598,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (9600,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (9601,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
  -> INLINE: (9601,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
  -> INLINE: (9601,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (9601,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (9602,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(186,13) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator++(std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(188,13) std::_List_const_iterator<SAMRAI::hier::Box>::operator++(std::_List_const_iterator<SAMRAI::hier::Box> *)
  -> INLINE: (9604,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,30) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator*(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,44) std::_List_const_iterator<SAMRAI::hier::Box>::operator*(const std::_List_const_iterator<SAMRAI::hier::Box> *) const
  -> (9606,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (9608,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (9609,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (9610,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (9612,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (9613,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
    -> /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(284,11) SAMRAI::hier::Index::operator-=(SAMRAI::hier::Index *, const SAMRAI::hier::Index &)
  -> INLINE: (9617,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (9618,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (9619,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (9620,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (9641,65) std::min<Real>(const Real &, const Real &)
  -> INLINE: (9653,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9653,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9653,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9654,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9670,5) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9511,33)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9511,33)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9511,33)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9511,33)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9511,33)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9511,33)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9514,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9514,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9514,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9514,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9514,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9514,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9536,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9546,21)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9601,25)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9622,21)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9624,25)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9626,29)
               remark #15542: loop was not vectorized: inner loop was already vectorized

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9637,33)
               <Peeled loop for vectorization, Multiversioned v1>
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9637,33)
               <Multiversioned v1>
                  remark #25228: Loop multiversioned for Data Dependence
                  remark #15300: LOOP WAS VECTORIZED
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9637,33)
               <Remainder loop for vectorization, Multiversioned v1>
                  remark #15301: REMAINDER LOOP WAS VECTORIZED
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9637,33)
               <Remainder loop for vectorization, Multiversioned v1>
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9637,33)
               <Multiversioned v2>
                  remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
                  remark #25439: unrolled with remainder by 2  
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9637,33)
               <Remainder, Multiversioned v2>
               LOOP END
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(759,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9653,13)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9520,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9534,36) ]
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable.h(780,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable.h(1642,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(749,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(749,7):remark #34026: call to memset implemented as a call to optimized library version
/home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9473,1):remark #34051: REGISTER ALLOCATION : [_ZN24FlowModelMPIHelperMaxMin53getMinReciprocalOfQuantityWithInhomogeneousZDirectionESsiRKSt10shared_ptrIN6SAMRAI4hier15VariableContextEE] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp:9473

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   27[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm12]
        
    Routine temporaries
        Total         :    1223
            Global    :     312
            Local     :     911
        Regenerable   :     398
        Spilled       :      51
        
    Routine stack
        Variables     :    1378 bytes*
            Reads     :      95 [1.04e+01 ~ 0.5%]
            Writes    :     142 [3.31e+01 ~ 1.4%]
        Spills        :     368 bytes*
            Reads     :     165 [2.98e+01 ~ 1.3%]
            Writes    :      76 [8.39e+00 ~ 0.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FlowModelMPIHelperMaxMin::getMinQuantityWithInhomogeneousZDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::vector<std::string, std::allocator<std::string>> &, const std::vector<int, std::allocator<int>> &, const std::shared_ptr<SAMRAI::hier::VariableContext> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FlowModelMPIHelperMaxMin::getMinQuantityWithInhomogeneousZDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::vector<std::string, std::allocator<std::string>> &, const std::vector<int, std::allocator<int>> &, const std::shared_ptr<SAMRAI::hier::VariableContext> &)) [99] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9682,1)
  -> INLINE: (9683,58) std::vector<std::string, std::allocator<std::string>>::size(const std::vector<std::string, std::allocator<std::string>> *) const
  -> DELETED: (9687,23) std::allocator<bool>::~allocator(std::allocator<bool> *)
  -> (9687,54) std::vector<bool, std::allocator<bool>>::~vector(std::vector<bool, std::allocator<bool>> *)
  -> DELETED: (9687,54) std::allocator<bool>::~allocator(std::allocator<bool> *)
  -> (9687,54) std::vector<bool, std::allocator<bool>>::vector(std::vector<bool, std::allocator<bool>> *, std::vector<bool, std::allocator<bool>>::size_type, const bool &, const std::vector<bool, std::allocator<bool>>::allocator_type &)
  -> INLINE: (9687,54) std::allocator<bool>::allocator(std::allocator<bool> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9689,5) std::vector<bool, std::allocator<bool>>::~vector(std::vector<bool, std::allocator<bool>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (9689,12) FlowModelMPIHelperMaxMin::getMinQuantityWithInhomogeneousZDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::vector<std::string, std::allocator<std::string>> &, const std::vector<int, std::allocator<int>> &, const std::vector<bool, std::allocator<bool>> &, const std::shared_ptr<SAMRAI::hier::VariableContext> &)


    Report from: Code generation optimizations [cg]

/home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9682,1):remark #34051: REGISTER ALLOCATION : [_ZN24FlowModelMPIHelperMaxMin41getMinQuantityWithInhomogeneousZDirectionERKSt6vectorISsSaISsEERKS0_IiSaIiEERKSt10shared_ptrIN6SAMRAI4hier15VariableContextEE] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp:9682

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rsi rdi r8-r9 r12-r15]
        
    Routine temporaries
        Total         :      49
            Global    :      13
            Local     :      36
        Regenerable   :       9
        Spilled       :       5
        
    Routine stack
        Variables     :      50 bytes*
            Reads     :       3 [1.00e+00 ~ 2.0%]
            Writes    :       3 [1.00e+00 ~ 2.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FlowModelMPIHelperMaxMin::getMinQuantityWithInhomogeneousZDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::vector<std::string, std::allocator<std::string>> &, const std::vector<int, std::allocator<int>> &, const std::vector<bool, std::allocator<bool>> &, const std::shared_ptr<SAMRAI::hier::VariableContext> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FlowModelMPIHelperMaxMin::getMinQuantityWithInhomogeneousZDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::vector<std::string, std::allocator<std::string>> &, const std::vector<int, std::allocator<int>> &, const std::vector<bool, std::allocator<bool>> &, const std::shared_ptr<SAMRAI::hier::VariableContext> &)) [100] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9706,1)
  -> INLINE: (9707,58) std::vector<std::string, std::allocator<std::string>>::size(const std::vector<std::string, std::allocator<std::string>> *) const
  -> (9712,23) std::vector<double, std::allocator<double>>::~vector(std::vector<double, std::allocator<double>> *)
  -> (9712,23) std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *)
  -> INLINE: (9714,45) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (9714,47) SAMRAI::hier::PatchHierarchy::getNumberOfLevels(const SAMRAI::hier::PatchHierarchy *) const
  -> INLINE: (9723,13) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (9725,26) std::shared_ptr<ExtendedFlattenedHierarchy>::shared_ptr<ExtendedFlattenedHierarchy>(std::shared_ptr<ExtendedFlattenedHierarchy> *, ExtendedFlattenedHierarchy *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (9725,26) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
  -> INLINE: (9727,15) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (9729,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (9729,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (9729,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9729,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (9729,9) std::operator<<<char, std::char_traits<char>, std::allocator<char>>(std::basic_ostream<char, std::char_traits<char>> &, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)
  -> (9729,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (9729,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (9729,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (9729,9) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> INLINE: (9729,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9729,9) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9729,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (9729,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (9729,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9729,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9729,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9735,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (9737,9) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9737,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9737,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (9737,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (9737,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9737,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (9737,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (9737,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (9737,9) std::operator<<<char, std::char_traits<char>, std::allocator<char>>(std::basic_ostream<char, std::char_traits<char>> &, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)
  -> (9737,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (9737,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (9737,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (9737,9) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> INLINE: (9737,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9737,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9737,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9743,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (9745,59) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (9749,22) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9750,41) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9765,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (9765,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (9765,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (9772,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (9772,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (9776,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (9776,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (9776,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (9779,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
  -> INLINE: (9781,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (9783,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (9783,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (9784,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (9784,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (9784,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (9784,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (9784,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (9784,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (9785,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (9787,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9787,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (9787,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (9793,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (9793,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (9795,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (9802,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (9804,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (9804,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9804,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (9804,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (9804,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (9809,25) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9809,25) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9809,79) std::vector<std::string, std::allocator<std::string>>::operator[](const std::vector<std::string, std::allocator<std::string>> *, std::vector<std::string, std::allocator<std::string>>::size_type) const
  -> (9809,85) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (9809,85) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (9809,85) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (9822,72) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::~vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> (9822,72) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
  -> (9823,33) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::resize(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (9826,36) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (9826,41) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::operator=(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *, std::shared_ptr<SAMRAI::pdat::CellData<Real>> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9826,41) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9826,69) std::vector<std::string, std::allocator<std::string>>::operator[](const std::vector<std::string, std::allocator<std::string>> *, std::vector<std::string, std::allocator<std::string>>::size_type) const
  -> (9829,36) std::vector<Real *, std::allocator<Real *>>::~vector(std::vector<Real *, std::allocator<Real *>> *)
  -> (9829,36) std::vector<Real *, std::allocator<Real *>>::vector(std::vector<Real *, std::allocator<Real *>> *)
  -> INLINE: (9830,22) std::vector<Real *, std::allocator<Real *>>::resize(std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9833,25) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (9833,47) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (9833,51) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (9833,53) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (9833,81) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (9837,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (9837,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (9842,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (9842,42) ExtendedFlattenedHierarchy::getOverlappedVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> (9846,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (9846,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (9847,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (9847,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (9848,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (9848,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (9849,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (9849,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (9850,34) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
  -> (9850,34) std::vector<int, std::allocator<int>>::vector(std::vector<int, std::allocator<int>> *)
  -> (9851,35) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (9852,35) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (9853,35) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (9854,38) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (9855,38) std::vector<int, std::allocator<int>>::reserve(std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (9859,76) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (9859,80) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (9859,82) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (9860,80) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::operator[](std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::size_type)
  -> INLINE: (9860,84) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (9860,86) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (9860,100) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (9862,39) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9862,64) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (9863,39) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9863,64) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (9864,39) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9864,64) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (9865,42) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9865,71) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (9866,42) std::vector<int, std::allocator<int>>::push_back(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9866,71) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (9869,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (9870,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (9870,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> INLINE: (9870,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (9870,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (9871,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (9873,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (9875,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (9877,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (9878,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (9879,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (9881,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (9882,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (9884,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (9885,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (9886,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (9887,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (9888,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (9889,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (9906,72) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (9907,42) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (9907,42) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> INLINE: (9907,76) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (9907,76) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (9908,41) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (9910,85) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (9912,70) SAMRAI::hier::Box::contains(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
  -> INLINE: (9930,102) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (9931,87) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (9931,113) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (9932,87) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (9932,113) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (9933,69) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (9935,59) std::vector<bool, std::allocator<bool>>::operator[](const std::vector<bool, std::allocator<bool>> *, std::vector<bool, std::allocator<bool>>::size_type) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9937,58) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (9941,58) std::vector<Real *, std::allocator<Real *>>::operator[](std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)
  -> INLINE: (9945,59) std::min<Real>(const Real &, const Real &)
  -> INLINE: (9957,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9957,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9957,13) std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::~vector(std::vector<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9957,13) std::vector<Real *, std::allocator<Real *>>::~vector(std::vector<Real *, std::allocator<Real *>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9957,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9957,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9957,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9957,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9957,13) std::vector<int, std::allocator<int>>::~vector(std::vector<int, std::allocator<int>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9958,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (9974,5) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9752,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9752,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9752,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9752,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9752,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9752,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9774,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9806,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/4.8.5/bits/stl_pair.h(113,15) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9824,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9826,43) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9831,17)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between u_qi.u_qi.u_qi.u_qi (9833:25) and u_qi.u_qi.u_qi.u_qi[qi] (9833:25)
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9857,17)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9859,82) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9870,25)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9891,21)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9901,97) ]

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9893,25)
         remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9901,97) ]

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9895,29)
            remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9901,97) ]

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9907,42)
               remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9922,33)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed ANTI dependence between num_ghosts_0_u_qi.num_ghosts_0_u_qi.num_ghosts_0_u_qi.num_ghosts (9933:69) and min_local[idx_fine] (9945:37)

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9928,37)
                  remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
                  remark #15346: vector dependence: assumed ANTI dependence between value (9937:45) and value (9937:45)
               LOOP END
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9957,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between __first->_M_refcount->_M_pi (545:2) and *__mem (68:6)
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(759,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9957,13)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9758,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9784,21)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9802,17) ]
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable.h(780,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable.h(1642,7):remark #34026: call to memset implemented as a call to optimized library version
/home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9706,1):remark #34051: REGISTER ALLOCATION : [_ZN24FlowModelMPIHelperMaxMin41getMinQuantityWithInhomogeneousZDirectionERKSt6vectorISsSaISsEERKS0_IiSaIiEERKS0_IbSaIbEERKSt10shared_ptrIN6SAMRAI4hier15VariableContextEE] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp:9706

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :    1317
            Global    :     337
            Local     :     980
        Regenerable   :     467
        Spilled       :      49
        
    Routine stack
        Variables     :    1642 bytes*
            Reads     :     119 [8.77e+01 ~ 0.7%]
            Writes    :     148 [3.31e+01 ~ 0.3%]
        Spills        :     352 bytes*
            Reads     :     115 [7.54e+02 ~ 6.1%]
            Writes    :      51 [2.09e+02 ~ 1.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FlowModelMPIHelperMaxMin::getMaxLocationWithinQuantityBoundsInXDirection(FlowModelMPIHelperMaxMin *, const std::string *, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &, Real, Real)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FlowModelMPIHelperMaxMin::getMaxLocationWithinQuantityBoundsInXDirection(FlowModelMPIHelperMaxMin *, const std::string *, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &, Real, Real)) [101] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9988,1)
  -> INLINE: (9991,45) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (9991,47) SAMRAI::hier::PatchHierarchy::getNumberOfLevels(const SAMRAI::hier::PatchHierarchy *) const
  -> INLINE: (10000,13) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (10002,26) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
  -> INLINE: (10002,26) std::shared_ptr<ExtendedFlattenedHierarchy>::shared_ptr<ExtendedFlattenedHierarchy>(std::shared_ptr<ExtendedFlattenedHierarchy> *, ExtendedFlattenedHierarchy *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10008,41) std::__shared_ptr<SAMRAI::geom::CartesianGridGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianGridGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10008,43) SAMRAI::geom::CartesianGridGeometry::getXLower(const SAMRAI::geom::CartesianGridGeometry *) const
  -> INLINE: (10010,15) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (10024,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (10024,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (10024,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (10026,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (10026,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (10027,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (10027,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (10027,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10027,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (10027,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (10027,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (10028,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (10030,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10030,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (10030,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (10036,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10036,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (10038,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (10040,71) std::shared_ptr<SAMRAI::hier::PatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10041,21) std::static_pointer_cast<SAMRAI::geom::CartesianPatchGeometry, SAMRAI::hier::PatchGeometry>(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *, const std::shared_ptr<SAMRAI::hier::PatchGeometry> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (10041,21) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
  -> INLINE: (10042,30) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> (10042,32) SAMRAI::hier::Patch::getPatchGeometry(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const SAMRAI::hier::Patch *) const
  -> INLINE: (10044,52) std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10044,54) SAMRAI::geom::CartesianPatchGeometry::getDx(const SAMRAI::geom::CartesianPatchGeometry *) const
  -> INLINE: (10046,60) std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10046,62) SAMRAI::geom::CartesianPatchGeometry::getXLower(const SAMRAI::geom::CartesianPatchGeometry *) const
  -> INLINE: (10053,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (10055,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (10055,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10055,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (10055,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (10055,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (10058,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10058,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (10058,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (10058,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (10058,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (10071,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (10073,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10073,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (10076,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (10076,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (10080,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10080,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (10082,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (10084,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (10085,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (10085,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (10085,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (10085,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (10086,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (10088,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (10090,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (10092,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (10094,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (10095,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (10097,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (10124,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10124,13) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10124,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10124,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10125,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10138,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (10152,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (10152,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (10152,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (10154,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (10154,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (10155,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (10155,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (10155,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10155,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (10155,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (10155,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (10156,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (10158,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10158,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (10158,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (10164,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10164,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (10166,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (10168,71) std::shared_ptr<SAMRAI::hier::PatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10169,21) std::static_pointer_cast<SAMRAI::geom::CartesianPatchGeometry, SAMRAI::hier::PatchGeometry>(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *, const std::shared_ptr<SAMRAI::hier::PatchGeometry> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (10169,21) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
  -> INLINE: (10170,30) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> (10170,32) SAMRAI::hier::Patch::getPatchGeometry(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const SAMRAI::hier::Patch *) const
  -> INLINE: (10172,52) std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10172,54) SAMRAI::geom::CartesianPatchGeometry::getDx(const SAMRAI::geom::CartesianPatchGeometry *) const
  -> INLINE: (10174,60) std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10174,62) SAMRAI::geom::CartesianPatchGeometry::getXLower(const SAMRAI::geom::CartesianPatchGeometry *) const
  -> INLINE: (10181,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (10183,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (10183,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10183,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (10183,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (10183,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (10186,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10186,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (10186,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (10186,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (10186,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (10199,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (10201,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10201,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (10204,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (10204,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (10208,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10208,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (10209,78) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10209,80) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (10209,94) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (10211,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (10212,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (10213,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (10215,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (10216,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (10216,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (10216,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (10216,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (10217,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (10219,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (10221,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (10223,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (10224,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (10226,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (10227,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (10229,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (10230,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (10261,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10261,13) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10261,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10261,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10262,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10275,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (10289,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (10289,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (10289,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (10291,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (10291,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (10292,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (10292,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (10292,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10292,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (10292,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (10292,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (10293,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (10295,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10295,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (10295,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (10301,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10301,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (10303,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (10305,71) std::shared_ptr<SAMRAI::hier::PatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10306,21) std::static_pointer_cast<SAMRAI::geom::CartesianPatchGeometry, SAMRAI::hier::PatchGeometry>(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *, const std::shared_ptr<SAMRAI::hier::PatchGeometry> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (10306,21) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
  -> INLINE: (10307,30) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> (10307,32) SAMRAI::hier::Patch::getPatchGeometry(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const SAMRAI::hier::Patch *) const
  -> INLINE: (10309,52) std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10309,54) SAMRAI::geom::CartesianPatchGeometry::getDx(const SAMRAI::geom::CartesianPatchGeometry *) const
  -> INLINE: (10311,60) std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10311,62) SAMRAI::geom::CartesianPatchGeometry::getXLower(const SAMRAI::geom::CartesianPatchGeometry *) const
  -> INLINE: (10318,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (10320,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (10320,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10320,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (10320,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (10320,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (10323,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10323,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (10323,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (10323,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (10323,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (10336,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (10338,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10338,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (10341,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (10341,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (10345,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10345,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (10346,78) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10346,80) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (10346,94) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (10348,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (10349,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (10350,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (10351,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (10352,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (10354,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (10355,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (10355,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (10355,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (10355,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (10356,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (10358,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (10360,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (10362,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (10363,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (10364,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (10366,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (10367,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (10369,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (10370,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (10371,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (10407,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10407,13) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10407,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10407,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10408,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10422,5) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10027,21)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10085,25)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10099,21)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed ANTI dependence between *x_lo_patch (10107:96) and location_x_max_local (10111:29)
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10099,21)
      <Remainder>
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(759,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10124,13)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10155,21)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10216,25)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10232,21)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed ANTI dependence between *x_lo_patch (10243:100) and location_x_max_local (10247:33)

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10234,25)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed ANTI dependence between *x_lo_patch (10243:100) and location_x_max_local (10247:33)
            remark #25439: unrolled with remainder by 2  
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10234,25)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10292,21)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10355,25)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10373,21)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed ANTI dependence between *x_lo_patch (10388:104) and location_x_max_local (10392:37)

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10375,25)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed ANTI dependence between *x_lo_patch (10388:104) and location_x_max_local (10392:37)

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10377,29)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed ANTI dependence between *x_lo_patch (10388:104) and location_x_max_local (10392:37)
               remark #25439: unrolled with remainder by 2  
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10377,29)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10017,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10026,61) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10145,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10154,61) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10282,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10291,61) ]
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable.h(1642,7):remark #34026: call to memset implemented as a call to optimized library version
/home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(9988,1):remark #34051: REGISTER ALLOCATION : [_ZN24FlowModelMPIHelperMaxMin46getMaxLocationWithinQuantityBoundsInXDirectionESsiRKSt10shared_ptrIN6SAMRAI4hier15VariableContextEEdd] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp:9988

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   23[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :    1195
            Global    :     293
            Local     :     902
        Regenerable   :     389
        Spilled       :      38
        
    Routine stack
        Variables     :    1416 bytes*
            Reads     :     117 [1.15e+03 ~ 2.4%]
            Writes    :      71 [7.96e+02 ~ 1.7%]
        Spills        :     256 bytes*
            Reads     :      95 [1.28e+03 ~ 2.7%]
            Writes    :      44 [3.04e+02 ~ 0.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::Patch::getPatchGeometry(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const SAMRAI::hier::Patch *) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::Patch::getPatchGeometry(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const SAMRAI::hier::Patch *) const) [102] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Patch.h(345,4)
  -> INLINE: (346,14) std::shared_ptr<SAMRAI::hier::PatchGeometry>::shared_ptr(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const std::shared_ptr<SAMRAI::hier::PatchGeometry> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/Patch.h(345,4):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4hier5Patch16getPatchGeometryEv] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Patch.h:345

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rdx rsi rdi]
        
    Routine temporaries
        Total         :      15
            Global    :       8
            Local     :       7
        Regenerable   :       2
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr.h(93,11):remark #34051: REGISTER ALLOCATION : [_ZNSt10shared_ptrIN6SAMRAI4geom22CartesianPatchGeometryEED1Ev] /usr/include/c++/4.8.5/bits/shared_ptr.h:93

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rdi r12-r13]
        
    Routine temporaries
        Total         :      24
            Global    :      12
            Local     :      12
        Regenerable   :       3
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FlowModelMPIHelperMaxMin::getMinLocationWithinQuantityBoundsInXDirection(FlowModelMPIHelperMaxMin *, const std::string *, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &, Real, Real)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FlowModelMPIHelperMaxMin::getMinLocationWithinQuantityBoundsInXDirection(FlowModelMPIHelperMaxMin *, const std::string *, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &, Real, Real)) [104] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10436,1)
  -> INLINE: (10439,45) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10439,47) SAMRAI::hier::PatchHierarchy::getNumberOfLevels(const SAMRAI::hier::PatchHierarchy *) const
  -> INLINE: (10448,13) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (10450,26) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
  -> INLINE: (10450,26) std::shared_ptr<ExtendedFlattenedHierarchy>::shared_ptr<ExtendedFlattenedHierarchy>(std::shared_ptr<ExtendedFlattenedHierarchy> *, ExtendedFlattenedHierarchy *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10456,41) std::__shared_ptr<SAMRAI::geom::CartesianGridGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianGridGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10456,43) SAMRAI::geom::CartesianGridGeometry::getXUpper(const SAMRAI::geom::CartesianGridGeometry *) const
  -> INLINE: (10458,15) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (10472,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (10472,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (10472,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (10474,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (10474,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (10475,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (10475,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (10475,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10475,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (10475,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (10475,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (10476,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (10478,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10478,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (10478,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (10484,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10484,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (10486,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (10488,71) std::shared_ptr<SAMRAI::hier::PatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10489,21) std::static_pointer_cast<SAMRAI::geom::CartesianPatchGeometry, SAMRAI::hier::PatchGeometry>(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *, const std::shared_ptr<SAMRAI::hier::PatchGeometry> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (10489,21) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
  -> INLINE: (10490,30) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> (10490,32) SAMRAI::hier::Patch::getPatchGeometry(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const SAMRAI::hier::Patch *) const
  -> INLINE: (10492,52) std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10492,54) SAMRAI::geom::CartesianPatchGeometry::getDx(const SAMRAI::geom::CartesianPatchGeometry *) const
  -> INLINE: (10494,60) std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10494,62) SAMRAI::geom::CartesianPatchGeometry::getXLower(const SAMRAI::geom::CartesianPatchGeometry *) const
  -> INLINE: (10501,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (10503,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (10503,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10503,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (10503,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (10503,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (10506,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10506,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (10506,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (10506,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (10506,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (10519,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (10521,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10521,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (10524,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (10524,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (10528,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10528,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (10530,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (10532,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (10533,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (10533,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (10533,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (10533,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (10534,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (10536,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (10538,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (10540,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (10542,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (10543,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (10545,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (10572,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10572,13) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10572,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10572,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10573,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10586,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (10600,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (10600,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (10600,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (10602,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (10602,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (10603,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (10603,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (10603,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10603,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (10603,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (10603,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (10604,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (10606,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10606,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (10606,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (10612,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10612,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (10614,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (10616,71) std::shared_ptr<SAMRAI::hier::PatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10617,21) std::static_pointer_cast<SAMRAI::geom::CartesianPatchGeometry, SAMRAI::hier::PatchGeometry>(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *, const std::shared_ptr<SAMRAI::hier::PatchGeometry> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (10617,21) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
  -> INLINE: (10618,30) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> (10618,32) SAMRAI::hier::Patch::getPatchGeometry(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const SAMRAI::hier::Patch *) const
  -> INLINE: (10620,52) std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10620,54) SAMRAI::geom::CartesianPatchGeometry::getDx(const SAMRAI::geom::CartesianPatchGeometry *) const
  -> INLINE: (10622,60) std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10622,62) SAMRAI::geom::CartesianPatchGeometry::getXLower(const SAMRAI::geom::CartesianPatchGeometry *) const
  -> INLINE: (10629,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (10631,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (10631,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10631,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (10631,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (10631,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (10634,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10634,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (10634,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (10634,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (10634,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (10647,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (10649,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10649,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (10652,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (10652,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (10656,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10656,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (10657,78) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10657,80) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (10657,94) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (10659,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (10660,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (10661,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (10663,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (10664,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (10664,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (10664,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (10664,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (10665,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (10667,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (10669,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (10671,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (10672,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (10674,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (10675,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (10677,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (10678,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (10709,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10709,13) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10709,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10709,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10710,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10723,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (10737,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (10737,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (10737,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (10739,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (10739,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (10740,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (10740,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (10740,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10740,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (10740,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (10740,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (10741,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (10743,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10743,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (10743,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (10749,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10749,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (10751,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (10753,71) std::shared_ptr<SAMRAI::hier::PatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10754,21) std::static_pointer_cast<SAMRAI::geom::CartesianPatchGeometry, SAMRAI::hier::PatchGeometry>(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *, const std::shared_ptr<SAMRAI::hier::PatchGeometry> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (10754,21) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
  -> INLINE: (10755,30) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> (10755,32) SAMRAI::hier::Patch::getPatchGeometry(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const SAMRAI::hier::Patch *) const
  -> INLINE: (10757,52) std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10757,54) SAMRAI::geom::CartesianPatchGeometry::getDx(const SAMRAI::geom::CartesianPatchGeometry *) const
  -> INLINE: (10759,60) std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10759,62) SAMRAI::geom::CartesianPatchGeometry::getXLower(const SAMRAI::geom::CartesianPatchGeometry *) const
  -> INLINE: (10766,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (10768,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (10768,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10768,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (10768,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (10768,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (10771,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10771,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (10771,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (10771,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (10771,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (10784,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (10786,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10786,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (10789,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (10789,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (10793,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10793,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (10794,78) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10794,80) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (10794,94) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (10796,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (10797,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (10798,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (10799,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (10800,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (10802,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (10803,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (10803,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (10803,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (10803,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (10804,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (10806,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (10808,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (10810,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (10811,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (10812,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (10814,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (10815,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (10817,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (10818,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (10819,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (10855,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10855,13) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10855,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10855,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10856,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10870,5) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10475,21)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10533,25)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10547,21)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed ANTI dependence between *x_lo_patch (10555:96) and location_x_min_local (10559:29)
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10547,21)
      <Remainder>
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(759,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10572,13)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10603,21)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10664,25)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10680,21)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed ANTI dependence between *x_lo_patch (10691:100) and location_x_min_local (10695:33)

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10682,25)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed ANTI dependence between *x_lo_patch (10691:100) and location_x_min_local (10695:33)
            remark #25439: unrolled with remainder by 2  
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10682,25)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10740,21)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10803,25)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10821,21)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed ANTI dependence between *x_lo_patch (10836:104) and location_x_min_local (10840:37)

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10823,25)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed ANTI dependence between *x_lo_patch (10836:104) and location_x_min_local (10840:37)

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10825,29)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed ANTI dependence between *x_lo_patch (10836:104) and location_x_min_local (10840:37)
               remark #25439: unrolled with remainder by 2  
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10825,29)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10465,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10474,61) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10593,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10602,61) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10730,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10739,61) ]
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable.h(1642,7):remark #34026: call to memset implemented as a call to optimized library version
/home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10436,1):remark #34051: REGISTER ALLOCATION : [_ZN24FlowModelMPIHelperMaxMin46getMinLocationWithinQuantityBoundsInXDirectionESsiRKSt10shared_ptrIN6SAMRAI4hier15VariableContextEEdd] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp:10436

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   23[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :    1195
            Global    :     293
            Local     :     902
        Regenerable   :     389
        Spilled       :      38
        
    Routine stack
        Variables     :    1416 bytes*
            Reads     :     117 [1.15e+03 ~ 2.4%]
            Writes    :      71 [7.96e+02 ~ 1.7%]
        Spills        :     256 bytes*
            Reads     :      95 [1.28e+03 ~ 2.7%]
            Writes    :      44 [3.04e+02 ~ 0.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FlowModelMPIHelperMaxMin::getMaxLocationWithinQuantityBoundsInYDirection(FlowModelMPIHelperMaxMin *, const std::string *, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &, Real, Real)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FlowModelMPIHelperMaxMin::getMaxLocationWithinQuantityBoundsInYDirection(FlowModelMPIHelperMaxMin *, const std::string *, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &, Real, Real)) [105] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10884,1)
  -> INLINE: (10887,45) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10887,47) SAMRAI::hier::PatchHierarchy::getNumberOfLevels(const SAMRAI::hier::PatchHierarchy *) const
  -> INLINE: (10896,13) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (10898,26) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
  -> INLINE: (10898,26) std::shared_ptr<ExtendedFlattenedHierarchy>::shared_ptr<ExtendedFlattenedHierarchy>(std::shared_ptr<ExtendedFlattenedHierarchy> *, ExtendedFlattenedHierarchy *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10904,41) std::__shared_ptr<SAMRAI::geom::CartesianGridGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianGridGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10904,43) SAMRAI::geom::CartesianGridGeometry::getXLower(const SAMRAI::geom::CartesianGridGeometry *) const
  -> INLINE: (10906,15) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (10908,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (10908,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (10908,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10908,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (10908,9) std::operator<<<char, std::char_traits<char>, std::allocator<char>>(std::basic_ostream<char, std::char_traits<char>> &, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)
  -> (10908,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (10908,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (10908,9) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> INLINE: (10908,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10908,9) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10908,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (10908,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (10908,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10908,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10908,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10913,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (10927,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (10927,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (10927,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (10929,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10929,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (10930,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (10930,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (10930,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10930,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10930,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (10930,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (10931,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (10933,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10933,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (10933,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (10939,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10939,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (10941,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (10943,71) std::shared_ptr<SAMRAI::hier::PatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10944,21) std::static_pointer_cast<SAMRAI::geom::CartesianPatchGeometry, SAMRAI::hier::PatchGeometry>(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *, const std::shared_ptr<SAMRAI::hier::PatchGeometry> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (10944,21) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
  -> INLINE: (10945,30) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10945,32) SAMRAI::hier::Patch::getPatchGeometry(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const SAMRAI::hier::Patch *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Patch.h:(346,14) std::shared_ptr<SAMRAI::hier::PatchGeometry>::shared_ptr(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const std::shared_ptr<SAMRAI::hier::PatchGeometry> &)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10947,52) std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10947,54) SAMRAI::geom::CartesianPatchGeometry::getDx(const SAMRAI::geom::CartesianPatchGeometry *) const
  -> INLINE: (10949,60) std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10949,62) SAMRAI::geom::CartesianPatchGeometry::getXLower(const SAMRAI::geom::CartesianPatchGeometry *) const
  -> INLINE: (10956,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (10958,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (10958,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10958,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (10958,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (10958,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (10961,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10961,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (10961,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(1133,28) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> (10961,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (10961,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (10974,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (10976,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10976,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (10979,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (10979,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (10983,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10983,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (10984,78) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (10984,80) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (10984,94) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (10986,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (10987,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (10988,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (10990,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (10991,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (10991,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> INLINE: (10991,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (10991,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (10992,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (10994,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (10996,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (10998,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (10999,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (11001,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (11002,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (11004,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (11005,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (11036,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11036,13) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11036,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11036,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11037,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11050,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (11064,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (11064,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (11064,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (11066,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11066,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (11067,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (11067,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (11067,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11067,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11067,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (11067,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (11068,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (11070,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11070,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (11070,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (11076,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11076,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (11078,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (11080,71) std::shared_ptr<SAMRAI::hier::PatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11081,21) std::static_pointer_cast<SAMRAI::geom::CartesianPatchGeometry, SAMRAI::hier::PatchGeometry>(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *, const std::shared_ptr<SAMRAI::hier::PatchGeometry> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (11081,21) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
  -> INLINE: (11082,30) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11082,32) SAMRAI::hier::Patch::getPatchGeometry(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const SAMRAI::hier::Patch *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Patch.h:(346,14) std::shared_ptr<SAMRAI::hier::PatchGeometry>::shared_ptr(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const std::shared_ptr<SAMRAI::hier::PatchGeometry> &)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11084,52) std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11084,54) SAMRAI::geom::CartesianPatchGeometry::getDx(const SAMRAI::geom::CartesianPatchGeometry *) const
  -> INLINE: (11086,60) std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11086,62) SAMRAI::geom::CartesianPatchGeometry::getXLower(const SAMRAI::geom::CartesianPatchGeometry *) const
  -> INLINE: (11093,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (11095,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (11095,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11095,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (11095,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (11095,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (11098,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11098,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11098,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(1133,28) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> (11098,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (11098,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (11111,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (11113,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11113,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (11116,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (11116,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (11120,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11120,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (11121,78) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11121,80) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (11121,94) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (11123,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (11124,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (11125,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (11126,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (11127,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (11129,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (11130,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (11130,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> INLINE: (11130,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (11130,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (11131,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (11133,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (11135,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (11137,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (11138,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (11139,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (11141,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (11142,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (11144,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (11145,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (11146,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (11182,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11182,13) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11182,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11182,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11183,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11197,5) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10930,21)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10991,25)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11007,21)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed ANTI dependence between x_lo_patch[1] (11018:100) and location_y_max_local (11022:33)

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11009,25)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed ANTI dependence between x_lo_patch[1] (11018:100) and location_y_max_local (11022:33)
            remark #25439: unrolled with remainder by 2  
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11009,25)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(759,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11036,13)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11067,21)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11130,25)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11148,21)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed ANTI dependence between x_lo_patch[1] (11163:104) and location_y_max_local (11167:37)

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11150,25)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed ANTI dependence between x_lo_patch[1] (11163:104) and location_y_max_local (11167:37)

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11152,29)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed ANTI dependence between x_lo_patch[1] (11163:104) and location_y_max_local (11167:37)
               remark #25439: unrolled with remainder by 2  
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11152,29)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(759,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11182,13)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10920,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h(1261,29) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11057,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h(1261,29) ]
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable.h(780,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable.h(780,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable.h(1642,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable.h(1642,7):remark #34026: call to memset implemented as a call to optimized library version
/home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(10884,1):remark #34051: REGISTER ALLOCATION : [_ZN24FlowModelMPIHelperMaxMin46getMaxLocationWithinQuantityBoundsInYDirectionESsiRKSt10shared_ptrIN6SAMRAI4hier15VariableContextEEdd] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp:10884

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm6]
        
    Routine temporaries
        Total         :    1155
            Global    :     296
            Local     :     859
        Regenerable   :     394
        Spilled       :      33
        
    Routine stack
        Variables     :    1361 bytes*
            Reads     :     102 [4.69e+01 ~ 1.2%]
            Writes    :     123 [1.05e+02 ~ 2.7%]
        Spills        :     216 bytes*
            Reads     :      75 [8.48e+01 ~ 2.2%]
            Writes    :      34 [4.05e+01 ~ 1.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FlowModelMPIHelperMaxMin::getMinLocationWithinQuantityBoundsInYDirection(FlowModelMPIHelperMaxMin *, const std::string *, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &, Real, Real)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FlowModelMPIHelperMaxMin::getMinLocationWithinQuantityBoundsInYDirection(FlowModelMPIHelperMaxMin *, const std::string *, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &, Real, Real)) [106] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11211,1)
  -> INLINE: (11214,45) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11214,47) SAMRAI::hier::PatchHierarchy::getNumberOfLevels(const SAMRAI::hier::PatchHierarchy *) const
  -> INLINE: (11223,13) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (11225,26) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
  -> INLINE: (11225,26) std::shared_ptr<ExtendedFlattenedHierarchy>::shared_ptr<ExtendedFlattenedHierarchy>(std::shared_ptr<ExtendedFlattenedHierarchy> *, ExtendedFlattenedHierarchy *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11231,41) std::__shared_ptr<SAMRAI::geom::CartesianGridGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianGridGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11231,43) SAMRAI::geom::CartesianGridGeometry::getXUpper(const SAMRAI::geom::CartesianGridGeometry *) const
  -> INLINE: (11233,15) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (11235,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (11235,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (11235,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11235,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (11235,9) std::operator<<<char, std::char_traits<char>, std::allocator<char>>(std::basic_ostream<char, std::char_traits<char>> &, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)
  -> (11235,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (11235,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (11235,9) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> INLINE: (11235,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11235,9) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11235,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (11235,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (11235,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11235,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11235,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11240,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (11254,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (11254,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (11254,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (11256,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11256,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (11257,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (11257,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (11257,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11257,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11257,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (11257,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (11258,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (11260,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11260,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (11260,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (11266,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11266,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (11268,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (11270,71) std::shared_ptr<SAMRAI::hier::PatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11271,21) std::static_pointer_cast<SAMRAI::geom::CartesianPatchGeometry, SAMRAI::hier::PatchGeometry>(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *, const std::shared_ptr<SAMRAI::hier::PatchGeometry> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (11271,21) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
  -> INLINE: (11272,30) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11272,32) SAMRAI::hier::Patch::getPatchGeometry(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const SAMRAI::hier::Patch *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Patch.h:(346,14) std::shared_ptr<SAMRAI::hier::PatchGeometry>::shared_ptr(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const std::shared_ptr<SAMRAI::hier::PatchGeometry> &)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11274,52) std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11274,54) SAMRAI::geom::CartesianPatchGeometry::getDx(const SAMRAI::geom::CartesianPatchGeometry *) const
  -> INLINE: (11276,60) std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11276,62) SAMRAI::geom::CartesianPatchGeometry::getXLower(const SAMRAI::geom::CartesianPatchGeometry *) const
  -> INLINE: (11283,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (11285,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (11285,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11285,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (11285,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (11285,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (11288,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11288,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11288,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(1133,28) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> (11288,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (11288,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (11301,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (11303,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11303,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (11306,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (11306,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (11310,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11310,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (11311,78) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11311,80) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (11311,94) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (11313,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (11314,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (11315,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (11317,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (11318,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (11318,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> INLINE: (11318,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (11318,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (11319,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (11321,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (11323,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (11325,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (11326,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (11328,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (11329,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (11331,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (11332,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (11363,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11363,13) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11363,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11363,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11364,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11377,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (11391,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (11391,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (11391,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (11393,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11393,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (11394,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (11394,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (11394,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11394,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11394,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (11394,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (11395,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (11397,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11397,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (11397,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (11403,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11403,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (11405,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (11407,71) std::shared_ptr<SAMRAI::hier::PatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11408,21) std::static_pointer_cast<SAMRAI::geom::CartesianPatchGeometry, SAMRAI::hier::PatchGeometry>(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *, const std::shared_ptr<SAMRAI::hier::PatchGeometry> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (11408,21) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
  -> INLINE: (11409,30) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11409,32) SAMRAI::hier::Patch::getPatchGeometry(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const SAMRAI::hier::Patch *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Patch.h:(346,14) std::shared_ptr<SAMRAI::hier::PatchGeometry>::shared_ptr(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const std::shared_ptr<SAMRAI::hier::PatchGeometry> &)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11411,52) std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11411,54) SAMRAI::geom::CartesianPatchGeometry::getDx(const SAMRAI::geom::CartesianPatchGeometry *) const
  -> INLINE: (11413,60) std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11413,62) SAMRAI::geom::CartesianPatchGeometry::getXLower(const SAMRAI::geom::CartesianPatchGeometry *) const
  -> INLINE: (11420,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (11422,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (11422,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11422,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (11422,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (11422,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (11425,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11425,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11425,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(1133,28) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> (11425,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (11425,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (11438,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (11440,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11440,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (11443,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (11443,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (11447,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11447,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (11448,78) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11448,80) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (11448,94) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (11450,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (11451,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (11452,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (11453,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (11454,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (11456,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (11457,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (11457,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> INLINE: (11457,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (11457,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (11458,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (11460,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (11462,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (11464,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (11465,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (11466,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (11468,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (11469,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (11471,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (11472,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (11473,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (11509,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11509,13) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11509,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11509,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11510,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11524,5) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11257,21)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11318,25)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11334,21)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed ANTI dependence between x_lo_patch[1] (11345:100) and location_y_min_local (11349:33)

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11336,25)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed ANTI dependence between x_lo_patch[1] (11345:100) and location_y_min_local (11349:33)
            remark #25439: unrolled with remainder by 2  
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11336,25)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(759,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11363,13)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11394,21)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11457,25)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11475,21)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed ANTI dependence between x_lo_patch[1] (11490:104) and location_y_min_local (11494:37)

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11477,25)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed ANTI dependence between x_lo_patch[1] (11490:104) and location_y_min_local (11494:37)

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11479,29)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed ANTI dependence between x_lo_patch[1] (11490:104) and location_y_min_local (11494:37)
               remark #25439: unrolled with remainder by 2  
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11479,29)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(759,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11509,13)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11247,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h(1261,29) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11384,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h(1261,29) ]
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable.h(780,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable.h(780,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable.h(1642,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable.h(1642,7):remark #34026: call to memset implemented as a call to optimized library version
/home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11211,1):remark #34051: REGISTER ALLOCATION : [_ZN24FlowModelMPIHelperMaxMin46getMinLocationWithinQuantityBoundsInYDirectionESsiRKSt10shared_ptrIN6SAMRAI4hier15VariableContextEEdd] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp:11211

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm6]
        
    Routine temporaries
        Total         :    1155
            Global    :     296
            Local     :     859
        Regenerable   :     394
        Spilled       :      33
        
    Routine stack
        Variables     :    1361 bytes*
            Reads     :     102 [4.69e+01 ~ 1.2%]
            Writes    :     123 [1.05e+02 ~ 2.7%]
        Spills        :     216 bytes*
            Reads     :      75 [8.48e+01 ~ 2.2%]
            Writes    :      34 [4.05e+01 ~ 1.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FlowModelMPIHelperMaxMin::getMaxLocationWithinQuantityBoundsInZDirection(FlowModelMPIHelperMaxMin *, const std::string *, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &, Real, Real)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FlowModelMPIHelperMaxMin::getMaxLocationWithinQuantityBoundsInZDirection(FlowModelMPIHelperMaxMin *, const std::string *, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &, Real, Real)) [107] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11538,1)
  -> INLINE: (11541,45) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11541,47) SAMRAI::hier::PatchHierarchy::getNumberOfLevels(const SAMRAI::hier::PatchHierarchy *) const
  -> INLINE: (11550,13) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (11552,26) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
  -> INLINE: (11552,26) std::shared_ptr<ExtendedFlattenedHierarchy>::shared_ptr<ExtendedFlattenedHierarchy>(std::shared_ptr<ExtendedFlattenedHierarchy> *, ExtendedFlattenedHierarchy *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11558,41) std::__shared_ptr<SAMRAI::geom::CartesianGridGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianGridGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11558,43) SAMRAI::geom::CartesianGridGeometry::getXLower(const SAMRAI::geom::CartesianGridGeometry *) const
  -> INLINE: (11560,15) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (11562,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (11562,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (11562,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11562,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (11562,9) std::operator<<<char, std::char_traits<char>, std::allocator<char>>(std::basic_ostream<char, std::char_traits<char>> &, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)
  -> (11562,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (11562,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (11562,9) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> INLINE: (11562,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11562,9) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11562,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (11562,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (11562,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11562,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11562,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11567,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (11569,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (11569,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (11569,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11569,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (11569,9) std::operator<<<char, std::char_traits<char>, std::allocator<char>>(std::basic_ostream<char, std::char_traits<char>> &, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)
  -> (11569,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (11569,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (11569,9) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> INLINE: (11569,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11569,9) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11569,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (11569,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (11569,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11569,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11569,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11574,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (11588,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11588,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(495,28) std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>> *, std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>>::size_type) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(495,28) std::shared_ptr<SAMRAI::hier::PatchLevel>::shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const std::shared_ptr<SAMRAI::hier::PatchLevel> &)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (11588,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (11590,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11590,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (11591,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (11591,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (11591,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11591,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11591,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (11591,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (11592,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1222,10) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator++(std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11594,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11594,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (11594,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (11600,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11600,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (11602,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (11604,71) std::shared_ptr<SAMRAI::hier::PatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11605,21) std::static_pointer_cast<SAMRAI::geom::CartesianPatchGeometry, SAMRAI::hier::PatchGeometry>(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *, const std::shared_ptr<SAMRAI::hier::PatchGeometry> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (11605,21) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
  -> INLINE: (11606,30) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11606,32) SAMRAI::hier::Patch::getPatchGeometry(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const SAMRAI::hier::Patch *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Patch.h:(346,14) std::shared_ptr<SAMRAI::hier::PatchGeometry>::shared_ptr(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const std::shared_ptr<SAMRAI::hier::PatchGeometry> &)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11608,52) std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11608,54) SAMRAI::geom::CartesianPatchGeometry::getDx(const SAMRAI::geom::CartesianPatchGeometry *) const
  -> INLINE: (11610,60) std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11610,62) SAMRAI::geom::CartesianPatchGeometry::getXLower(const SAMRAI::geom::CartesianPatchGeometry *) const
  -> INLINE: (11617,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (11619,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (11619,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11619,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (11619,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (11619,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (11622,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11622,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11622,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(1133,28) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> (11622,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (11622,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (11635,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (11637,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11637,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (11640,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (11640,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (11644,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11644,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (11645,78) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11645,80) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (11645,94) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (11647,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (11648,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (11649,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (11650,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (11651,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (11653,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (11654,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
  -> INLINE: (11654,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
  -> INLINE: (11654,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (11654,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (11655,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(186,13) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator++(std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(188,13) std::_List_const_iterator<SAMRAI::hier::Box>::operator++(std::_List_const_iterator<SAMRAI::hier::Box> *)
  -> INLINE: (11657,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,30) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator*(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,44) std::_List_const_iterator<SAMRAI::hier::Box>::operator*(const std::_List_const_iterator<SAMRAI::hier::Box> *) const
  -> (11659,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (11661,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (11662,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (11663,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (11665,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (11666,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
    -> /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(284,11) SAMRAI::hier::Index::operator-=(SAMRAI::hier::Index *, const SAMRAI::hier::Index &)
  -> INLINE: (11668,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (11669,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (11670,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (11706,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11706,13) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11706,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11706,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11707,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11721,5) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11591,21)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11654,25)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11672,21)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed ANTI dependence between x_lo_patch[2] (11687:104) and location_z_max_local (11691:37)

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11674,25)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed ANTI dependence between x_lo_patch[2] (11687:104) and location_z_max_local (11691:37)

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11676,29)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed ANTI dependence between x_lo_patch[2] (11687:104) and location_z_max_local (11691:37)
               remark #25439: unrolled with remainder by 2  
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11676,29)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(759,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11706,13)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11581,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h(1261,29) ]
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable.h(780,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable.h(1642,7):remark #34026: call to memset implemented as a call to optimized library version
/home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11538,1):remark #34051: REGISTER ALLOCATION : [_ZN24FlowModelMPIHelperMaxMin46getMaxLocationWithinQuantityBoundsInZDirectionESsiRKSt10shared_ptrIN6SAMRAI4hier15VariableContextEEdd] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp:11538

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm6]
        
    Routine temporaries
        Total         :    1072
            Global    :     259
            Local     :     813
        Regenerable   :     381
        Spilled       :      31
        
    Routine stack
        Variables     :    1314 bytes*
            Reads     :     105 [1.20e+01 ~ 2.8%]
            Writes    :     148 [3.80e+01 ~ 8.8%]
        Spills        :     200 bytes*
            Reads     :      40 [6.96e+00 ~ 1.6%]
            Writes    :      35 [6.03e+00 ~ 1.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FlowModelMPIHelperMaxMin::getMinLocationWithinQuantityBoundsInZDirection(FlowModelMPIHelperMaxMin *, const std::string *, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &, Real, Real)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FlowModelMPIHelperMaxMin::getMinLocationWithinQuantityBoundsInZDirection(FlowModelMPIHelperMaxMin *, const std::string *, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &, Real, Real)) [108] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11735,1)
  -> INLINE: (11738,45) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11738,47) SAMRAI::hier::PatchHierarchy::getNumberOfLevels(const SAMRAI::hier::PatchHierarchy *) const
  -> INLINE: (11747,13) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (11749,26) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
  -> INLINE: (11749,26) std::shared_ptr<ExtendedFlattenedHierarchy>::shared_ptr<ExtendedFlattenedHierarchy>(std::shared_ptr<ExtendedFlattenedHierarchy> *, ExtendedFlattenedHierarchy *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11755,41) std::__shared_ptr<SAMRAI::geom::CartesianGridGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianGridGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11755,43) SAMRAI::geom::CartesianGridGeometry::getXUpper(const SAMRAI::geom::CartesianGridGeometry *) const
  -> INLINE: (11757,15) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (11759,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (11759,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (11759,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11759,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (11759,9) std::operator<<<char, std::char_traits<char>, std::allocator<char>>(std::basic_ostream<char, std::char_traits<char>> &, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)
  -> (11759,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (11759,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (11759,9) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> INLINE: (11759,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11759,9) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11759,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (11759,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (11759,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11759,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11759,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11764,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (11766,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (11766,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (11766,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11766,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (11766,9) std::operator<<<char, std::char_traits<char>, std::allocator<char>>(std::basic_ostream<char, std::char_traits<char>> &, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)
  -> (11766,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (11766,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (11766,9) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> INLINE: (11766,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11766,9) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11766,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (11766,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (11766,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11766,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11766,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11771,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (11785,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11785,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(495,28) std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>> *, std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>>::size_type) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(495,28) std::shared_ptr<SAMRAI::hier::PatchLevel>::shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const std::shared_ptr<SAMRAI::hier::PatchLevel> &)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (11785,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (11787,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11787,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (11788,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (11788,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (11788,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11788,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11788,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (11788,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (11789,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1222,10) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator++(std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11791,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11791,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (11791,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (11797,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11797,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (11799,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (11801,71) std::shared_ptr<SAMRAI::hier::PatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11802,21) std::static_pointer_cast<SAMRAI::geom::CartesianPatchGeometry, SAMRAI::hier::PatchGeometry>(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *, const std::shared_ptr<SAMRAI::hier::PatchGeometry> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (11802,21) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
  -> INLINE: (11803,30) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11803,32) SAMRAI::hier::Patch::getPatchGeometry(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const SAMRAI::hier::Patch *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Patch.h:(346,14) std::shared_ptr<SAMRAI::hier::PatchGeometry>::shared_ptr(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const std::shared_ptr<SAMRAI::hier::PatchGeometry> &)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11805,52) std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11805,54) SAMRAI::geom::CartesianPatchGeometry::getDx(const SAMRAI::geom::CartesianPatchGeometry *) const
  -> INLINE: (11807,60) std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11807,62) SAMRAI::geom::CartesianPatchGeometry::getXLower(const SAMRAI::geom::CartesianPatchGeometry *) const
  -> INLINE: (11814,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (11816,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (11816,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11816,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (11816,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (11816,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (11819,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11819,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11819,76) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(1133,28) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> (11819,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (11819,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, const SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (11832,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (11834,40) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11834,42) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (11837,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (11837,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (11841,74) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11841,76) SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const
  -> INLINE: (11842,78) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11842,80) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> (11842,94) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (11844,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (11845,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (11846,70) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (11847,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (11848,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (11850,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (11851,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
  -> INLINE: (11851,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
  -> INLINE: (11851,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (11851,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (11852,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(186,13) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator++(std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(188,13) std::_List_const_iterator<SAMRAI::hier::Box>::operator++(std::_List_const_iterator<SAMRAI::hier::Box> *)
  -> INLINE: (11854,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,30) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator*(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,44) std::_List_const_iterator<SAMRAI::hier::Box>::operator*(const std::_List_const_iterator<SAMRAI::hier::Box> *) const
  -> (11856,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (11858,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (11859,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (11860,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (11862,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (11863,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
    -> /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(284,11) SAMRAI::hier::Index::operator-=(SAMRAI::hier::Index *, const SAMRAI::hier::Index &)
  -> INLINE: (11865,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (11866,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (11867,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (11903,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11903,13) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11903,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11903,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11904,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11918,5) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11788,21)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11851,25)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11869,21)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed ANTI dependence between x_lo_patch[2] (11884:104) and location_z_min_local (11888:37)

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11871,25)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed ANTI dependence between x_lo_patch[2] (11884:104) and location_z_min_local (11888:37)

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11873,29)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed ANTI dependence between x_lo_patch[2] (11884:104) and location_z_min_local (11888:37)
               remark #25439: unrolled with remainder by 2  
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11873,29)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(759,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11903,13)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11778,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h(1261,29) ]
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable.h(780,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable.h(1642,7):remark #34026: call to memset implemented as a call to optimized library version
/home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11735,1):remark #34051: REGISTER ALLOCATION : [_ZN24FlowModelMPIHelperMaxMin46getMinLocationWithinQuantityBoundsInZDirectionESsiRKSt10shared_ptrIN6SAMRAI4hier15VariableContextEEdd] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp:11735

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm6]
        
    Routine temporaries
        Total         :    1072
            Global    :     259
            Local     :     813
        Regenerable   :     381
        Spilled       :      31
        
    Routine stack
        Variables     :    1314 bytes*
            Reads     :     105 [1.20e+01 ~ 2.8%]
            Writes    :     148 [3.80e+01 ~ 8.8%]
        Spills        :     200 bytes*
            Reads     :      40 [6.96e+00 ~ 1.6%]
            Writes    :      35 [6.03e+00 ~ 1.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FlowModelMPIHelperMaxMin::getMaxAbsoluteGradientWithInhomogeneousXDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::string *, int, int, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FlowModelMPIHelperMaxMin::getMaxAbsoluteGradientWithInhomogeneousXDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::string *, int, int, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &)) [109] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11932,1)
  -> INLINE: (11933,15) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (11935,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (11935,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (11935,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11935,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11935,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (11935,9) std::operator<<<char, std::char_traits<char>, std::allocator<char>>(std::basic_ostream<char, std::char_traits<char>> &, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)
  -> (11935,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (11935,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (11935,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (11935,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (11935,9) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> INLINE: (11935,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11935,9) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11935,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (11935,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (11935,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11935,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11941,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (11943,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (11943,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (11943,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11943,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11943,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (11943,9) std::operator<<<char, std::char_traits<char>, std::allocator<char>>(std::basic_ostream<char, std::char_traits<char>> &, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)
  -> (11943,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (11943,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (11943,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (11943,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (11943,9) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> INLINE: (11943,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11943,9) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11943,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (11943,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (11943,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11943,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11949,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (11951,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (11951,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (11951,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11951,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11951,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (11951,9) std::operator<<<char, std::char_traits<char>, std::allocator<char>>(std::basic_ostream<char, std::char_traits<char>> &, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)
  -> (11951,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (11951,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (11951,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (11951,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (11951,9) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> INLINE: (11951,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11951,9) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11951,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (11951,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (11951,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11951,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (11958,38) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> INLINE: (11959,19) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (11961,23) std::vector<double, std::allocator<double>>::~vector(std::vector<double, std::allocator<double>> *)
  -> (11961,23) std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *)
  -> INLINE: (11963,45) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11963,47) SAMRAI::hier::PatchHierarchy::getNumberOfLevels(const SAMRAI::hier::PatchHierarchy *) const
  -> INLINE: (11972,13) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (11974,26) std::shared_ptr<ExtendedFlattenedHierarchy>::shared_ptr<ExtendedFlattenedHierarchy>(std::shared_ptr<ExtendedFlattenedHierarchy> *, ExtendedFlattenedHierarchy *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (11974,26) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
  -> INLINE: (11976,15) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (11978,49) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (11978,49) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (11980,17) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (11980,17) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (11980,17) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (11983,17) std::shared_ptr<DerivativeFirstOrder>::~shared_ptr(std::shared_ptr<DerivativeFirstOrder> *)
  -> INLINE: (11983,17) std::shared_ptr<DerivativeFirstOrder>::shared_ptr<DerivativeFirstOrder>(std::shared_ptr<DerivativeFirstOrder> *, DerivativeFirstOrder *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (11985,59) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (11989,28) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> (11990,55) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
  -> INLINE: (12005,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (12005,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> (12005,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> INLINE: (12012,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (12012,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (12016,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (12016,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (12016,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (12019,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
  -> INLINE: (12021,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (12023,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (12023,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (12024,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (12024,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (12024,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (12024,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (12024,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (12024,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (12025,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (12027,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12027,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (12027,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (12033,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (12033,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (12035,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (12037,71) std::shared_ptr<SAMRAI::hier::PatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12038,21) std::static_pointer_cast<SAMRAI::geom::CartesianPatchGeometry, SAMRAI::hier::PatchGeometry>(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *, const std::shared_ptr<SAMRAI::hier::PatchGeometry> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (12038,21) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
  -> INLINE: (12039,30) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> (12039,32) SAMRAI::hier::Patch::getPatchGeometry(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const SAMRAI::hier::Patch *) const
  -> INLINE: (12041,52) std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (12041,54) SAMRAI::geom::CartesianPatchGeometry::getDx(const SAMRAI::geom::CartesianPatchGeometry *) const
  -> INLINE: (12048,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (12050,58) std::__shared_ptr<FlowModel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<FlowModel, __gnu_cxx::_S_atomic> *) const
  -> (12050,60) FlowModel::getNumberOfGhostCells(const FlowModel *) const
  -> DELETED: (12053,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (12053,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12053,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (12053,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (12053,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (12056,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12056,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (12056,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> (12056,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair<SAMRAI::hier::IntVector &, void>(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, SAMRAI::hier::IntVector &)
  -> (12065,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (12068,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (12068,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> (12077,60) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (12077,60) SAMRAI::pdat::CellData<Real>::CellData(SAMRAI::pdat::CellData<Real> *, const SAMRAI::hier::Box &, int, const SAMRAI::hier::IntVector &)
  -> INLINE: (12077,60) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::shared_ptr<SAMRAI::pdat::CellData<Real>>(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *, SAMRAI::pdat::CellData<Real> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (12077,60) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (12079,44) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (12079,46) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> (12081,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (12082,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (12082,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (12082,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (12082,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (12083,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (12085,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> INLINE: (12089,49) std::__shared_ptr<DerivativeFirstOrder, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<DerivativeFirstOrder, __gnu_cxx::_S_atomic> *) const
  -> INDIRECT- (VIRTUAL): (12095,29)  EXPR_CONV.SI64.P64(*((SI64*) (__$U504_V$1ec3.0.913->__vptr_V$1ee_2.5 + EXPR_CONV.SI32.I64(3(SI32)) * 8(I64))))
  -> (12098,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (12100,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (12102,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (12103,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (12105,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (12106,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (12120,59) std::max<Real>(const Real &, const Real &)
  -> INLINE: (12120,97) std::abs(double)
  -> INLINE: (12130,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12130,13) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12130,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12130,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12130,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12131,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12145,5) std::shared_ptr<DerivativeFirstOrder>::~shared_ptr(std::shared_ptr<DerivativeFirstOrder> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12146,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (12148,49) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (12148,49) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (12150,17) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (12150,17) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (12150,17) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (12153,17) std::shared_ptr<DerivativeFirstOrder>::~shared_ptr(std::shared_ptr<DerivativeFirstOrder> *)
  -> INLINE: (12153,17) std::shared_ptr<DerivativeFirstOrder>::shared_ptr<DerivativeFirstOrder>(std::shared_ptr<DerivativeFirstOrder> *, DerivativeFirstOrder *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12155,49) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (12155,49) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (12157,17) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (12157,17) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (12157,17) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (12160,17) std::shared_ptr<DerivativeFirstOrder>::~shared_ptr(std::shared_ptr<DerivativeFirstOrder> *)
  -> INLINE: (12160,17) std::shared_ptr<DerivativeFirstOrder>::shared_ptr<DerivativeFirstOrder>(std::shared_ptr<DerivativeFirstOrder> *, DerivativeFirstOrder *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12162,59) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (12166,28) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> (12167,55) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
  -> INLINE: (12182,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (12182,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> (12182,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> INLINE: (12189,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (12189,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (12193,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (12193,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (12193,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (12196,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
  -> INLINE: (12198,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (12200,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (12200,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (12201,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (12201,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (12201,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (12201,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (12201,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (12201,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (12202,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (12204,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12204,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (12204,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (12210,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (12210,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (12212,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (12214,71) std::shared_ptr<SAMRAI::hier::PatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12215,21) std::static_pointer_cast<SAMRAI::geom::CartesianPatchGeometry, SAMRAI::hier::PatchGeometry>(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *, const std::shared_ptr<SAMRAI::hier::PatchGeometry> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (12215,21) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
  -> INLINE: (12216,30) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> (12216,32) SAMRAI::hier::Patch::getPatchGeometry(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const SAMRAI::hier::Patch *) const
  -> INLINE: (12218,52) std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (12218,54) SAMRAI::geom::CartesianPatchGeometry::getDx(const SAMRAI::geom::CartesianPatchGeometry *) const
  -> INLINE: (12225,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (12227,58) std::__shared_ptr<FlowModel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<FlowModel, __gnu_cxx::_S_atomic> *) const
  -> (12227,60) FlowModel::getNumberOfGhostCells(const FlowModel *) const
  -> DELETED: (12230,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (12230,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12230,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (12230,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (12230,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (12233,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12233,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (12233,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> (12233,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair<SAMRAI::hier::IntVector &, void>(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, SAMRAI::hier::IntVector &)
  -> (12242,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (12245,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (12245,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> (12254,60) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (12254,60) SAMRAI::pdat::CellData<Real>::CellData(SAMRAI::pdat::CellData<Real> *, const SAMRAI::hier::Box &, int, const SAMRAI::hier::IntVector &)
  -> INLINE: (12254,60) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::shared_ptr<SAMRAI::pdat::CellData<Real>>(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *, SAMRAI::pdat::CellData<Real> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (12254,60) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (12256,44) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (12256,46) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> (12258,71) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (12259,69) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (12261,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (12262,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (12262,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (12262,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (12262,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (12263,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (12265,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> INLINE: (12269,49) std::__shared_ptr<DerivativeFirstOrder, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<DerivativeFirstOrder, __gnu_cxx::_S_atomic> *) const
  -> INDIRECT- (VIRTUAL): (12275,29)  EXPR_CONV.SI64.P64(*((SI64*) (__$U51d_V$1f04.0.913->__vptr_V$1ee_2.5 + EXPR_CONV.SI32.I64(3(SI32)) * 8(I64))))
  -> INLINE: (12279,49) std::__shared_ptr<DerivativeFirstOrder, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<DerivativeFirstOrder, __gnu_cxx::_S_atomic> *) const
  -> INDIRECT- (VIRTUAL): (12285,29)  EXPR_CONV.SI64.P64(*((SI64*) (__$U51e_V$1f05.0.913->__vptr_V$1ee_2.5 + EXPR_CONV.SI32.I64(3(SI32)) * 8(I64))))
  -> (12288,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (12290,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (12291,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (12293,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (12294,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (12296,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (12298,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (12299,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (12316,63) std::max<Real>(const Real &, const Real &)
  -> INLINE: (12316,101) std::abs(double)
  -> INLINE: (12327,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12327,13) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12327,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12327,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12327,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12328,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12342,5) std::shared_ptr<DerivativeFirstOrder>::~shared_ptr(std::shared_ptr<DerivativeFirstOrder> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12342,5) std::shared_ptr<DerivativeFirstOrder>::~shared_ptr(std::shared_ptr<DerivativeFirstOrder> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12343,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (12345,49) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (12345,49) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (12347,17) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (12347,17) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (12347,17) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12350,17) std::shared_ptr<DerivativeFirstOrder>::shared_ptr<DerivativeFirstOrder>(std::shared_ptr<DerivativeFirstOrder> *, DerivativeFirstOrder *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (12350,17) std::shared_ptr<DerivativeFirstOrder>::~shared_ptr(std::shared_ptr<DerivativeFirstOrder> *)
  -> INLINE: (12352,49) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (12352,49) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (12354,17) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (12354,17) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (12354,17) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12357,17) std::shared_ptr<DerivativeFirstOrder>::shared_ptr<DerivativeFirstOrder>(std::shared_ptr<DerivativeFirstOrder> *, DerivativeFirstOrder *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (12357,17) std::shared_ptr<DerivativeFirstOrder>::~shared_ptr(std::shared_ptr<DerivativeFirstOrder> *)
  -> INLINE: (12359,49) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (12359,49) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (12361,17) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (12361,17) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (12361,17) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12364,17) std::shared_ptr<DerivativeFirstOrder>::shared_ptr<DerivativeFirstOrder>(std::shared_ptr<DerivativeFirstOrder> *, DerivativeFirstOrder *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (12364,17) std::shared_ptr<DerivativeFirstOrder>::~shared_ptr(std::shared_ptr<DerivativeFirstOrder> *)
  -> INLINE: (12366,59) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> (12370,28) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> (12371,55) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
  -> INLINE: (12386,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (12386,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (12386,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (12393,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (12393,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (12397,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (12397,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (12397,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (12400,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
  -> INLINE: (12402,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (12404,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (12404,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (12405,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (12405,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (12405,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (12405,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (12405,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (12405,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (12406,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (12408,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12408,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (12408,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (12414,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (12414,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (12416,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (12418,71) std::shared_ptr<SAMRAI::hier::PatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12419,21) std::static_pointer_cast<SAMRAI::geom::CartesianPatchGeometry, SAMRAI::hier::PatchGeometry>(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *, const std::shared_ptr<SAMRAI::hier::PatchGeometry> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (12419,21) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
  -> INLINE: (12420,30) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> (12420,32) SAMRAI::hier::Patch::getPatchGeometry(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const SAMRAI::hier::Patch *) const
  -> INLINE: (12422,52) std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (12422,54) SAMRAI::geom::CartesianPatchGeometry::getDx(const SAMRAI::geom::CartesianPatchGeometry *) const
  -> INLINE: (12429,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (12431,58) std::__shared_ptr<FlowModel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<FlowModel, __gnu_cxx::_S_atomic> *) const
  -> (12431,60) FlowModel::getNumberOfGhostCells(const FlowModel *) const
  -> DELETED: (12434,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (12434,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12434,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (12434,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (12434,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (12437,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12437,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (12437,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> (12437,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair<SAMRAI::hier::IntVector &, void>(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, SAMRAI::hier::IntVector &)
  -> (12446,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (12449,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (12449,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> (12458,60) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (12458,60) SAMRAI::pdat::CellData<Real>::CellData(SAMRAI::pdat::CellData<Real> *, const SAMRAI::hier::Box &, int, const SAMRAI::hier::IntVector &)
  -> INLINE: (12458,60) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::shared_ptr<SAMRAI::pdat::CellData<Real>>(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *, SAMRAI::pdat::CellData<Real> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (12458,60) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (12460,44) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (12460,46) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> (12462,71) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (12463,69) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (12464,69) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (12466,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (12467,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (12467,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (12467,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (12467,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (12468,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (12470,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> INLINE: (12474,49) std::__shared_ptr<DerivativeFirstOrder, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<DerivativeFirstOrder, __gnu_cxx::_S_atomic> *) const
  -> INDIRECT- (VIRTUAL): (12480,29)  EXPR_CONV.SI64.P64(*((SI64*) (__$U53c_V$1f50.0.913->__vptr_V$1ee_2.5 + EXPR_CONV.SI32.I64(3(SI32)) * 8(I64))))
  -> INLINE: (12484,49) std::__shared_ptr<DerivativeFirstOrder, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<DerivativeFirstOrder, __gnu_cxx::_S_atomic> *) const
  -> INDIRECT- (VIRTUAL): (12490,29)  EXPR_CONV.SI64.P64(*((SI64*) (__$U53d_V$1f51.0.913->__vptr_V$1ee_2.5 + EXPR_CONV.SI32.I64(3(SI32)) * 8(I64))))
  -> INLINE: (12494,50) std::__shared_ptr<DerivativeFirstOrder, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<DerivativeFirstOrder, __gnu_cxx::_S_atomic> *) const
  -> INDIRECT- (VIRTUAL): (12500,29)  EXPR_CONV.SI64.P64(*((SI64*) (__$U53e_V$1f52.0.913->__vptr_V$1ee_2.5 + EXPR_CONV.SI32.I64(3(SI32)) * 8(I64))))
  -> (12503,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (12505,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (12506,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (12507,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (12509,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (12510,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (12512,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (12515,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (12516,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (12517,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (12538,67) std::max<Real>(const Real &, const Real &)
  -> INLINE: (12538,105) std::abs(double)
  -> INLINE: (12550,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12550,13) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12550,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12550,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12550,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12551,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12565,5) std::shared_ptr<DerivativeFirstOrder>::~shared_ptr(std::shared_ptr<DerivativeFirstOrder> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12565,5) std::shared_ptr<DerivativeFirstOrder>::~shared_ptr(std::shared_ptr<DerivativeFirstOrder> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12565,5) std::shared_ptr<DerivativeFirstOrder>::~shared_ptr(std::shared_ptr<DerivativeFirstOrder> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12567,5) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11992,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11992,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11992,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11992,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11992,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11992,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12014,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12024,21)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12082,25)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12108,21)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12116,25)
         <Peeled loop for vectorization, Multiversioned v1>
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12116,25)
         <Multiversioned v1>
            remark #25228: Loop multiversioned for Data Dependence
            remark #15300: LOOP WAS VECTORIZED
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12116,25)
         <Remainder loop for vectorization, Multiversioned v1>
            remark #15301: REMAINDER LOOP WAS VECTORIZED
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12116,25)
         <Remainder loop for vectorization, Multiversioned v1>
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12116,25)
         <Multiversioned v2>
            remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
            remark #25439: unrolled with remainder by 2  
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12116,25)
         <Remainder, Multiversioned v2>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12169,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12169,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12169,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12169,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12169,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12169,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12191,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12201,21)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12262,25)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12301,21)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12303,25)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12312,29)
            <Peeled loop for vectorization, Multiversioned v1>
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12312,29)
            <Multiversioned v1>
               remark #25228: Loop multiversioned for Data Dependence
               remark #15300: LOOP WAS VECTORIZED
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12312,29)
            <Remainder loop for vectorization, Multiversioned v1>
               remark #15301: REMAINDER LOOP WAS VECTORIZED
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12312,29)
            <Remainder loop for vectorization, Multiversioned v1>
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12312,29)
            <Multiversioned v2>
               remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
               remark #25439: unrolled with remainder by 2  
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12312,29)
            <Remainder, Multiversioned v2>
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12373,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12373,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12373,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12373,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12373,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12373,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12395,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12405,21)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12467,25)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12519,21)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12521,25)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12523,29)
               remark #15542: loop was not vectorized: inner loop was already vectorized

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12534,33)
               <Peeled loop for vectorization, Multiversioned v1>
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12534,33)
               <Multiversioned v1>
                  remark #25228: Loop multiversioned for Data Dependence
                  remark #15300: LOOP WAS VECTORIZED
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12534,33)
               <Remainder loop for vectorization, Multiversioned v1>
                  remark #15301: REMAINDER LOOP WAS VECTORIZED
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12534,33)
               <Remainder loop for vectorization, Multiversioned v1>
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12534,33)
               <Multiversioned v2>
                  remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
                  remark #25439: unrolled with remainder by 2  
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12534,33)
               <Remainder, Multiversioned v2>
               LOOP END
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11998,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12012,36) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12175,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12189,36) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12379,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12393,36) ]
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/basic_string.h(1725,18):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/basic_string.h(1725,18):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/basic_string.h(1725,18):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/basic_string.h(1725,18):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/basic_string.h(1725,18):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/basic_string.h(1725,18):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(11932,1):remark #34051: REGISTER ALLOCATION : [_ZN24FlowModelMPIHelperMaxMin49getMaxAbsoluteGradientWithInhomogeneousXDirectionESsiiiRKSt10shared_ptrIN6SAMRAI4hier15VariableContextEE] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp:11932

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :    2700
            Global    :     626
            Local     :    2074
        Regenerable   :     913
        Spilled       :      71
        
    Routine stack
        Variables     :    3189 bytes*
            Reads     :     194 [1.01e+03 ~ 0.1%]
            Writes    :     240 [1.15e+02 ~ 0.0%]
        Spills        :     528 bytes*
            Reads     :     351 [1.01e+04 ~ 1.1%]
            Writes    :      75 [6.11e+03 ~ 0.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::__shared_count<__gnu_cxx::_S_atomic>::__shared_count(std::__shared_count<__gnu_cxx::_S_atomic> *, const std::__shared_count<__gnu_cxx::_S_atomic> &)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(551,7):remark #34051: REGISTER ALLOCATION : [_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1ERKS2_] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:551

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rdx rsi rdi]
        
    Routine temporaries
        Total         :      14
            Global    :       8
            Local     :       6
        Regenerable   :       2
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::__shared_count<__gnu_cxx::_S_atomic>::__shared_count<SAMRAI::pdat::CellData<Real> *>(std::__shared_count<__gnu_cxx::_S_atomic> *, SAMRAI::pdat::CellData<Real> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(449,2):remark #34051: REGISTER ALLOCATION : [_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1IPN6SAMRAI4pdat8CellDataIdEEEET_] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:449

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rsi rdi r14-r15]
        
    Routine temporaries
        Total         :      28
            Global    :      10
            Local     :      18
        Regenerable   :       2
        Spilled       :       2
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       2 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_base<__gnu_cxx::_S_atomic>::_M_release(std::_Sp_counted_base<__gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(138,7):remark #34051: REGISTER ALLOCATION : [_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:138

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rdi r13-r14]
        
    Routine temporaries
        Total         :      23
            Global    :      12
            Local     :      11
        Regenerable   :       3
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_S_construct<char *>(char *, char *, const std::allocator<char> &, std::forward_iterator_tag)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/basic_string.tcc(126,7):remark #34051: REGISTER ALLOCATION : [_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag] /usr/include/c++/4.8.5/bits/basic_string.tcc:126

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rsi rdi r12-r15]
        
    Routine temporaries
        Total         :      30
            Global    :      13
            Local     :      17
        Regenerable   :       7
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FlowModel::getNumberOfGhostCells(const FlowModel *) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FlowModel::getNumberOfGhostCells(const FlowModel *) const) [114] /home/akula/HAMeRS_IB/HAMeRS/include/flow/flow_models/FlowModel.hpp(123,9)
  -> INLINE: (127,17) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (127,17) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (127,17) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (127,17) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (127,17) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (127,17) std::operator<<<char, std::char_traits<char>, std::allocator<char>>(std::basic_ostream<char, std::char_traits<char>> &, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)
  -> (127,17) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (127,17) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (127,17) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> INLINE: (127,17) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (127,17) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (127,17) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (127,17) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (127,17) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (127,17) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/home/akula/HAMeRS_IB/HAMeRS/include/flow/flow_models/FlowModel.hpp(123,9):remark #34051: REGISTER ALLOCATION : [_ZNK9FlowModel21getNumberOfGhostCellsEv] /home/akula/HAMeRS_IB/HAMeRS/include/flow/flow_models/FlowModel.hpp:123

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rbp rsi rdi r8-r9 r12-r15]
        
    Routine temporaries
        Total         :     301
            Global    :      75
            Local     :     226
        Regenerable   :     119
        Spilled       :       6
        
    Routine stack
        Variables     :     421 bytes*
            Reads     :      24 [5.19e+00 ~ 4.9%]
            Writes    :      51 [1.77e+01 ~ 16.5%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::pair<std::string, SAMRAI::hier::IntVector>::pair<SAMRAI::hier::IntVector &, void>(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, SAMRAI::hier::IntVector &)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_pair.h(139,47):remark #34051: REGISTER ALLOCATION : [_ZNSt4pairISsN6SAMRAI4hier9IntVectorEEC1IRS2_vEERKSsOT_] /usr/include/c++/4.8.5/bits/stl_pair.h:139

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rbp rsi rdi r12]
        
    Routine temporaries
        Total         :      34
            Global    :      12
            Local     :      22
        Regenerable   :       4
        Spilled       :       2
        
    Routine stack
        Variables     :       9 bytes*
            Reads     :       1 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellData<Real>::CellData(SAMRAI::pdat::CellData<Real> *, const SAMRAI::hier::Box &, int, const SAMRAI::hier::IntVector &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::pdat::CellData<Real>::CellData(SAMRAI::pdat::CellData<Real> *, const SAMRAI::hier::Box &, int, const SAMRAI::hier::IntVector &)) [116] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(79,1)
  -> (73,17) std::shared_ptr<SAMRAI::pdat::ArrayData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::ArrayData<Real>> *)
  -> INLINE: (73,17) std::shared_ptr<SAMRAI::pdat::ArrayData<Real>>::shared_ptr(std::shared_ptr<SAMRAI::pdat::ArrayData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (84,11) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (84,11) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (84,11) std::shared_ptr<SAMRAI::tbox::Timer>::~shared_ptr(std::shared_ptr<SAMRAI::tbox::Timer> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (84,11) std::shared_ptr<SAMRAI::tbox::Timer>::operator=(std::shared_ptr<SAMRAI::tbox::Timer> *, std::shared_ptr<SAMRAI::tbox::Timer> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (85,16) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (85,16) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (85,16) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (87,11) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::reset<SAMRAI::pdat::ArrayData<Real>>(std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *, SAMRAI::pdat::ArrayData<Real> *)
    -> INLINE: /usr/include/c++/4.8.5/bits/shared_ptr_base.h:(890,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::__shared_ptr<SAMRAI::pdat::ArrayData<Real>>(std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *, SAMRAI::pdat::ArrayData<Real> *)
      -> INLINE: (739,36) std::__shared_count<__gnu_cxx::_S_atomic>::__shared_count<SAMRAI::pdat::ArrayData<Real> *>(std::__shared_count<__gnu_cxx::_S_atomic> *, SAMRAI::pdat::ArrayData<Real> *)
        -> (456,8) SAMRAI::pdat::ArrayData<Real>::~ArrayData(SAMRAI::pdat::ArrayData<Real> *)
  -> INLINE: (87,37) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> INLINE: (87,52) SAMRAI::pdat::ArrayData<Real>::ArrayData(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::hier::Box &, unsigned int)
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(91,18) std::allocator<double>::~allocator(std::allocator<double> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(94,40) SAMRAI::hier::Box::size(const SAMRAI::hier::Box *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(654,12) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(655,44) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(655,54) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(657,48) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(657,58) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(102,45) std::allocator<double>::allocator(std::allocator<double> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(102,45) std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type, const std::vector<double, std::allocator<double>>::allocator_type &)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(102,45) std::allocator<double>::~allocator(std::allocator<double> *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(88,52)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(656,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(88,52)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 2  
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(88,52)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(88,52)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(88,52)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(733,17):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/shared_ptr_base.h(789,7):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 8)
/usr/include/c++/4.8.5/bits/stl_algobase.h(749,7):remark #34026: call to memset implemented as a call to optimized library version
/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(79,1):remark #34051: REGISTER ALLOCATION : [_ZN6SAMRAI4pdat8CellDataIdEC1ERKNS_4hier3BoxEiRKNS3_9IntVectorE] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:79

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rsi rdi r8-r9 r12-r15 zmm0]
        
    Routine temporaries
        Total         :     188
            Global    :      52
            Local     :     136
        Regenerable   :      35
        Spilled       :       6
        
    Routine stack
        Variables     :      51 bytes*
            Reads     :       9 [5.67e+00 ~ 2.5%]
            Writes    :      13 [6.00e+00 ~ 2.7%]
        Spills        :       8 bytes*
            Reads     :       1 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::shared_ptr<SAMRAI::pdat::ArrayData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::ArrayData<Real>> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr.h(93,11):remark #34051: REGISTER ALLOCATION : [_ZNSt10shared_ptrIN6SAMRAI4pdat9ArrayDataIdEEED1Ev] /usr/include/c++/4.8.5/bits/shared_ptr.h:93

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rdi r12-r13]
        
    Routine temporaries
        Total         :      24
            Global    :      12
            Local     :      12
        Regenerable   :       3
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::~ArrayData(SAMRAI::pdat::ArrayData<Real> *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::pdat::ArrayData<Real>::~ArrayData(SAMRAI::pdat::ArrayData<Real> *)) [119] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(155,1)
  -> INLINE: (159,1) std::vector<double, std::allocator<double>>::~vector(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(155,1):remark #34051: REGISTER ALLOCATION : [_ZN6SAMRAI4pdat9ArrayDataIdED1Ev] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:155

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rdi r13]
        
    Routine temporaries
        Total         :      12
            Global    :       8
            Local     :       4
        Regenerable   :       0
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)) [122] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(1132,4)
  -> INLINE: (1133,28) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const


    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(1132,4):remark #34051: REGISTER ALLOCATION : [_ZN6SAMRAI4hier9IntVector7getZeroERKNS_4tbox9DimensionE] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:1132

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rax rdi]
        
    Routine temporaries
        Total         :      11
            Global    :       0
            Local     :      11
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::char_traits<char>::length(const std::char_traits<char>::char_type *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/char_traits.h(259,7):remark #34051: REGISTER ALLOCATION : [_ZNSt11char_traitsIcE6lengthEPKc] /usr/include/c++/4.8.5/bits/char_traits.h:259

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      12
            Global    :       7
            Local     :       5
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::__shared_count<__gnu_cxx::_S_atomic>::__shared_count<DerivativeFirstOrder *>(std::__shared_count<__gnu_cxx::_S_atomic> *, DerivativeFirstOrder *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(449,2):remark #34051: REGISTER ALLOCATION : [_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1IP20DerivativeFirstOrderEET_] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:449

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rsi rdi r14-r15]
        
    Routine temporaries
        Total         :      28
            Global    :      10
            Local     :      18
        Regenerable   :       2
        Spilled       :       2
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       2 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: __gnu_cxx::__exchange_and_add_dispatch(_Atomic_word *, int)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/ext/atomicity.h(79,3):remark #34051: REGISTER ALLOCATION : [_ZN17_INTERNAL90d0468d9__gnu_cxx27__exchange_and_add_dispatchEPii] /usr/include/c++/4.8.5/ext/atomicity.h:79

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rdx rsi rdi]
        
    Routine temporaries
        Total         :      16
            Global    :       8
            Local     :       8
        Regenerable   :       2
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::__enable_shared_from_this_helper<__gnu_cxx::_S_atomic>(const std::__shared_count<__gnu_cxx::_S_atomic> &, ...)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(724,5):remark #34051: REGISTER ALLOCATION : [_ZSt32__enable_shared_from_this_helperILN9__gnu_cxx12_Lock_policyE2EEvRKSt14__shared_countIXT_EEz] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:724

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       7
            Global    :       0
            Local     :       7
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :     176 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr.h(93,11):remark #34051: REGISTER ALLOCATION : [_ZNSt10shared_ptrIN6SAMRAI4pdat8CellDataIdEEED1Ev] /usr/include/c++/4.8.5/bits/shared_ptr.h:93

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rdi r12-r13]
        
    Routine temporaries
        Total         :      24
            Global    :      12
            Local     :      12
        Regenerable   :       3
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(879,7):remark #34051: REGISTER ALLOCATION : [_ZNSt6vectorIdSaIdEE4dataEv] /usr/include/c++/4.8.5/bits/stl_vector.h:879

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rax rdi]
        
    Routine temporaries
        Total         :      10
            Global    :       0
            Local     :      10
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::shared_ptr<DerivativeFirstOrder>::~shared_ptr(std::shared_ptr<DerivativeFirstOrder> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr.h(93,11):remark #34051: REGISTER ALLOCATION : [_ZNSt10shared_ptrI20DerivativeFirstOrderED1Ev] /usr/include/c++/4.8.5/bits/shared_ptr.h:93

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rdi r12-r13]
        
    Routine temporaries
        Total         :      24
            Global    :      12
            Local     :      12
        Regenerable   :       3
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>>::~basic_stringbuf(std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/iosfwd(93,11):remark #34051: REGISTER ALLOCATION : [_ZNSt15basic_stringbufIcSt11char_traitsIcESaIcEED1Ev] /usr/include/c++/4.8.5/iosfwd:93

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rbp rsi rdi]
        
    Routine temporaries
        Total         :      21
            Global    :      11
            Local     :      10
        Regenerable   :       5
        Spilled       :       1
        
    Routine stack
        Variables     :       1 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FlowModelMPIHelperMaxMin::getMaxMagnitudeGradientWithInhomogeneousXDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::string *, int, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FlowModelMPIHelperMaxMin::getMaxMagnitudeGradientWithInhomogeneousXDirection(std::vector<double, std::allocator<double>> *, FlowModelMPIHelperMaxMin *, const std::string *, int, int, const std::shared_ptr<SAMRAI::hier::VariableContext> &)) [140] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12581,1)
  -> (12582,38) SAMRAI::hier::IntVector::getOne(const SAMRAI::tbox::Dimension &)
  -> (12582,68) SAMRAI::hier::IntVector::operator*(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, int) const
  -> (12584,23) std::vector<double, std::allocator<double>>::~vector(std::vector<double, std::allocator<double>> *)
  -> (12584,23) std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *)
  -> INLINE: (12586,45) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (12586,47) SAMRAI::hier::PatchHierarchy::getNumberOfLevels(const SAMRAI::hier::PatchHierarchy *) const
  -> INLINE: (12595,13) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (12597,26) std::shared_ptr<ExtendedFlattenedHierarchy>::shared_ptr<ExtendedFlattenedHierarchy>(std::shared_ptr<ExtendedFlattenedHierarchy> *, ExtendedFlattenedHierarchy *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (12597,26) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
  -> INLINE: (12599,15) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (12601,49) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (12601,49) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (12603,17) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (12603,17) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (12603,17) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (12606,17) std::shared_ptr<DerivativeFirstOrder>::~shared_ptr(std::shared_ptr<DerivativeFirstOrder> *)
  -> INLINE: (12606,17) std::shared_ptr<DerivativeFirstOrder>::shared_ptr<DerivativeFirstOrder>(std::shared_ptr<DerivativeFirstOrder> *, DerivativeFirstOrder *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12608,59) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (12612,26) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12613,54) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12628,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (12628,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> (12628,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> INLINE: (12635,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (12635,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (12639,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (12639,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (12639,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (12642,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
  -> INLINE: (12644,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (12646,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (12646,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (12647,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (12647,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (12647,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (12647,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (12647,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (12647,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (12648,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (12650,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12650,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (12650,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (12656,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (12656,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (12658,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (12660,71) std::shared_ptr<SAMRAI::hier::PatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12661,21) std::static_pointer_cast<SAMRAI::geom::CartesianPatchGeometry, SAMRAI::hier::PatchGeometry>(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *, const std::shared_ptr<SAMRAI::hier::PatchGeometry> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (12661,21) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
  -> INLINE: (12662,30) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> (12662,32) SAMRAI::hier::Patch::getPatchGeometry(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const SAMRAI::hier::Patch *) const
  -> INLINE: (12664,52) std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (12664,54) SAMRAI::geom::CartesianPatchGeometry::getDx(const SAMRAI::geom::CartesianPatchGeometry *) const
  -> INLINE: (12671,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (12673,58) std::__shared_ptr<FlowModel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<FlowModel, __gnu_cxx::_S_atomic> *) const
  -> (12673,60) FlowModel::getNumberOfGhostCells(const FlowModel *) const
  -> DELETED: (12676,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (12676,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12676,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (12676,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (12676,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (12679,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12679,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (12679,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (12679,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair<SAMRAI::hier::IntVector &, void>(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (12688,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (12691,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (12691,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (12700,63) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> (12700,75) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (12700,75) SAMRAI::pdat::CellData<Real>::CellData(SAMRAI::pdat::CellData<Real> *, const SAMRAI::hier::Box &, int, const SAMRAI::hier::IntVector &)
  -> INLINE: (12700,75) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::shared_ptr<SAMRAI::pdat::CellData<Real>>(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *, SAMRAI::pdat::CellData<Real> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (12700,75) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (12702,46) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (12702,48) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> (12704,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (12705,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (12705,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (12705,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (12705,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (12706,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (12708,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> INLINE: (12710,45) std::__shared_ptr<DerivativeFirstOrder, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<DerivativeFirstOrder, __gnu_cxx::_S_atomic> *) const
  -> INDIRECT- (VIRTUAL): (12716,25)  EXPR_CONV.SI64.P64(*((SI64*) (__$U554_V$1f9c.0.914->__vptr_V$1ee_2.5 + EXPR_CONV.SI32.I64(3(SI32)) * 8(I64))))
  -> (12718,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (12720,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (12722,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (12723,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (12725,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (12726,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (12742,60) std::max<Real>(const Real &, const Real &)
  -> INLINE: (12752,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12752,13) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12752,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12752,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12752,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12753,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12767,5) std::shared_ptr<DerivativeFirstOrder>::~shared_ptr(std::shared_ptr<DerivativeFirstOrder> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12768,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (12770,49) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (12770,49) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (12772,17) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (12772,17) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (12772,17) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (12775,17) std::shared_ptr<DerivativeFirstOrder>::~shared_ptr(std::shared_ptr<DerivativeFirstOrder> *)
  -> INLINE: (12775,17) std::shared_ptr<DerivativeFirstOrder>::shared_ptr<DerivativeFirstOrder>(std::shared_ptr<DerivativeFirstOrder> *, DerivativeFirstOrder *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12777,49) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (12777,49) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (12779,17) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (12779,17) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (12779,17) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (12782,17) std::shared_ptr<DerivativeFirstOrder>::~shared_ptr(std::shared_ptr<DerivativeFirstOrder> *)
  -> INLINE: (12782,17) std::shared_ptr<DerivativeFirstOrder>::shared_ptr<DerivativeFirstOrder>(std::shared_ptr<DerivativeFirstOrder> *, DerivativeFirstOrder *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12784,59) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (12788,26) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12789,54) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12804,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (12804,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> (12804,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> INLINE: (12811,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (12811,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (12815,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (12815,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (12815,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (12818,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
  -> INLINE: (12820,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (12822,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (12822,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (12823,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (12823,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (12823,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (12823,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (12823,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (12823,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (12824,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (12826,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12826,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (12826,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (12832,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (12832,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (12834,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (12836,71) std::shared_ptr<SAMRAI::hier::PatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12837,21) std::static_pointer_cast<SAMRAI::geom::CartesianPatchGeometry, SAMRAI::hier::PatchGeometry>(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *, const std::shared_ptr<SAMRAI::hier::PatchGeometry> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (12837,21) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
  -> INLINE: (12838,30) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> (12838,32) SAMRAI::hier::Patch::getPatchGeometry(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const SAMRAI::hier::Patch *) const
  -> INLINE: (12840,52) std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (12840,54) SAMRAI::geom::CartesianPatchGeometry::getDx(const SAMRAI::geom::CartesianPatchGeometry *) const
  -> INLINE: (12847,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (12849,58) std::__shared_ptr<FlowModel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<FlowModel, __gnu_cxx::_S_atomic> *) const
  -> (12849,60) FlowModel::getNumberOfGhostCells(const FlowModel *) const
  -> DELETED: (12852,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (12852,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12852,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (12852,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (12852,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (12855,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12855,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (12855,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (12855,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair<SAMRAI::hier::IntVector &, void>(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (12864,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (12867,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (12867,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (12876,63) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> (12876,75) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (12876,75) SAMRAI::pdat::CellData<Real>::CellData(SAMRAI::pdat::CellData<Real> *, const SAMRAI::hier::Box &, int, const SAMRAI::hier::IntVector &)
  -> INLINE: (12876,75) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::shared_ptr<SAMRAI::pdat::CellData<Real>>(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *, SAMRAI::pdat::CellData<Real> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (12876,75) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (12878,47) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (12878,49) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (12879,47) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (12879,49) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> (12881,71) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (12882,69) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (12884,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (12885,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (12885,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (12885,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (12885,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (12886,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (12888,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> INLINE: (12890,45) std::__shared_ptr<DerivativeFirstOrder, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<DerivativeFirstOrder, __gnu_cxx::_S_atomic> *) const
  -> INDIRECT- (VIRTUAL): (12896,25)  EXPR_CONV.SI64.P64(*((SI64*) (__$U56c_V$1fdd.0.914->__vptr_V$1ee_2.5 + EXPR_CONV.SI32.I64(3(SI32)) * 8(I64))))
  -> INLINE: (12898,45) std::__shared_ptr<DerivativeFirstOrder, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<DerivativeFirstOrder, __gnu_cxx::_S_atomic> *) const
  -> INDIRECT- (VIRTUAL): (12904,25)  EXPR_CONV.SI64.P64(*((SI64*) (__$U56d_V$1fde.0.914->__vptr_V$1ee_2.5 + EXPR_CONV.SI32.I64(3(SI32)) * 8(I64))))
  -> (12906,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (12908,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (12909,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (12911,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (12912,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (12914,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (12916,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (12917,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (12936,64) std::max<Real>(const Real &, const Real &)
  -> INLINE: (12947,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12947,13) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12947,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12947,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12947,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12948,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12962,5) std::shared_ptr<DerivativeFirstOrder>::~shared_ptr(std::shared_ptr<DerivativeFirstOrder> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12962,5) std::shared_ptr<DerivativeFirstOrder>::~shared_ptr(std::shared_ptr<DerivativeFirstOrder> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12963,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (12965,49) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (12965,49) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (12967,17) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (12967,17) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (12967,17) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12970,17) std::shared_ptr<DerivativeFirstOrder>::shared_ptr<DerivativeFirstOrder>(std::shared_ptr<DerivativeFirstOrder> *, DerivativeFirstOrder *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (12970,17) std::shared_ptr<DerivativeFirstOrder>::~shared_ptr(std::shared_ptr<DerivativeFirstOrder> *)
  -> INLINE: (12972,49) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (12972,49) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (12974,17) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (12974,17) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (12974,17) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12977,17) std::shared_ptr<DerivativeFirstOrder>::shared_ptr<DerivativeFirstOrder>(std::shared_ptr<DerivativeFirstOrder> *, DerivativeFirstOrder *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (12977,17) std::shared_ptr<DerivativeFirstOrder>::~shared_ptr(std::shared_ptr<DerivativeFirstOrder> *)
  -> INLINE: (12979,49) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (12979,49) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (12981,17) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (12981,17) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (12981,17) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12984,17) std::shared_ptr<DerivativeFirstOrder>::shared_ptr<DerivativeFirstOrder>(std::shared_ptr<DerivativeFirstOrder> *, DerivativeFirstOrder *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (12984,17) std::shared_ptr<DerivativeFirstOrder>::~shared_ptr(std::shared_ptr<DerivativeFirstOrder> *)
  -> INLINE: (12986,59) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (12990,26) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (12991,54) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (13006,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (13006,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (13006,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (13013,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (13013,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (13017,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (13017,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (13017,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (13020,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
  -> INLINE: (13022,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (13024,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (13024,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (13025,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (13025,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (13025,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (13025,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (13025,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (13025,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (13026,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (13028,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (13028,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (13028,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (13034,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (13034,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (13036,63) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (13038,71) std::shared_ptr<SAMRAI::hier::PatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (13039,21) std::static_pointer_cast<SAMRAI::geom::CartesianPatchGeometry, SAMRAI::hier::PatchGeometry>(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *, const std::shared_ptr<SAMRAI::hier::PatchGeometry> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (13039,21) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
  -> INLINE: (13040,30) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> (13040,32) SAMRAI::hier::Patch::getPatchGeometry(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const SAMRAI::hier::Patch *) const
  -> INLINE: (13042,52) std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (13042,54) SAMRAI::geom::CartesianPatchGeometry::getDx(const SAMRAI::geom::CartesianPatchGeometry *) const
  -> INLINE: (13049,63) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (13051,58) std::__shared_ptr<FlowModel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<FlowModel, __gnu_cxx::_S_atomic> *) const
  -> (13051,60) FlowModel::getNumberOfGhostCells(const FlowModel *) const
  -> DELETED: (13054,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> INLINE: (13054,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (13054,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::size_type, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::hasher &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::key_equal &, const std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (13054,66) std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>::~allocator(std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>> *)
  -> (13054,66) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
  -> INLINE: (13057,21) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (13057,21) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::insert<std::pair<std::string, SAMRAI::hier::IntVector>, void>(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *, std::pair<std::string, SAMRAI::hier::IntVector> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (13057,76) std::pair<std::string, SAMRAI::hier::IntVector>::~pair(std::pair<std::string, SAMRAI::hier::IntVector> *)
  -> INLINE: (13057,76) std::pair<std::string, SAMRAI::hier::IntVector>::pair<SAMRAI::hier::IntVector &, void>(std::pair<std::string, SAMRAI::hier::IntVector> *, const std::string &, SAMRAI::hier::IntVector &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (13066,21) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (13069,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (13069,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (13078,63) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> (13078,75) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
  -> (13078,75) SAMRAI::pdat::CellData<Real>::CellData(SAMRAI::pdat::CellData<Real> *, const SAMRAI::hier::Box &, int, const SAMRAI::hier::IntVector &)
  -> INLINE: (13078,75) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::shared_ptr<SAMRAI::pdat::CellData<Real>>(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *, SAMRAI::pdat::CellData<Real> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (13078,75) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
  -> INLINE: (13080,47) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (13080,49) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (13081,47) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (13081,49) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (13082,47) std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::CellData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (13082,49) SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(128,19) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> (13084,71) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (13085,69) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (13086,69) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> (13088,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (13089,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (13089,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (13089,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (13089,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (13090,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (13092,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> INLINE: (13094,45) std::__shared_ptr<DerivativeFirstOrder, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<DerivativeFirstOrder, __gnu_cxx::_S_atomic> *) const
  -> INDIRECT- (VIRTUAL): (13100,25)  EXPR_CONV.SI64.P64(*((SI64*) (__$U58a_V$202a.0.914->__vptr_V$1ee_2.5 + EXPR_CONV.SI32.I64(3(SI32)) * 8(I64))))
  -> INLINE: (13102,45) std::__shared_ptr<DerivativeFirstOrder, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<DerivativeFirstOrder, __gnu_cxx::_S_atomic> *) const
  -> INDIRECT- (VIRTUAL): (13108,25)  EXPR_CONV.SI64.P64(*((SI64*) (__$U58b_V$202b.0.914->__vptr_V$1ee_2.5 + EXPR_CONV.SI32.I64(3(SI32)) * 8(I64))))
  -> INLINE: (13110,46) std::__shared_ptr<DerivativeFirstOrder, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<DerivativeFirstOrder, __gnu_cxx::_S_atomic> *) const
  -> INDIRECT- (VIRTUAL): (13116,25)  EXPR_CONV.SI64.P64(*((SI64*) (__$U58c_V$202c.0.914->__vptr_V$1ee_2.5 + EXPR_CONV.SI32.I64(3(SI32)) * 8(I64))))
  -> (13118,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (13120,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (13121,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (13122,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (13124,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> (13125,68) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
  -> INLINE: (13127,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (13130,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (13131,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (13132,68) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (13155,68) std::max<Real>(const Real &, const Real &)
  -> INLINE: (13167,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (13167,13) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (13167,13) std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>>::~unordered_map(std::unordered_map<std::string, SAMRAI::hier::IntVector, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (13167,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (13167,13) std::shared_ptr<SAMRAI::pdat::CellData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::CellData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (13168,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (13182,5) std::shared_ptr<DerivativeFirstOrder>::~shared_ptr(std::shared_ptr<DerivativeFirstOrder> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (13182,5) std::shared_ptr<DerivativeFirstOrder>::~shared_ptr(std::shared_ptr<DerivativeFirstOrder> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (13182,5) std::shared_ptr<DerivativeFirstOrder>::~shared_ptr(std::shared_ptr<DerivativeFirstOrder> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (13184,5) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12615,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12615,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12615,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12615,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12615,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12615,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12637,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12647,21)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12705,25)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12728,21)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12738,25)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12738,25)
            remark #15300: LOOP WAS VECTORIZED
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12738,25)
         <Remainder loop for vectorization>
            remark #15301: REMAINDER LOOP WAS VECTORIZED
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12738,25)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12791,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12791,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12791,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12791,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12791,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12791,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12813,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12823,21)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12885,25)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12919,21)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12921,25)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12932,29)
            <Peeled loop for vectorization>
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12932,29)
               remark #15300: LOOP WAS VECTORIZED
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12932,29)
            <Remainder loop for vectorization>
               remark #15301: REMAINDER LOOP WAS VECTORIZED
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12932,29)
            <Remainder loop for vectorization>
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12993,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12993,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12993,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12993,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12993,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12993,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(13015,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(13025,21)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(13089,25)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(13134,21)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(13136,25)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(13138,29)
               remark #15542: loop was not vectorized: inner loop was already vectorized

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(13151,33)
               <Peeled loop for vectorization>
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(13151,33)
                  remark #15300: LOOP WAS VECTORIZED
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(13151,33)
               <Remainder loop for vectorization>
                  remark #15301: REMAINDER LOOP WAS VECTORIZED
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(13151,33)
               <Remainder loop for vectorization>
               LOOP END
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12621,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12635,36) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12797,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12811,36) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12999,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(13013,36) ]
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/hashtable_policy.h(769,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
/home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp(12581,1):remark #34051: REGISTER ALLOCATION : [_ZN24FlowModelMPIHelperMaxMin50getMaxMagnitudeGradientWithInhomogeneousXDirectionESsiiRKSt10shared_ptrIN6SAMRAI4hier15VariableContextEE] /home/akula/HAMeRS_IB/HAMeRS/src/flow/flow_models/MPI_helpers/FlowModelMPIHelperMaxMin.cpp:12581

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :    1861
            Global    :     483
            Local     :    1378
        Regenerable   :     552
        Spilled       :      72
        
    Routine stack
        Variables     :    1953 bytes*
            Reads     :     133 [1.15e+03 ~ 0.1%]
            Writes    :     129 [1.99e+02 ~ 0.0%]
        Spills        :     536 bytes*
            Reads     :     259 [1.63e+04 ~ 1.6%]
            Writes    :      82 [5.43e+03 ~ 0.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::IntVector::getOne(const SAMRAI::tbox::Dimension &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::IntVector::getOne(const SAMRAI::tbox::Dimension &)) [141] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(1145,4)
  -> INLINE: (1146,27) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const


    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(1145,4):remark #34051: REGISTER ALLOCATION : [_ZN6SAMRAI4hier9IntVector6getOneERKNS_4tbox9DimensionE] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:1145

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rax rdi]
        
    Routine temporaries
        Total         :      11
            Global    :       0
            Local     :      11
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::IntVector::operator*(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, int) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::IntVector::operator*(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, int) const) [142] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(569,4)
  -> INLINE: (571,11) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, int)
    -> INLINE: (556,44) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: (558,18) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(557,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(572,11)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between this (558:18) and *(this+i*4) (558:18)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(557,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(572,11)
<Remainder>
LOOP END

    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(569,4):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4hier9IntVectormlEi] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:569

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rbp rsi rdi r8-r12]
        
    Routine temporaries
        Total         :      35
            Global    :      13
            Local     :      22
        Regenerable   :       0
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_base<__gnu_cxx::_S_atomic>::~_Sp_counted_base(std::_Sp_counted_base<__gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(114,7):remark #34051: REGISTER ALLOCATION : [_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EED1Ev] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:114

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       8
            Global    :       0
            Local     :       8
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_base<__gnu_cxx::_S_atomic>::~_Sp_counted_base(std::_Sp_counted_base<__gnu_cxx::_S_atomic> *const)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(113,7):remark #34051: REGISTER ALLOCATION : [_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EED0Ev] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:113

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_base<__gnu_cxx::_S_atomic>::_M_destroy(std::_Sp_counted_base<__gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(124,7):remark #34051: REGISTER ALLOCATION : [_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:124

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      19
            Global    :       7
            Local     :      12
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::shared_ptr<SAMRAI::tbox::Timer>::~shared_ptr(std::shared_ptr<SAMRAI::tbox::Timer> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr.h(93,11):remark #34051: REGISTER ALLOCATION : [_ZNSt10shared_ptrIN6SAMRAI4tbox5TimerEED1Ev] /usr/include/c++/4.8.5/bits/shared_ptr.h:93

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rdi r12-r13]
        
    Routine temporaries
        Total         :      24
            Global    :      12
            Local     :      12
        Regenerable   :       3
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Vector_base<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::_M_get_Tp_allocator(std::_Vector_base<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(114,7):remark #34051: REGISTER ALLOCATION : [_ZNSt12_Vector_baseISt10shared_ptrIN6SAMRAI4pdat8CellDataIdEEESaIS5_EE19_M_get_Tp_allocatorEv] /usr/include/c++/4.8.5/bits/stl_vector.h:114

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rax rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Vector_base<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::_M_deallocate(std::_Vector_base<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>> *, std::_Vector_base<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::pointer, std::size_t)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(172,7):remark #34051: REGISTER ALLOCATION : [_ZNSt12_Vector_baseISt10shared_ptrIN6SAMRAI4pdat8CellDataIdEEESaIS5_EE13_M_deallocateEPS5_m] /usr/include/c++/4.8.5/bits/stl_vector.h:172

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdx rsi rdi]
        
    Routine temporaries
        Total         :      11
            Global    :       7
            Local     :       4
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Destroy_aux<false>::__destroy<std::_Vector_base<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::pointer>(std::_Vector_base<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::pointer, std::_Vector_base<std::shared_ptr<SAMRAI::pdat::CellData<Real>>, std::allocator<std::shared_ptr<SAMRAI::pdat::CellData<Real>>>>::pointer)

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between __first->_M_refcount->_M_pi (545:2) and *__mem (68:6)
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_construct.h(101,2):remark #34051: REGISTER ALLOCATION : [_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrIN6SAMRAI4pdat8CellDataIdEEEEEvT_S9_] /usr/include/c++/4.8.5/bits/stl_construct.h:101

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rsi rdi r12-r15]
        
    Routine temporaries
        Total         :      24
            Global    :      12
            Local     :      12
        Regenerable   :       3
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      32 bytes*
            Reads     :       4 [3.94e+00 ~ 4.0%]
            Writes    :       4 [3.94e+00 ~ 4.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ExtendedFlattenedHierarchy *, __gnu_cxx::_S_atomic>::_M_dispose(std::_Sp_counted_ptr<ExtendedFlattenedHierarchy *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(290,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP26ExtendedFlattenedHierarchyLN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:290

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rbp rdi]
        
    Routine temporaries
        Total         :      11
            Global    :       7
            Local     :       4
        Regenerable   :       0
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ExtendedFlattenedHierarchy *, __gnu_cxx::_S_atomic>::_M_destroy(std::_Sp_counted_ptr<ExtendedFlattenedHierarchy *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(294,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP26ExtendedFlattenedHierarchyLN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:294

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      19
            Global    :       7
            Local     :      12
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ExtendedFlattenedHierarchy *, __gnu_cxx::_S_atomic>::_M_get_deleter(std::_Sp_counted_ptr<ExtendedFlattenedHierarchy *, __gnu_cxx::_S_atomic> *, const std::type_info &)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(298,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP26ExtendedFlattenedHierarchyLN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:298

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rsi rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ExtendedFlattenedHierarchy *, __gnu_cxx::_S_atomic>::~_Sp_counted_ptr(std::_Sp_counted_ptr<ExtendedFlattenedHierarchy *, __gnu_cxx::_S_atomic> *const)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(281,11):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP26ExtendedFlattenedHierarchyLN9__gnu_cxx12_Lock_policyE2EED0Ev] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:281

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ExtendedFlattenedHierarchy *, __gnu_cxx::_S_atomic>::~_Sp_counted_ptr(std::_Sp_counted_ptr<ExtendedFlattenedHierarchy *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(281,11):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP26ExtendedFlattenedHierarchyLN9__gnu_cxx12_Lock_policyE2EED1Ev] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:281

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       7
            Global    :       0
            Local     :       7
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<SAMRAI::pdat::ArrayData<Real> *, __gnu_cxx::_S_atomic>::_M_dispose(std::_Sp_counted_ptr<SAMRAI::pdat::ArrayData<Real> *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(290,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIPN6SAMRAI4pdat9ArrayDataIdEELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:290

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rbx rdi]
        
    Routine temporaries
        Total         :      14
            Global    :       8
            Local     :       6
        Regenerable   :       0
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<SAMRAI::pdat::ArrayData<Real> *, __gnu_cxx::_S_atomic>::_M_destroy(std::_Sp_counted_ptr<SAMRAI::pdat::ArrayData<Real> *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(294,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIPN6SAMRAI4pdat9ArrayDataIdEELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:294

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      19
            Global    :       7
            Local     :      12
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<SAMRAI::pdat::ArrayData<Real> *, __gnu_cxx::_S_atomic>::_M_get_deleter(std::_Sp_counted_ptr<SAMRAI::pdat::ArrayData<Real> *, __gnu_cxx::_S_atomic> *, const std::type_info &)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(298,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIPN6SAMRAI4pdat9ArrayDataIdEELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:298

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rsi rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<SAMRAI::pdat::ArrayData<Real> *, __gnu_cxx::_S_atomic>::~_Sp_counted_ptr(std::_Sp_counted_ptr<SAMRAI::pdat::ArrayData<Real> *, __gnu_cxx::_S_atomic> *const)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(281,11):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIPN6SAMRAI4pdat9ArrayDataIdEELN9__gnu_cxx12_Lock_policyE2EED0Ev] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:281

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<SAMRAI::pdat::ArrayData<Real> *, __gnu_cxx::_S_atomic>::~_Sp_counted_ptr(std::_Sp_counted_ptr<SAMRAI::pdat::ArrayData<Real> *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(281,11):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIPN6SAMRAI4pdat9ArrayDataIdEELN9__gnu_cxx12_Lock_policyE2EED1Ev] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:281

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       7
            Global    :       0
            Local     :       7
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<DerivativeFirstOrder *, __gnu_cxx::_S_atomic>::_M_dispose(std::_Sp_counted_ptr<DerivativeFirstOrder *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(290,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP20DerivativeFirstOrderLN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:290

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      20
            Global    :       7
            Local     :      13
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<DerivativeFirstOrder *, __gnu_cxx::_S_atomic>::_M_destroy(std::_Sp_counted_ptr<DerivativeFirstOrder *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(294,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP20DerivativeFirstOrderLN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:294

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      19
            Global    :       7
            Local     :      12
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<DerivativeFirstOrder *, __gnu_cxx::_S_atomic>::_M_get_deleter(std::_Sp_counted_ptr<DerivativeFirstOrder *, __gnu_cxx::_S_atomic> *, const std::type_info &)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(298,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP20DerivativeFirstOrderLN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:298

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rsi rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<DerivativeFirstOrder *, __gnu_cxx::_S_atomic>::~_Sp_counted_ptr(std::_Sp_counted_ptr<DerivativeFirstOrder *, __gnu_cxx::_S_atomic> *const)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(281,11):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP20DerivativeFirstOrderLN9__gnu_cxx12_Lock_policyE2EED0Ev] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:281

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<DerivativeFirstOrder *, __gnu_cxx::_S_atomic>::~_Sp_counted_ptr(std::_Sp_counted_ptr<DerivativeFirstOrder *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(281,11):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP20DerivativeFirstOrderLN9__gnu_cxx12_Lock_policyE2EED1Ev] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:281

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       7
            Global    :       0
            Local     :       7
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<SAMRAI::pdat::CellData<Real> *, __gnu_cxx::_S_atomic>::_M_dispose(std::_Sp_counted_ptr<SAMRAI::pdat::CellData<Real> *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(290,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIPN6SAMRAI4pdat8CellDataIdEELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:290

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      20
            Global    :       7
            Local     :      13
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<SAMRAI::pdat::CellData<Real> *, __gnu_cxx::_S_atomic>::_M_destroy(std::_Sp_counted_ptr<SAMRAI::pdat::CellData<Real> *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(294,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIPN6SAMRAI4pdat8CellDataIdEELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:294

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      19
            Global    :       7
            Local     :      12
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<SAMRAI::pdat::CellData<Real> *, __gnu_cxx::_S_atomic>::_M_get_deleter(std::_Sp_counted_ptr<SAMRAI::pdat::CellData<Real> *, __gnu_cxx::_S_atomic> *, const std::type_info &)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(298,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIPN6SAMRAI4pdat8CellDataIdEELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:298

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rsi rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<SAMRAI::pdat::CellData<Real> *, __gnu_cxx::_S_atomic>::~_Sp_counted_ptr(std::_Sp_counted_ptr<SAMRAI::pdat::CellData<Real> *, __gnu_cxx::_S_atomic> *const)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(281,11):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIPN6SAMRAI4pdat8CellDataIdEELN9__gnu_cxx12_Lock_policyE2EED0Ev] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:281

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<SAMRAI::pdat::CellData<Real> *, __gnu_cxx::_S_atomic>::~_Sp_counted_ptr(std::_Sp_counted_ptr<SAMRAI::pdat::CellData<Real> *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(281,11):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIPN6SAMRAI4pdat8CellDataIdEELN9__gnu_cxx12_Lock_policyE2EED1Ev] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:281

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       7
            Global    :       0
            Local     :       7
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::tbox::MessageStream::getCurrentSize(const SAMRAI::tbox::MessageStream *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::tbox::MessageStream::getCurrentSize(const SAMRAI::tbox::MessageStream *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h(150,4)

===========================================================================

Begin optimization report for: SAMRAI::tbox::MessageStream::growAsNeeded(const SAMRAI::tbox::MessageStream *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::tbox::MessageStream::growAsNeeded(const SAMRAI::tbox::MessageStream *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h(362,4)

===========================================================================

Begin optimization report for: SAMRAI::tbox::MessageStream::copyDataIn(SAMRAI::tbox::MessageStream *, const void *, size_t)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::tbox::MessageStream::copyDataIn(SAMRAI::tbox::MessageStream *, const void *, size_t)) /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h(398,4)

===========================================================================

Begin optimization report for: SAMRAI::tbox::MessageStream::getSizeof<int>(size_t)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::tbox::MessageStream::getSizeof<int>(size_t)) /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h(128,4)

===========================================================================

Begin optimization report for: SAMRAI::tbox::MessageStream::getSizeof<bool>(size_t)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::tbox::MessageStream::getSizeof<bool>(size_t)) /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h(128,4)

===========================================================================

Begin optimization report for: SAMRAI::tbox::MessageStream::getSizeof<char>(size_t)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::tbox::MessageStream::getSizeof<char>(size_t)) /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h(128,4)

===========================================================================

Begin optimization report for: SAMRAI::tbox::MessageStream::getSizeof<dcomplex>(size_t)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::tbox::MessageStream::getSizeof<dcomplex>(size_t)) /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h(128,4)

===========================================================================

Begin optimization report for: SAMRAI::tbox::MessageStream::getSizeof<double>(size_t)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::tbox::MessageStream::getSizeof<double>(size_t)) /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h(128,4)

===========================================================================

Begin optimization report for: SAMRAI::tbox::MessageStream::getSizeof<float>(size_t)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::tbox::MessageStream::getSizeof<float>(size_t)) /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h(128,4)

===========================================================================

Begin optimization report for: SAMRAI::tbox::MessageStream::getWriteBuffer<Real>(SAMRAI::tbox::MessageStream *, size_t)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::tbox::MessageStream::getWriteBuffer<Real>(SAMRAI::tbox::MessageStream *, size_t)) /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h(215,4)

===========================================================================

Begin optimization report for: SAMRAI::tbox::MessageStream::pack<__gnu_cxx::__alloc_traits<std::allocator<double>>::value_type>(SAMRAI::tbox::MessageStream *, const __gnu_cxx::__alloc_traits<std::allocator<double>>::value_type *, size_t)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::tbox::MessageStream::pack<__gnu_cxx::__alloc_traits<std::allocator<double>>::value_type>(SAMRAI::tbox::MessageStream *, const __gnu_cxx::__alloc_traits<std::allocator<double>>::value_type *, size_t)) /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h(262,4)

===========================================================================

Begin optimization report for: SAMRAI::tbox::MessageStream::getReadBuffer<Real>(SAMRAI::tbox::MessageStream *, size_t)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::tbox::MessageStream::getReadBuffer<Real>(SAMRAI::tbox::MessageStream *, size_t)) /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h(193,4)

===========================================================================

Begin optimization report for: SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/Dimension.h(73,4)

===========================================================================

Begin optimization report for: SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/Dimension.h(137,4)

===========================================================================

Begin optimization report for: SAMRAI::tbox::Database::getVector(SAMRAI::tbox::Database *, const std::string &, std::vector<double, std::allocator<double>> &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::tbox::Database::getVector(SAMRAI::tbox::Database *, const std::string &, std::vector<double, std::allocator<double>> &)) /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/Database.h(1470,4)

===========================================================================

Begin optimization report for: SAMRAI::tbox::Database::putVector(SAMRAI::tbox::Database *, const std::string &, const std::vector<double, std::allocator<double>> &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::tbox::Database::putVector(SAMRAI::tbox::Database *, const std::string &, const std::vector<double, std::allocator<double>> &)) /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/Database.h(1486,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::BlockId::operator==(const SAMRAI::hier::BlockId *, const SAMRAI::hier::BlockId &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::BlockId::operator==(const SAMRAI::hier::BlockId *, const SAMRAI::hier::BlockId &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BlockId.h(155,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::LocalId::operator==(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::LocalId::operator==(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/LocalId.h(354,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::LocalId::operator<(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::LocalId::operator<(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/LocalId.h(382,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/GlobalId.h(106,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::PeriodicId::operator<(const SAMRAI::hier::PeriodicId *, const SAMRAI::hier::PeriodicId &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::PeriodicId::operator<(const SAMRAI::hier::PeriodicId *, const SAMRAI::hier::PeriodicId &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PeriodicId.h(163,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::BoxId::operator<(const SAMRAI::hier::BoxId *, const SAMRAI::hier::BoxId &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::BoxId::operator<(const SAMRAI::hier::BoxId *, const SAMRAI::hier::BoxId &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h(222,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(253,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(269,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, int)) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(555,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::IntVector::operator==(const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::IntVector::operator==(const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(756,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(148,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Index::operator!=(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Index::operator!=(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(162,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Index::operator+=(SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Index::operator+=(SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &)) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(175,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Index::operator+(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Index::operator+(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(193,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Index::operator+=(SAMRAI::hier::Index *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Index::operator+=(SAMRAI::hier::Index *, int)) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(238,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Index::operator+(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, int) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Index::operator+(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, int) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(251,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Index::operator-=(SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Index::operator-=(SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &)) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(297,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(315,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Index::operator[](SAMRAI::hier::Index *, unsigned int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Index::operator[](SAMRAI::hier::Index *, unsigned int)) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(476,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(489,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(515,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(724,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Transformation::getRotation(const SAMRAI::hier::Transformation *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Transformation::getRotation(const SAMRAI::hier::Transformation *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Transformation.h(150,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Transformation::getOffset(const SAMRAI::hier::Transformation *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Transformation::getOffset(const SAMRAI::hier::Transformation *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Transformation.h(159,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Transformation::getBeginBlock(const SAMRAI::hier::Transformation *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Transformation::getBeginBlock(const SAMRAI::hier::Transformation *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Transformation.h(215,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Transformation::getEndBlock(const SAMRAI::hier::Transformation *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Transformation::getEndBlock(const SAMRAI::hier::Transformation *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Transformation.h(223,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Transformation::rotateIndex(SAMRAI::hier::Index &, SAMRAI::hier::Transformation::RotationIdentifier)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Transformation::rotateIndex(SAMRAI::hier::Index &, SAMRAI::hier::Transformation::RotationIdentifier)) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Transformation.h(336,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Box::getBoxId(const SAMRAI::hier::Box *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Box::getBoxId(const SAMRAI::hier::Box *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(315,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(495,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Box::upper(const SAMRAI::hier::Box *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Box::upper(const SAMRAI::hier::Box *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(515,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(598,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Box::numberCells(const SAMRAI::hier::Box *, SAMRAI::hier::Box::dir_t) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Box::numberCells(const SAMRAI::hier::Box *, SAMRAI::hier::Box::dir_t) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(622,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Box::size(const SAMRAI::hier::Box *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Box::size(const SAMRAI::hier::Box *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(652,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Box::offset(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Box::offset(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(679,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Box::isSpatiallyEqual(const SAMRAI::hier::Box *, const SAMRAI::hier::Box &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Box::isSpatiallyEqual(const SAMRAI::hier::Box *, const SAMRAI::hier::Box &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(753,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Box::operator=(SAMRAI::hier::Box *, const SAMRAI::tbox::DatabaseBox &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Box::operator=(SAMRAI::hier::Box *, const SAMRAI::tbox::DatabaseBox &)) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(1166,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Box::Box_from_DatabaseBox(SAMRAI::hier::Box *, const SAMRAI::tbox::DatabaseBox &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Box::Box_from_DatabaseBox(SAMRAI::hier::Box *, const SAMRAI::tbox::DatabaseBox &)) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(1182,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Box::operator void(SAMRAI::tbox::DatabaseBox *, const SAMRAI::hier::Box *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Box::operator void(SAMRAI::tbox::DatabaseBox *, const SAMRAI::hier::Box *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(1212,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Box::shift(SAMRAI::hier::Box *, const SAMRAI::hier::Box &, const SAMRAI::hier::IntVector &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Box::shift(SAMRAI::hier::Box *, const SAMRAI::hier::Box &, const SAMRAI::hier::IntVector &)) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(1248,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(1298,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator->(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator->(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h(170,7)

===========================================================================

Begin optimization report for: SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *)) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h(201,7)

===========================================================================

Begin optimization report for: SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchData.h(94,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::PatchData::getGhostCellWidth(const SAMRAI::hier::PatchData *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchData.h(103,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::PatchData::getDim(const SAMRAI::hier::PatchData *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::PatchData::getDim(const SAMRAI::hier::PatchData *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchData.h(245,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Patch.h(93,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h(1171,7)

===========================================================================

Begin optimization report for: SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h(1200,7)

===========================================================================

Begin optimization report for: SAMRAI::hier::PatchHierarchy::getNumberOfLevels(const SAMRAI::hier::PatchHierarchy *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::PatchHierarchy::getNumberOfLevels(const SAMRAI::hier::PatchHierarchy *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h(548,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h(780,4)

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellIndex::operator+=(SAMRAI::pdat::CellIndex *, const SAMRAI::hier::IntVector &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::CellIndex::operator+=(SAMRAI::pdat::CellIndex *, const SAMRAI::hier::IntVector &)) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellIndex.h(83,4)

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellIndex::operator!=(const SAMRAI::pdat::CellIndex *, const SAMRAI::pdat::CellIndex &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::CellIndex::operator!=(const SAMRAI::pdat::CellIndex *, const SAMRAI::pdat::CellIndex &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellIndex.h(254,4)

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellIterator::operator*(const SAMRAI::pdat::CellIterator *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::CellIterator::operator*(const SAMRAI::pdat::CellIterator *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellIterator.h(76,4)

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellIterator::operator!=(const SAMRAI::pdat::CellIterator *, const SAMRAI::pdat::CellIterator &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::CellIterator::operator!=(const SAMRAI::pdat::CellIterator *, const SAMRAI::pdat::CellIterator &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellIterator.h(121,4)

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellData<Real>::~CellData(SAMRAI::pdat::CellData<Real> *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::pdat::CellData<Real>::~CellData(SAMRAI::pdat::CellData<Real> *)) [643] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(111,1)
  -> INLINE: (112,1) std::shared_ptr<SAMRAI::pdat::ArrayData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::ArrayData<Real>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(111,1):remark #34051: REGISTER ALLOCATION : [_ZN6SAMRAI4pdat8CellDataIdED1Ev] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:111

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rbx rbp rdi r15]
        
    Routine temporaries
        Total         :      32
            Global    :      13
            Local     :      19
        Regenerable   :       4
        Spilled       :       3
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellData<Real>::~CellData(SAMRAI::pdat::CellData<Real> *const)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::pdat::CellData<Real>::~CellData(SAMRAI::pdat::CellData<Real> *const)) [644] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(110,17)
  -> INLINE: (110,17) SAMRAI::pdat::CellData<Real>::~CellData(SAMRAI::pdat::CellData<Real> *)
    -> INLINE: (112,1) std::shared_ptr<SAMRAI::pdat::ArrayData<Real>>::~shared_ptr(std::shared_ptr<SAMRAI::pdat::ArrayData<Real>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(110,17):remark #34051: REGISTER ALLOCATION : [_ZN6SAMRAI4pdat8CellDataIdED0Ev] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:110

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rbx rdi r14-r15]
        
    Routine temporaries
        Total         :      33
            Global    :      13
            Local     :      20
        Regenerable   :       4
        Spilled       :       3
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellData<Real>::getDepth(const SAMRAI::pdat::CellData<Real> *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::CellData<Real>::getDepth(const SAMRAI::pdat::CellData<Real> *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(117,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::CellData<Real>::getPointer(SAMRAI::pdat::CellData<Real> *, int)) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(125,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellData<Real>::copy(SAMRAI::pdat::CellData<Real> *, const SAMRAI::hier::PatchData &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::pdat::CellData<Real>::copy(SAMRAI::pdat::CellData<Real> *, const SAMRAI::hier::PatchData &)) [647] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(212,1)
  -> INDIRECT- (VIRTUAL): (217,18)  SAMRAI::pdat::CellData<Real>::copy2(const SAMRAI::pdat::CellData<Real> *, SAMRAI::hier::PatchData &) const (670)
  -> INLINE: (219,35) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (219,37) SAMRAI::pdat::ArrayData<Real>::getBox(const SAMRAI::pdat::ArrayData<Real> *) const
  -> INLINE: (219,61) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (219,63) SAMRAI::pdat::ArrayData<Real>::getBox(const SAMRAI::pdat::ArrayData<Real> *) const
  -> INLINE: (220,16) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (221,16) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (221,18) SAMRAI::pdat::ArrayData<Real>::copy(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(294,15) SAMRAI::hier::Box::isSpatiallyEqual(const SAMRAI::hier::Box *, const SAMRAI::hier::Box &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(754,21) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(754,43) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,27) SAMRAI::hier::BlockId::operator==(const SAMRAI::hier::BlockId *, const SAMRAI::hier::BlockId &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,51) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,66) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(295,13) SAMRAI::hier::Box::isSpatiallyEqual(const SAMRAI::hier::Box *, const SAMRAI::hier::Box &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(754,21) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(754,43) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,27) SAMRAI::hier::BlockId::operator==(const SAMRAI::hier::BlockId *, const SAMRAI::hier::BlockId &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,51) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,66) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(297,37) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(298,47) std::vector<double, std::allocator<double>>::operator[](const std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(312,16) SAMRAI::pdat::CopyOperation<Real>::operator()(const SAMRAI::pdat::CopyOperation<Real> *, Real &, const Real &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(320,20) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(325,46) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(327,10) SAMRAI::pdat::ArrayDataOperationUtilities<Real, SAMRAI::pdat::CopyOperation<Real>>::doArrayDataOperationOnBox(SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &, const SAMRAI::hier::IntVector &, unsigned int, unsigned int, unsigned int, const SAMRAI::pdat::CopyOperation<Real> &)
  -> INLINE: (221,23) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(221,16)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(222,18)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(222,18)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(222,18)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(222,18)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(222,18)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(222,18)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(222,18)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(222,18)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(311,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(222,18)
   remark #25401: memcopy(with guard) generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(311,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(222,18)
   <Multiversioned v2>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(311,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(222,18)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(222,18)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
LOOP END

    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(311,7):remark #34026: call to memcpy implemented as a call to optimized library version
/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(212,1):remark #34051: REGISTER ALLOCATION : [_ZN6SAMRAI4pdat8CellDataIdE4copyERKNS_4hier9PatchDataE] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:212

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rbp rsi rdi r8-r11 r13 r15]
        
    Routine temporaries
        Total         :     173
            Global    :      60
            Local     :     113
        Regenerable   :      37
        Spilled       :       4
        
    Routine stack
        Variables     :     273 bytes*
            Reads     :      17 [9.01e+00 ~ 8.2%]
            Writes    :      10 [1.11e+00 ~ 1.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellData<Real>::copy2(const SAMRAI::pdat::CellData<Real> *, SAMRAI::hier::PatchData &) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::pdat::CellData<Real>::copy2(const SAMRAI::pdat::CellData<Real> *, SAMRAI::hier::PatchData &) const) [648] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(230,1)
  -> INLINE: (237,32) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (237,34) SAMRAI::pdat::ArrayData<Real>::getBox(const SAMRAI::pdat::ArrayData<Real> *) const
  -> INLINE: (237,58) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (237,60) SAMRAI::pdat::ArrayData<Real>::getBox(const SAMRAI::pdat::ArrayData<Real> *) const
  -> INLINE: (238,13) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (239,20) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (239,22) SAMRAI::pdat::ArrayData<Real>::copy(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(294,15) SAMRAI::hier::Box::isSpatiallyEqual(const SAMRAI::hier::Box *, const SAMRAI::hier::Box &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(754,21) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(754,43) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,27) SAMRAI::hier::BlockId::operator==(const SAMRAI::hier::BlockId *, const SAMRAI::hier::BlockId &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,51) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,66) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(295,13) SAMRAI::hier::Box::isSpatiallyEqual(const SAMRAI::hier::Box *, const SAMRAI::hier::Box &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(754,21) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(754,43) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,27) SAMRAI::hier::BlockId::operator==(const SAMRAI::hier::BlockId *, const SAMRAI::hier::BlockId &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,51) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,66) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(297,37) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(298,47) std::vector<double, std::allocator<double>>::operator[](const std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(312,16) SAMRAI::pdat::CopyOperation<Real>::operator()(const SAMRAI::pdat::CopyOperation<Real> *, Real &, const Real &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(320,20) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(325,46) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(327,10) SAMRAI::pdat::ArrayDataOperationUtilities<Real, SAMRAI::pdat::CopyOperation<Real>>::doArrayDataOperationOnBox(SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &, const SAMRAI::hier::IntVector &, unsigned int, unsigned int, unsigned int, const SAMRAI::pdat::CopyOperation<Real> &)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(64,35) SAMRAI::pdat::ArrayData<Real>::getDim(const SAMRAI::pdat::ArrayData<Real> *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1251,17) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(66,30) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(67,36) SAMRAI::pdat::ArrayData<Real>::getPointer(const SAMRAI::pdat::ArrayData<Real> *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(220,19) std::vector<double, std::allocator<double>>::operator[](const std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(70,33) SAMRAI::pdat::ArrayData<Real>::getBox(const SAMRAI::pdat::ArrayData<Real> *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(71,33) SAMRAI::pdat::ArrayData<Real>::getBox(const SAMRAI::pdat::ArrayData<Real> *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(77,47) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(77,47) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(78,24) SAMRAI::hier::Box::numberCells(const SAMRAI::hier::Box *, SAMRAI::hier::Box::dir_t) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(623,11) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
          -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(79,26) SAMRAI::hier::Box::numberCells(const SAMRAI::hier::Box *, SAMRAI::hier::Box::dir_t) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(623,11) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
          -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(80,26) SAMRAI::hier::Box::numberCells(const SAMRAI::hier::Box *, SAMRAI::hier::Box::dir_t) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(623,11) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
          -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(84,34) SAMRAI::pdat::ArrayData<Real>::getOffset(const SAMRAI::pdat::ArrayData<Real> *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(85,34) SAMRAI::pdat::ArrayData<Real>::getOffset(const SAMRAI::pdat::ArrayData<Real> *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(97,53) SAMRAI::hier::Box::size(const SAMRAI::hier::Box *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(654,12) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
          -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(655,44) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(655,54) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(657,48) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(657,58) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(99,31) SAMRAI::hier::Box::offset(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,29) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,38) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,18) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,32) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,49) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,59) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,40) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,50) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(99,44) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(100,31) SAMRAI::hier::Box::offset(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,29) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,38) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,18) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,32) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,49) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,59) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,40) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,50) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(100,44) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(100,52) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(319,11) SAMRAI::hier::Index::operator-=(SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &)
          -> INLINE: (300,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: (300,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: (301,27) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(187,52) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(187,52) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(199,15) SAMRAI::pdat::CopyOperation<Real>::operator()(const SAMRAI::pdat::CopyOperation<Real> *, Real &, const Real &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(208,53) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(208,53) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (239,27) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(239,13)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(311,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
   remark #25401: memcopy(with guard) generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(311,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
   <Multiversioned v2>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(311,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(77,47) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(656,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
   remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
   remark #25439: unrolled with remainder by 8  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(656,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
<Remainder>
   remark #25436: completely unrolled by 7  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between myoffset (682:10) and myoffset (682:10)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
<Remainder>
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(300,42) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 8  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between myoffset (682:10) and myoffset (682:10)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
<Remainder>
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(119,4) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between dst_b[nd] (188:10) and dst_b[m] (230:16)

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(187,52) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
      remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(187,52) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
   <Remainder>
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(196,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between vdst (31:4) and vdst (31:4)

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(198,10) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed FLOW dependence between vdst (31:4) and vsrc (31:4)
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(198,10) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
      <Remainder>
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(208,53) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
         remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(208,67) ]
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(222,13) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
         remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
         remark #25439: unrolled with remainder by 8  
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(229,13) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
         remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(229,13) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
      <Remainder>
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(222,13) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(240,22)
      <Remainder>
         remark #25436: completely unrolled by 7  
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(311,7):remark #34026: call to memcpy implemented as a call to optimized library version
/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(230,1):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4pdat8CellDataIdE5copy2ERNS_4hier9PatchDataE] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:230

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     519
            Global    :     140
            Local     :     379
        Regenerable   :      35
        Spilled       :      18
        
    Routine stack
        Variables     :     392 bytes*
            Reads     :     114 [2.09e+02 ~ 10.3%]
            Writes    :      44 [1.54e+02 ~ 7.6%]
        Spills        :      96 bytes*
            Reads     :      21 [2.28e+01 ~ 1.1%]
            Writes    :      21 [1.27e+01 ~ 0.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellData<Real>::copy(SAMRAI::pdat::CellData<Real> *, const SAMRAI::hier::PatchData &, const SAMRAI::hier::BoxOverlap &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::pdat::CellData<Real>::copy(SAMRAI::pdat::CellData<Real> *, const SAMRAI::hier::PatchData &, const SAMRAI::hier::BoxOverlap &)) [649] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(257,1)
  -> INLINE: (258,10) std::__shared_ptr<SAMRAI::tbox::Timer, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::tbox::Timer, __gnu_cxx::_S_atomic> *) const
  -> INDIRECT- (VIRTUAL): (264,24)  SAMRAI::pdat::CellData<Real>::copy2(const SAMRAI::pdat::CellData<Real> *, SAMRAI::hier::PatchData &, const SAMRAI::hier::BoxOverlap &) const (672)
  -> INDIRECT- (VIRTUAL): (266,11)  EXPR_CONV.SI64.P64(*((SI64*) (t_overlap.175006_V$b30.0.671->__vptr_V$b31_2.39 + EXPR_CONV.SI32.I64(4(SI32)) * 8(I64))))
  -> INLINE: (266,42) SAMRAI::hier::Transformation::getRotation(const SAMRAI::hier::Transformation *) const
  -> INLINE: (268,16) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (268,18) SAMRAI::pdat::ArrayData<Real>::copy(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::BoxContainer &, const SAMRAI::hier::Transformation &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(451,54) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(452,11) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(452,11) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(452,20) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(452,20) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(452,27) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(203,13) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator++(std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *)
         {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(205,13) std::_List_const_iterator<SAMRAI::hier::Box>::operator++(std::_List_const_iterator<SAMRAI::hier::Box> *)
    -> /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(453,7) SAMRAI::pdat::ArrayData<Real>::copy(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &, const SAMRAI::hier::Transformation &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(453,17) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,30) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator*(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,44) std::_List_const_iterator<SAMRAI::hier::Box>::operator*(const std::_List_const_iterator<SAMRAI::hier::Box> *) const
  -> INLINE: (268,23) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INDIRECT- (VIRTUAL): (269,13)  EXPR_CONV.SI64.P64(*((SI64*) (t_overlap.175006_V$b30.0.671->__vptr_V$b31_2.39 + EXPR_CONV.SI32.I64(6(SI32)) * 8(I64))))
  -> INDIRECT- (VIRTUAL): (270,13)  EXPR_CONV.SI64.P64(*((SI64*) (t_overlap.175006_V$b30.0.671->__vptr_V$b31_2.39 + EXPR_CONV.SI32.I64(4(SI32)) * 8(I64))))
  -> INLINE: (272,10) SAMRAI::pdat::CellData<Real>::copyWithRotation(SAMRAI::pdat::CellData<Real> *, const SAMRAI::pdat::CellData<Real> &, const SAMRAI::pdat::CellOverlap &)
    -> INLINE: (320,35) SAMRAI::hier::PatchData::getDim(const SAMRAI::hier::PatchData *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchData.h:(246,20) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INDIRECT- (VIRTUAL): (321,46)  EXPR_CONV.SI64.P64(*((SI64*) (overlap_175039_V$b88.0.682.31685->__vptr_V$b31_2.39 + EXPR_CONV.SI32.I64(6(SI32)) * 8(I64))))
    -> INDIRECT- (VIRTUAL): (323,7)  EXPR_CONV.SI64.P64(*((SI64*) (overlap_175039_V$b88.0.682.31685->__vptr_V$b31_2.39 + EXPR_CONV.SI32.I64(4(SI32)) * 8(I64))))
    -> INLINE: (323,35) SAMRAI::hier::Transformation::getRotation(const SAMRAI::hier::Transformation *) const
    -> INDIRECT- (VIRTUAL): (324,35)  EXPR_CONV.SI64.P64(*((SI64*) (overlap_175039_V$b88.0.682.31685->__vptr_V$b31_2.39 + EXPR_CONV.SI32.I64(3(SI32)) * 8(I64))))
    -> INLINE: (326,28) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
    -> INDIRECT- (VIRTUAL): (327,4)  EXPR_CONV.SI64.P64(*((SI64*) (overlap_175039_V$b88.0.682.31685->__vptr_V$b31_2.39 + EXPR_CONV.SI32.I64(4(SI32)) * 8(I64))))
    -> INLINE: (338,63) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
    -> INLINE: (339,12) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
    -> INLINE: (339,12) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
    -> INLINE: (339,29) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
    -> INLINE: (339,29) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
    -> INLINE: (339,36) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(203,13) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator++(std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *)
         {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(205,13) std::_List_const_iterator<SAMRAI::hier::Box>::operator++(std::_List_const_iterator<SAMRAI::hier::Box> *)
    -> INLINE: (340,38) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,30) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator*(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,44) std::_List_const_iterator<SAMRAI::hier::Box>::operator*(const std::_List_const_iterator<SAMRAI::hier::Box> *) const
    -> INLINE: (344,20) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: (345,30) SAMRAI::pdat::CellData<Real>::getDepth(const SAMRAI::pdat::CellData<Real> *) const
    -> INLINE: (345,47) SAMRAI::pdat::CellData<Real>::getDepth(const SAMRAI::pdat::CellData<Real> *) const
    -> INLINE: (346,29) SAMRAI::pdat::CellData<Real>::getDepth(const SAMRAI::pdat::CellData<Real> *) const
    -> INLINE: (346,46) SAMRAI::pdat::CellData<Real>::getDepth(const SAMRAI::pdat::CellData<Real> *) const
    -> INLINE: (350,18) SAMRAI::pdat::CellIterator::operator!=(const SAMRAI::pdat::CellIterator *, const SAMRAI::pdat::CellIterator &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellIterator.h:(124,22) SAMRAI::pdat::CellIndex::operator!=(const SAMRAI::pdat::CellIndex *, const SAMRAI::pdat::CellIndex &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellIndex.h:(256,37) SAMRAI::hier::Index::operator!=(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(163,22) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
            -> INLINE: (150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
            -> INLINE: (150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: (350,18) SAMRAI::pdat::CellIterator::operator!=(const SAMRAI::pdat::CellIterator *, const SAMRAI::pdat::CellIterator &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellIterator.h:(124,22) SAMRAI::pdat::CellIndex::operator!=(const SAMRAI::pdat::CellIndex *, const SAMRAI::pdat::CellIndex &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellIndex.h:(256,37) SAMRAI::hier::Index::operator!=(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(163,22) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
            -> INLINE: (150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
            -> INLINE: (150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: (352,42) SAMRAI::pdat::CellIterator::operator*(const SAMRAI::pdat::CellIterator *) const
    -> INLINE: (354,13) SAMRAI::hier::Transformation::rotateIndex(SAMRAI::hier::Index &, SAMRAI::hier::Transformation::RotationIdentifier)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Transformation.h:(337,25) SAMRAI::hier::Index::operator[](SAMRAI::hier::Index *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Transformation.h:(337,36) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: (355,23) SAMRAI::pdat::CellIndex::operator+=(SAMRAI::pdat::CellIndex *, const SAMRAI::hier::IntVector &)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellIndex.h:(85,7) SAMRAI::hier::Index::operator+=(SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &)
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(178,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(178,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(179,27) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
    -> INLINE: (358,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: (358,25) SAMRAI::pdat::ArrayData<Real>::operator()(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::hier::Index &, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(251,18) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(251,19) SAMRAI::pdat::ArrayData<Real>::getIndex(const SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::hier::Index &, unsigned int) const
        -> INLINE: (197,25) SAMRAI::hier::Box::offset(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,29) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,38) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,18) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,32) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,49) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,59) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,40) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,50) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: (358,43) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: (358,55) SAMRAI::pdat::ArrayData<Real>::operator()(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::hier::Index &, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(251,18) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(251,19) SAMRAI::pdat::ArrayData<Real>::getIndex(const SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::hier::Index &, unsigned int) const
        -> INLINE: (197,25) SAMRAI::hier::Box::offset(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,29) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,38) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,18) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,32) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,49) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,59) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,40) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,50) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (275,10) std::__shared_ptr<SAMRAI::tbox::Timer, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::tbox::Timer, __gnu_cxx::_S_atomic> *) const


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(452,11) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(269,18)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(358,18) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(273,10)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(273,10)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(273,10)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(350,18) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(273,10)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(178,42) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(273,10)
         remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
         remark #25478: While Loop Unrolled by 8  
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(357,13) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(273,10)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed ANTI dependence between src (358:43) and this->d_array->_M_start[myoffset+ci.ci.ci.ci[0]-this->d_index[0] (358:25)

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(273,10)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed ANTI dependence between myoffset (682:10) and myoffset (682:10)
            remark #25439: unrolled with remainder by 2  
            remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(273,10)
         <Remainder>
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(273,10)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed ANTI dependence between myoffset (682:10) and myoffset (682:10)
            remark #25439: unrolled with remainder by 2  
            remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(273,10)
         <Remainder>
         LOOP END
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(273,10)
         remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(257,1):remark #34051: REGISTER ALLOCATION : [_ZN6SAMRAI4pdat8CellDataIdE4copyERKNS_4hier9PatchDataERKNS3_10BoxOverlapE] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:257

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     411
            Global    :     100
            Local     :     311
        Regenerable   :      80
        Spilled       :      13
        
    Routine stack
        Variables     :     512 bytes*
            Reads     :      62 [4.66e+02 ~ 6.0%]
            Writes    :      22 [9.25e+00 ~ 0.1%]
        Spills        :      56 bytes*
            Reads     :      12 [2.08e+02 ~ 2.7%]
            Writes    :      10 [2.01e+02 ~ 2.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::copy(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &, const SAMRAI::hier::Transformation &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::pdat::ArrayData<Real>::copy(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &, const SAMRAI::hier::Transformation &)) [650] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(391,1)
  -> INLINE: (392,23) SAMRAI::hier::Transformation::getRotation(const SAMRAI::hier::Transformation *) const
  -> INLINE: (392,90) SAMRAI::hier::Transformation::getOffset(const SAMRAI::hier::Transformation *) const
  -> INLINE: (392,102) SAMRAI::hier::IntVector::operator==(const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(762,43) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(763,59) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(764,44) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(764,72) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(768,47) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(770,41) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(770,60) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (392,105) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(1133,28) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (392,134) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
  -> INLINE: (392,162) SAMRAI::hier::Transformation::getBeginBlock(const SAMRAI::hier::Transformation *) const
  -> INLINE: (392,178) SAMRAI::hier::BlockId::operator==(const SAMRAI::hier::BlockId *, const SAMRAI::hier::BlockId &) const
  -> INLINE: (392,196) SAMRAI::hier::Transformation::getEndBlock(const SAMRAI::hier::Transformation *) const
  -> INLINE: (394,7) SAMRAI::pdat::ArrayData<Real>::copy(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &)
    -> INLINE: (294,15) SAMRAI::hier::Box::isSpatiallyEqual(const SAMRAI::hier::Box *, const SAMRAI::hier::Box &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(754,21) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(754,43) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,27) SAMRAI::hier::BlockId::operator==(const SAMRAI::hier::BlockId *, const SAMRAI::hier::BlockId &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,51) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,66) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: (295,13) SAMRAI::hier::Box::isSpatiallyEqual(const SAMRAI::hier::Box *, const SAMRAI::hier::Box &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(754,21) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(754,43) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,27) SAMRAI::hier::BlockId::operator==(const SAMRAI::hier::BlockId *, const SAMRAI::hier::BlockId &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,51) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,66) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: (297,37) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
    -> INLINE: (298,47) std::vector<double, std::allocator<double>>::operator[](const std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) const
    -> INLINE: (312,16) SAMRAI::pdat::CopyOperation<Real>::operator()(const SAMRAI::pdat::CopyOperation<Real> *, Real &, const Real &) const
    -> INLINE: (320,20) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: (325,46) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> (327,10) SAMRAI::pdat::ArrayDataOperationUtilities<Real, SAMRAI::pdat::CopyOperation<Real>>::doArrayDataOperationOnBox(SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &, const SAMRAI::hier::IntVector &, unsigned int, unsigned int, unsigned int, const SAMRAI::pdat::CopyOperation<Real> &)
  -> INLINE: (403,20) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> (411,10) SAMRAI::pdat::ArrayDataOperationUtilities<Real, SAMRAI::pdat::CopyOperation<Real>>::doArrayDataOperationOnBox(SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &, const SAMRAI::hier::IntVector &, unsigned int, unsigned int, unsigned int, const SAMRAI::pdat::CopyOperation<Real> &)
  -> INLINE: (415,55) SAMRAI::hier::Transformation::getOffset(const SAMRAI::hier::Transformation *) const


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(761,10) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(393,102)
   remark #15523: loop was not vectorized: loop control variable b was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(763,38) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(393,102)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(769,10) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(393,102)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(395,7)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(395,7)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(395,7)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(395,7)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(395,7)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(395,7)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(395,7)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(395,7)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(311,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(395,7)
   remark #25401: memcopy(with guard) generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(311,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(395,7)
   <Multiversioned v2>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(311,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(395,7)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(395,7)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(404,20)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
LOOP END

    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(311,7):remark #34026: call to memcpy implemented as a call to optimized library version
/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(391,1):remark #34051: REGISTER ALLOCATION : [_ZN6SAMRAI4pdat9ArrayDataIdE4copyERKS2_RKNS_4hier3BoxERKNS5_14TransformationE] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:391

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     229
            Global    :      72
            Local     :     157
        Regenerable   :      47
        Spilled       :       7
        
    Routine stack
        Variables     :     418 bytes*
            Reads     :      11 [5.40e+00 ~ 5.9%]
            Writes    :      10 [6.70e-01 ~ 0.7%]
        Spills        :      24 bytes*
            Reads     :       6 [2.30e-01 ~ 0.3%]
            Writes    :       3 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayDataOperationUtilities<Real, SAMRAI::pdat::CopyOperation<Real>>::doArrayDataOperationOnBox(SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &, const SAMRAI::hier::IntVector &, unsigned int, unsigned int, unsigned int, const SAMRAI::pdat::CopyOperation<Real> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::pdat::ArrayDataOperationUtilities<Real, SAMRAI::pdat::CopyOperation<Real>>::doArrayDataOperationOnBox(SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &, const SAMRAI::hier::IntVector &, unsigned int, unsigned int, unsigned int, const SAMRAI::pdat::CopyOperation<Real> &)) [651] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(59,1)
  -> INLINE: (64,35) SAMRAI::pdat::ArrayData<Real>::getDim(const SAMRAI::pdat::ArrayData<Real> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1251,17) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
  -> INLINE: (66,30) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (67,36) SAMRAI::pdat::ArrayData<Real>::getPointer(const SAMRAI::pdat::ArrayData<Real> *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(220,19) std::vector<double, std::allocator<double>>::operator[](const std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) const
  -> INLINE: (70,33) SAMRAI::pdat::ArrayData<Real>::getBox(const SAMRAI::pdat::ArrayData<Real> *) const
  -> INLINE: (71,33) SAMRAI::pdat::ArrayData<Real>::getBox(const SAMRAI::pdat::ArrayData<Real> *) const
  -> INLINE: (77,47) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (77,47) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (78,24) SAMRAI::hier::Box::numberCells(const SAMRAI::hier::Box *, SAMRAI::hier::Box::dir_t) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(623,11) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
      -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (79,26) SAMRAI::hier::Box::numberCells(const SAMRAI::hier::Box *, SAMRAI::hier::Box::dir_t) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(623,11) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
      -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (80,26) SAMRAI::hier::Box::numberCells(const SAMRAI::hier::Box *, SAMRAI::hier::Box::dir_t) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(623,11) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
      -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (84,34) SAMRAI::pdat::ArrayData<Real>::getOffset(const SAMRAI::pdat::ArrayData<Real> *) const
  -> INLINE: (85,34) SAMRAI::pdat::ArrayData<Real>::getOffset(const SAMRAI::pdat::ArrayData<Real> *) const
  -> INLINE: (97,53) SAMRAI::hier::Box::size(const SAMRAI::hier::Box *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(654,12) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
      -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(655,44) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(655,54) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(657,48) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(657,58) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (99,31) SAMRAI::hier::Box::offset(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,29) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,38) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,18) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,32) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,49) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,59) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,40) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,50) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (99,44) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (100,31) SAMRAI::hier::Box::offset(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,29) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,38) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,18) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,32) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,49) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,59) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,40) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,50) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (100,44) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (100,52) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(319,11) SAMRAI::hier::Index::operator-=(SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &)
      -> INLINE: (300,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (300,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (301,27) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (187,52) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (187,52) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (199,15) SAMRAI::pdat::CopyOperation<Real>::operator()(const SAMRAI::pdat::CopyOperation<Real> *, Real &, const Real &) const
  -> INLINE: (208,53) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (208,53) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(77,47)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(79,24)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(80,26)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(81,26)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(98,53)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(656,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(98,53)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 2  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(100,31)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between myoffset (682:10) and myoffset (682:10)
   remark #25439: unrolled with remainder by 2  
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(100,31)
<Remainder>
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(300,42) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(101,52)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 8  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(101,31)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between myoffset (682:10) and myoffset (682:10)
   remark #25439: unrolled with remainder by 2  
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(101,31)
<Remainder>
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(119,4)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between dst_b[nd] (188:10) and dst_b[m] (230:16)

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(187,52)
      remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(187,52)
   <Remainder>
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(196,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between vdst (31:4) and vdst (31:4)

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(198,10)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed FLOW dependence between vdst (31:4) and vsrc (31:4)
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(198,10)
      <Remainder>
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(208,53)
         remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(208,67) ]
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(222,13)
         remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
         remark #25439: unrolled with remainder by 8  
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(229,13)
         remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(229,13)
      <Remainder>
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(222,13)
      <Remainder>
         remark #25436: completely unrolled by 7  
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(59,1):remark #34051: REGISTER ALLOCATION : [_ZN6SAMRAI4pdat27ArrayDataOperationUtilitiesIdNS0_13CopyOperationIdEEE25doArrayDataOperationOnBoxERNS0_9ArrayDataIdEERKS6_RKNS_4hier3BoxERKNSA_9IntVectorEjjjRKS3_] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:59

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     297
            Global    :      96
            Local     :     201
        Regenerable   :       8
        Spilled       :      20
        
    Routine stack
        Variables     :     120 bytes*
            Reads     :      50 [3.48e+02 ~ 9.1%]
            Writes    :      29 [2.98e+02 ~ 7.8%]
        Spills        :     112 bytes*
            Reads     :      20 [4.38e+01 ~ 1.1%]
            Writes    :      20 [2.80e+01 ~ 0.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellData<Real>::copy2(const SAMRAI::pdat::CellData<Real> *, SAMRAI::hier::PatchData &, const SAMRAI::hier::BoxOverlap &) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::pdat::CellData<Real>::copy2(const SAMRAI::pdat::CellData<Real> *, SAMRAI::hier::PatchData &, const SAMRAI::hier::BoxOverlap &) const) [652] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(283,1)
  -> INDIRECT- (VIRTUAL): (290,8)  EXPR_CONV.SI64.P64(*((SI64*) (t_overlap.175064_V$b3a.0.672->__vptr_V$b31_2.39 + EXPR_CONV.SI32.I64(4(SI32)) * 8(I64))))
  -> INLINE: (290,39) SAMRAI::hier::Transformation::getRotation(const SAMRAI::hier::Transformation *) const
  -> INLINE: (293,20) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (293,22) SAMRAI::pdat::ArrayData<Real>::copy(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::BoxContainer &, const SAMRAI::hier::Transformation &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(451,54) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(452,11) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(452,11) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(452,20) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(452,20) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(452,27) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(203,13) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator++(std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *)
         {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(205,13) std::_List_const_iterator<SAMRAI::hier::Box>::operator++(std::_List_const_iterator<SAMRAI::hier::Box> *)
    -> /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(453,7) SAMRAI::pdat::ArrayData<Real>::copy(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &, const SAMRAI::hier::Transformation &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(453,17) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,30) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator*(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,44) std::_List_const_iterator<SAMRAI::hier::Box>::operator*(const std::_List_const_iterator<SAMRAI::hier::Box> *) const
  -> INLINE: (293,27) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INDIRECT- (VIRTUAL): (294,10)  EXPR_CONV.SI64.P64(*((SI64*) (t_overlap.175064_V$b3a.0.672->__vptr_V$b31_2.39 + EXPR_CONV.SI32.I64(6(SI32)) * 8(I64))))
  -> INDIRECT- (VIRTUAL): (295,10)  EXPR_CONV.SI64.P64(*((SI64*) (t_overlap.175064_V$b3a.0.672->__vptr_V$b31_2.39 + EXPR_CONV.SI32.I64(4(SI32)) * 8(I64))))
  -> INLINE: (297,14) SAMRAI::pdat::CellData<Real>::copyWithRotation(SAMRAI::pdat::CellData<Real> *, const SAMRAI::pdat::CellData<Real> &, const SAMRAI::pdat::CellOverlap &)
    -> INLINE: (320,35) SAMRAI::hier::PatchData::getDim(const SAMRAI::hier::PatchData *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchData.h:(246,20) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INDIRECT- (VIRTUAL): (321,46)  EXPR_CONV.SI64.P64(*((SI64*) (overlap_175039_V$b88.0.682.31601->__vptr_V$b31_2.39 + EXPR_CONV.SI32.I64(6(SI32)) * 8(I64))))
    -> INDIRECT- (VIRTUAL): (323,7)  EXPR_CONV.SI64.P64(*((SI64*) (overlap_175039_V$b88.0.682.31601->__vptr_V$b31_2.39 + EXPR_CONV.SI32.I64(4(SI32)) * 8(I64))))
    -> INLINE: (323,35) SAMRAI::hier::Transformation::getRotation(const SAMRAI::hier::Transformation *) const
    -> INDIRECT- (VIRTUAL): (324,35)  EXPR_CONV.SI64.P64(*((SI64*) (overlap_175039_V$b88.0.682.31601->__vptr_V$b31_2.39 + EXPR_CONV.SI32.I64(3(SI32)) * 8(I64))))
    -> INLINE: (326,28) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
    -> INDIRECT- (VIRTUAL): (327,4)  EXPR_CONV.SI64.P64(*((SI64*) (overlap_175039_V$b88.0.682.31601->__vptr_V$b31_2.39 + EXPR_CONV.SI32.I64(4(SI32)) * 8(I64))))
    -> INLINE: (338,63) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
    -> INLINE: (339,12) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
    -> INLINE: (339,12) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
    -> INLINE: (339,29) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
    -> INLINE: (339,29) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
    -> INLINE: (339,36) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(203,13) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator++(std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *)
         {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(205,13) std::_List_const_iterator<SAMRAI::hier::Box>::operator++(std::_List_const_iterator<SAMRAI::hier::Box> *)
    -> INLINE: (340,38) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,30) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator*(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,44) std::_List_const_iterator<SAMRAI::hier::Box>::operator*(const std::_List_const_iterator<SAMRAI::hier::Box> *) const
    -> INLINE: (344,20) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: (345,30) SAMRAI::pdat::CellData<Real>::getDepth(const SAMRAI::pdat::CellData<Real> *) const
    -> INLINE: (345,47) SAMRAI::pdat::CellData<Real>::getDepth(const SAMRAI::pdat::CellData<Real> *) const
    -> INLINE: (346,29) SAMRAI::pdat::CellData<Real>::getDepth(const SAMRAI::pdat::CellData<Real> *) const
    -> INLINE: (346,46) SAMRAI::pdat::CellData<Real>::getDepth(const SAMRAI::pdat::CellData<Real> *) const
    -> INLINE: (350,18) SAMRAI::pdat::CellIterator::operator!=(const SAMRAI::pdat::CellIterator *, const SAMRAI::pdat::CellIterator &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellIterator.h:(124,22) SAMRAI::pdat::CellIndex::operator!=(const SAMRAI::pdat::CellIndex *, const SAMRAI::pdat::CellIndex &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellIndex.h:(256,37) SAMRAI::hier::Index::operator!=(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(163,22) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
            -> INLINE: (150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
            -> INLINE: (150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: (350,18) SAMRAI::pdat::CellIterator::operator!=(const SAMRAI::pdat::CellIterator *, const SAMRAI::pdat::CellIterator &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellIterator.h:(124,22) SAMRAI::pdat::CellIndex::operator!=(const SAMRAI::pdat::CellIndex *, const SAMRAI::pdat::CellIndex &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellIndex.h:(256,37) SAMRAI::hier::Index::operator!=(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(163,22) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
            -> INLINE: (150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
            -> INLINE: (150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: (352,42) SAMRAI::pdat::CellIterator::operator*(const SAMRAI::pdat::CellIterator *) const
    -> INLINE: (354,13) SAMRAI::hier::Transformation::rotateIndex(SAMRAI::hier::Index &, SAMRAI::hier::Transformation::RotationIdentifier)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Transformation.h:(337,25) SAMRAI::hier::Index::operator[](SAMRAI::hier::Index *, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Transformation.h:(337,36) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: (355,23) SAMRAI::pdat::CellIndex::operator+=(SAMRAI::pdat::CellIndex *, const SAMRAI::hier::IntVector &)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellIndex.h:(85,7) SAMRAI::hier::Index::operator+=(SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &)
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(178,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(178,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(179,27) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
    -> INLINE: (358,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: (358,25) SAMRAI::pdat::ArrayData<Real>::operator()(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::hier::Index &, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(251,18) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(251,19) SAMRAI::pdat::ArrayData<Real>::getIndex(const SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::hier::Index &, unsigned int) const
        -> INLINE: (197,25) SAMRAI::hier::Box::offset(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,29) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,38) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,18) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,32) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,49) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,59) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,40) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,50) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: (358,43) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
    -> INLINE: (358,55) SAMRAI::pdat::ArrayData<Real>::operator()(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::hier::Index &, unsigned int)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(251,18) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(251,19) SAMRAI::pdat::ArrayData<Real>::getIndex(const SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::hier::Index &, unsigned int) const
        -> INLINE: (197,25) SAMRAI::hier::Box::offset(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,29) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,38) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,18) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,32) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,49) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,59) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,40) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,50) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(452,11) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(294,22)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(358,18) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(298,14)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(298,14)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(298,14)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(350,18) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(298,14)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(178,42) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(298,14)
         remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
         remark #25478: While Loop Unrolled by 8  
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(357,13) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(298,14)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed ANTI dependence between src (358:43) and this->d_array->_M_start[myoffset+ci.ci.ci.ci[0]-this->d_index[0] (358:25)

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(298,14)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed ANTI dependence between myoffset (682:10) and myoffset (682:10)
            remark #25439: unrolled with remainder by 2  
            remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(298,14)
         <Remainder>
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(298,14)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed ANTI dependence between myoffset (682:10) and myoffset (682:10)
            remark #25439: unrolled with remainder by 2  
            remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(298,14)
         <Remainder>
         LOOP END
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(298,14)
         remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(283,1):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4pdat8CellDataIdE5copy2ERNS_4hier9PatchDataERKNS3_10BoxOverlapE] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:283

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     384
            Global    :      92
            Local     :     292
        Regenerable   :      70
        Spilled       :      14
        
    Routine stack
        Variables     :     512 bytes*
            Reads     :      62 [6.02e+02 ~ 6.1%]
            Writes    :      22 [1.19e+01 ~ 0.1%]
        Spills        :      64 bytes*
            Reads     :      12 [2.40e+02 ~ 2.4%]
            Writes    :      10 [2.30e+02 ~ 2.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellData<Real>::copyDepth(SAMRAI::pdat::CellData<Real> *, int, const SAMRAI::pdat::CellData<Real> &, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::pdat::CellData<Real>::copyDepth(SAMRAI::pdat::CellData<Real> *, int, const SAMRAI::pdat::CellData<Real> &, int)) [653] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(381,1)
  -> INLINE: (384,32) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (384,34) SAMRAI::pdat::ArrayData<Real>::getBox(const SAMRAI::pdat::ArrayData<Real> *) const
  -> INLINE: (384,55) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (384,57) SAMRAI::pdat::ArrayData<Real>::getBox(const SAMRAI::pdat::ArrayData<Real> *) const
  -> INLINE: (385,13) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (386,13) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (386,15) SAMRAI::pdat::ArrayData<Real>::copyDepth(SAMRAI::pdat::ArrayData<Real> *, unsigned int, const SAMRAI::pdat::ArrayData<Real> &, unsigned int, const SAMRAI::hier::Box &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(485,15) SAMRAI::hier::Box::isSpatiallyEqual(const SAMRAI::hier::Box *, const SAMRAI::hier::Box &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(754,21) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(754,43) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,27) SAMRAI::hier::BlockId::operator==(const SAMRAI::hier::BlockId *, const SAMRAI::hier::BlockId &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,51) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,66) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(485,52) SAMRAI::hier::Box::isSpatiallyEqual(const SAMRAI::hier::Box *, const SAMRAI::hier::Box &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(754,21) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(754,43) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,27) SAMRAI::hier::BlockId::operator==(const SAMRAI::hier::BlockId *, const SAMRAI::hier::BlockId &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,51) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,66) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(487,37) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(488,47) std::vector<double, std::allocator<double>>::operator[](const std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(506,16) SAMRAI::pdat::CopyOperation<Real>::operator()(const SAMRAI::pdat::CopyOperation<Real> *, Real &, const Real &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(513,20) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(518,46) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(520,10) SAMRAI::pdat::ArrayDataOperationUtilities<Real, SAMRAI::pdat::CopyOperation<Real>>::doArrayDataOperationOnBox(SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &, const SAMRAI::hier::IntVector &, unsigned int, unsigned int, unsigned int, const SAMRAI::pdat::CopyOperation<Real> &)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(64,35) SAMRAI::pdat::ArrayData<Real>::getDim(const SAMRAI::pdat::ArrayData<Real> *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1251,17) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(66,30) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(67,36) SAMRAI::pdat::ArrayData<Real>::getPointer(const SAMRAI::pdat::ArrayData<Real> *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(220,19) std::vector<double, std::allocator<double>>::operator[](const std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(70,33) SAMRAI::pdat::ArrayData<Real>::getBox(const SAMRAI::pdat::ArrayData<Real> *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(71,33) SAMRAI::pdat::ArrayData<Real>::getBox(const SAMRAI::pdat::ArrayData<Real> *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(77,47) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(77,47) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(78,24) SAMRAI::hier::Box::numberCells(const SAMRAI::hier::Box *, SAMRAI::hier::Box::dir_t) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(623,11) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
          -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(79,26) SAMRAI::hier::Box::numberCells(const SAMRAI::hier::Box *, SAMRAI::hier::Box::dir_t) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(623,11) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
          -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(80,26) SAMRAI::hier::Box::numberCells(const SAMRAI::hier::Box *, SAMRAI::hier::Box::dir_t) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(623,11) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
          -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(84,34) SAMRAI::pdat::ArrayData<Real>::getOffset(const SAMRAI::pdat::ArrayData<Real> *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(85,34) SAMRAI::pdat::ArrayData<Real>::getOffset(const SAMRAI::pdat::ArrayData<Real> *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(97,53) SAMRAI::hier::Box::size(const SAMRAI::hier::Box *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(654,12) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
          -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(655,44) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(655,54) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(657,48) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(657,58) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(99,31) SAMRAI::hier::Box::offset(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,29) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,38) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,18) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,32) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,49) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,59) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,40) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,50) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(99,44) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(100,31) SAMRAI::hier::Box::offset(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,29) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,38) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,18) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,32) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,49) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,59) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,40) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,50) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(100,44) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(100,52) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(319,11) SAMRAI::hier::Index::operator-=(SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &)
          -> INLINE: (300,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: (300,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: (301,27) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(187,52) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(187,52) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(199,15) SAMRAI::pdat::CopyOperation<Real>::operator()(const SAMRAI::pdat::CopyOperation<Real> *, Real &, const Real &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(208,53) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(208,53) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (386,36) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(386,13)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(505,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
   remark #25401: memcopy(with guard) generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(505,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
   <Multiversioned v2>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(505,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(77,47) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(656,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
   remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
   remark #25439: unrolled with remainder by 8  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(656,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
<Remainder>
   remark #25436: completely unrolled by 7  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between myoffset (682:10) and myoffset (682:10)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
<Remainder>
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(300,42) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 8  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between myoffset (682:10) and myoffset (682:10)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
<Remainder>
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(187,52) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
   remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(187,52) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
<Remainder>
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(196,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between vdst (31:4) and vdst (31:4)

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(198,10) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between vdst (31:4) and vsrc (31:4)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(198,10) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
   <Remainder>
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(208,53) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(208,67) ]
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(222,13) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
      remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
      remark #25439: unrolled with remainder by 8  
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(229,13) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
      remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(229,13) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
   <Remainder>
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(222,13) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(387,15)
   <Remainder>
      remark #25436: completely unrolled by 7  
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(505,7):remark #34026: call to memcpy implemented as a call to optimized library version
/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(381,1):remark #34051: REGISTER ALLOCATION : [_ZN6SAMRAI4pdat8CellDataIdE9copyDepthEiRKS2_i] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:381

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     540
            Global    :     143
            Local     :     397
        Regenerable   :      34
        Spilled       :      14
        
    Routine stack
        Variables     :     392 bytes*
            Reads     :     114 [1.93e+02 ~ 10.5%]
            Writes    :      44 [1.41e+02 ~ 7.6%]
        Spills        :      64 bytes*
            Reads     :      12 [6.36e+00 ~ 0.3%]
            Writes    :      12 [2.59e+00 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellData<Real>::canEstimateStreamSizeFromBox(const SAMRAI::pdat::CellData<Real> *) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::pdat::CellData<Real>::canEstimateStreamSizeFromBox(const SAMRAI::pdat::CellData<Real> *) const) [654] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(402,1)
  -> INLINE: (403,11) SAMRAI::pdat::ArrayData<Real>::canEstimateStreamSizeFromBox()
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(64,22) std::type_info::operator==(const std::type_info *, const std::type_info &) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(64,55) std::type_info::operator==(const std::type_info *, const std::type_info &) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(64,88) std::type_info::operator==(const std::type_info *, const std::type_info &) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(64,123) std::type_info::operator==(const std::type_info *, const std::type_info &) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(64,157) std::type_info::operator==(const std::type_info *, const std::type_info &) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(64,189) std::type_info::operator==(const std::type_info *, const std::type_info &) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(402,1):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4pdat8CellDataIdE28canEstimateStreamSizeFromBoxEv] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:402

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rcx rsi rdi]
        
    Routine temporaries
        Total         :      24
            Global    :      12
            Local     :      12
        Regenerable   :      17
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellData<Real>::getDataStreamSize(const SAMRAI::pdat::CellData<Real> *, const SAMRAI::hier::BoxOverlap &) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::pdat::CellData<Real>::getDataStreamSize(const SAMRAI::pdat::CellData<Real> *, const SAMRAI::hier::BoxOverlap &) const) [655] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(410,1)
  -> INLINE: (415,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (415,19) SAMRAI::pdat::ArrayData<Real>::getDataStreamSize(const SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::hier::BoxContainer &, const SAMRAI::hier::IntVector &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(770,21) std::type_info::operator==(const std::type_info *, const std::type_info &) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(771,14) SAMRAI::tbox::MessageStream::getSizeof<bool>(size_t)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(772,28) std::type_info::operator==(const std::type_info *, const std::type_info &) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(773,14) SAMRAI::tbox::MessageStream::getSizeof<char>(size_t)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(774,28) std::type_info::operator==(const std::type_info *, const std::type_info &) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(775,14) SAMRAI::tbox::MessageStream::getSizeof<dcomplex>(size_t)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(776,28) std::type_info::operator==(const std::type_info *, const std::type_info &) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(777,14) SAMRAI::tbox::MessageStream::getSizeof<double>(size_t)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(778,28) std::type_info::operator==(const std::type_info *, const std::type_info &) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(779,14) SAMRAI::tbox::MessageStream::getSizeof<float>(size_t)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(780,28) std::type_info::operator==(const std::type_info *, const std::type_info &) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(781,14) SAMRAI::tbox::MessageStream::getSizeof<int>(size_t)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(784,4) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(784,4) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(784,4) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(784,4) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(784,4) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(784,4) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(784,4) std::allocator<char>::allocator(std::allocator<char> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(784,4) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(784,4) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(784,4) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(784,4) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(784,4) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(784,4) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INDIRECT- (VIRTUAL): (416,7)  EXPR_CONV.SI64.P64(*((SI64*) (t_overlap.175498_V$b43.0.675->__vptr_V$b31_2.39 + EXPR_CONV.SI32.I64(6(SI32)) * 8(I64))))
  -> INDIRECT- (VIRTUAL): (417,7)  EXPR_CONV.SI64.P64(*((SI64*) (t_overlap.175498_V$b43.0.675->__vptr_V$b31_2.39 + EXPR_CONV.SI32.I64(3(SI32)) * 8(I64))))


    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(410,1):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4pdat8CellDataIdE17getDataStreamSizeERKNS_4hier10BoxOverlapE] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:410

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rbx rbp rsi rdi r15]
        
    Routine temporaries
        Total         :      51
            Global    :      23
            Local     :      28
        Regenerable   :      13
        Spilled       :       3
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellData<Real>::packStream(const SAMRAI::pdat::CellData<Real> *, SAMRAI::tbox::MessageStream &, const SAMRAI::hier::BoxOverlap &) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::pdat::CellData<Real>::packStream(const SAMRAI::pdat::CellData<Real> *, SAMRAI::tbox::MessageStream &, const SAMRAI::hier::BoxOverlap &) const) [656] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(434,1)
  -> INDIRECT- (VIRTUAL): (439,8)  EXPR_CONV.SI64.P64(*((SI64*) (t_overlap.176164_V$b47.0.676->__vptr_V$b31_2.39 + EXPR_CONV.SI32.I64(4(SI32)) * 8(I64))))
  -> INLINE: (439,39) SAMRAI::hier::Transformation::getRotation(const SAMRAI::hier::Transformation *) const
  -> INLINE: (441,13) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (441,15) SAMRAI::pdat::ArrayData<Real>::packStream(const SAMRAI::pdat::ArrayData<Real> *, SAMRAI::tbox::MessageStream &, const SAMRAI::hier::BoxContainer &, const SAMRAI::hier::Transformation &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(875,26) SAMRAI::tbox::MessageStream::getWriteBuffer<Real>(SAMRAI::tbox::MessageStream *, size_t)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h:(217,32) SAMRAI::tbox::MessageStream::getSizeof<double>(size_t)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h:(219,25) std::vector<char, std::allocator<char>>::resize(std::vector<char, std::allocator<char>> *, std::vector<char, std::allocator<char>>::size_type)
         {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h:(219,32) SAMRAI::tbox::MessageStream::getCurrentSize(const SAMRAI::tbox::MessageStream *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h:(220,41) std::vector<char, std::allocator<char>>::size(const std::vector<char, std::allocator<char>> *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h:(223,55) std::vector<char, std::allocator<char>>::operator[](std::vector<char, std::allocator<char>> *, std::vector<char, std::allocator<char>>::size_type)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h:(223,56) SAMRAI::tbox::MessageStream::getCurrentSize(const SAMRAI::tbox::MessageStream *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(878,59) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(879,11) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(879,11) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(879,25) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(879,25) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(879,32) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(203,13) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator++(std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *)
         {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(205,13) std::_List_const_iterator<SAMRAI::hier::Box>::operator++(std::_List_const_iterator<SAMRAI::hier::Box> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(880,26) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,30) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator*(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,44) std::_List_const_iterator<SAMRAI::hier::Box>::operator*(const std::_List_const_iterator<SAMRAI::hier::Box> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(882,7) SAMRAI::pdat::ArrayData<Real>::packBuffer(const SAMRAI::pdat::ArrayData<Real> *, Real *, const SAMRAI::hier::Box &) const
      -> INLINE: (1294,4) SAMRAI::pdat::ArrayDataOperationUtilities<Real, SAMRAI::pdat::CopyOperation<Real>>::doArrayDataBufferOperationOnBox(const SAMRAI::pdat::ArrayData<Real> &, const Real *, const SAMRAI::hier::Box &, bool, const SAMRAI::pdat::CopyOperation<Real> &)
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(272,41) SAMRAI::pdat::ArrayData<Real>::getDim(const SAMRAI::pdat::ArrayData<Real> *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1251,17) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(275,53) SAMRAI::pdat::ArrayData<Real>::getPointer(const SAMRAI::pdat::ArrayData<Real> *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(220,19) std::vector<double, std::allocator<double>>::operator[](const std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(278,44) SAMRAI::pdat::ArrayData<Real>::getPointer(const SAMRAI::pdat::ArrayData<Real> *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(220,19) std::vector<double, std::allocator<double>>::operator[](const std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(280,49) SAMRAI::pdat::ArrayData<Real>::getDepth(const SAMRAI::pdat::ArrayData<Real> *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(283,43) SAMRAI::pdat::ArrayData<Real>::getBox(const SAMRAI::pdat::ArrayData<Real> *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(288,47) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(288,47) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(289,24) SAMRAI::hier::Box::numberCells(const SAMRAI::hier::Box *, SAMRAI::hier::Box::dir_t) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(623,11) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
            -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
              -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
            -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
              -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
            -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
            -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
            -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
            -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(290,30) SAMRAI::hier::Box::numberCells(const SAMRAI::hier::Box *, SAMRAI::hier::Box::dir_t) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(623,11) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
            -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
              -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
            -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
              -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
            -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
            -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
            -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
            -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(294,40) SAMRAI::pdat::ArrayData<Real>::getOffset(const SAMRAI::pdat::ArrayData<Real> *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(307,53) SAMRAI::hier::Box::size(const SAMRAI::hier::Box *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(654,12) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
            -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
              -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
            -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
              -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
            -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
            -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
            -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
            -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(655,44) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(655,54) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(657,48) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(657,58) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(309,35) SAMRAI::hier::Box::offset(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,29) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,38) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,18) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,32) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,49) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,59) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,40) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,50) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(309,48) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(386,52) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(386,52) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(397,15) SAMRAI::pdat::CopyOperation<Real>::operator()(const SAMRAI::pdat::CopyOperation<Real> *, Real &, const Real &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(406,34) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(406,34) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(884,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator->(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(171,29) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator*(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(171,45) std::_List_const_iterator<SAMRAI::hier::Box>::operator*(const std::_List_const_iterator<SAMRAI::hier::Box> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(884,27) SAMRAI::hier::Box::size(const SAMRAI::hier::Box *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(654,12) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(655,44) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(655,54) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(657,48) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(657,58) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INDIRECT- (VIRTUAL): (441,34)  EXPR_CONV.SI64.P64(*((SI64*) (t_overlap.176164_V$b47.0.676->__vptr_V$b31_2.39 + EXPR_CONV.SI32.I64(6(SI32)) * 8(I64))))
  -> INDIRECT- (VIRTUAL): (442,10)  EXPR_CONV.SI64.P64(*((SI64*) (t_overlap.176164_V$b47.0.676->__vptr_V$b31_2.39 + EXPR_CONV.SI32.I64(4(SI32)) * 8(I64))))
  -> (444,7) SAMRAI::pdat::CellData<Real>::packWithRotation(const SAMRAI::pdat::CellData<Real> *, SAMRAI::tbox::MessageStream &, const SAMRAI::pdat::CellOverlap &) const


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(220,12) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(442,15)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(288,47) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(442,15)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between pack_box.pack_box.pack_box.pack_box (604:41) and this->d_empty_flag (610:10)

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(442,15)
         remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(442,15)
         remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      LOOP END
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(442,15)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(656,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(442,15)
      remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
      remark #25439: unrolled with remainder by 8  
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(442,15)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between myoffset (682:10) and myoffset (682:10)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(442,15)
   <Remainder>
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(319,4) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(442,15)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between dat_b[nd] (387:10) and dat_b[m] (425:16)

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(386,52) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(442,15)
         remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(386,52) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(442,15)
      <Remainder>
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(394,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(442,15)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed OUTPUT dependence between buffer[buf_counter+i0] (31:4) and buffer[buf_counter+i0] (31:4)

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(396,10) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(442,15)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed FLOW dependence between buffer[buf_counter+i0] (31:4) and src_ptr[dat_counter+i0] (31:4)
            remark #25439: unrolled with remainder by 2  
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(396,10) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(442,15)
         <Remainder>
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(406,34) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(442,15)
            remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(412,16) ]
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(419,13) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(442,15)
            remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
            remark #25439: unrolled with remainder by 8  
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(424,13) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(442,15)
            remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
            remark #25439: unrolled with remainder by 2  
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(424,13) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(442,15)
         <Remainder>
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(419,13) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(442,15)
         <Remainder>
            remark #25436: completely unrolled by 7  
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(442,15)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(656,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(442,15)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      remark #25478: While Loop Unrolled by 8  
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(656,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(442,15)
   <Remainder>
      remark #25436: completely unrolled by 7  
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(703,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(703,7):remark #34026: call to memset implemented as a call to optimized library version
/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(434,1):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4pdat8CellDataIdE10packStreamERNS_4tbox13MessageStreamERKNS_4hier10BoxOverlapE] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:434

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     469
            Global    :     109
            Local     :     360
        Regenerable   :      28
        Spilled       :      22
        
    Routine stack
        Variables     :     176 bytes*
            Reads     :      87 [7.06e+02 ~ 7.9%]
            Writes    :      21 [4.68e+02 ~ 5.2%]
        Spills        :     128 bytes*
            Reads     :      34 [1.68e+02 ~ 1.9%]
            Writes    :      32 [6.53e+01 ~ 0.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellData<Real>::packWithRotation(const SAMRAI::pdat::CellData<Real> *, SAMRAI::tbox::MessageStream &, const SAMRAI::pdat::CellOverlap &) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::pdat::CellData<Real>::packWithRotation(const SAMRAI::pdat::CellData<Real> *, SAMRAI::tbox::MessageStream &, const SAMRAI::pdat::CellOverlap &) const) [657] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(453,1)
  -> INLINE: (457,31) SAMRAI::hier::PatchData::getDim(const SAMRAI::hier::PatchData *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchData.h:(246,20) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
  -> INDIRECT- (VIRTUAL): (458,46)  EXPR_CONV.SI64.P64(*((SI64*) (overlap_176384_V$b9d.0.683->__vptr_V$b31_2.39 + EXPR_CONV.SI32.I64(6(SI32)) * 8(I64))))
  -> INDIRECT- (VIRTUAL): (460,7)  EXPR_CONV.SI64.P64(*((SI64*) (overlap_176384_V$b9d.0.683->__vptr_V$b31_2.39 + EXPR_CONV.SI32.I64(4(SI32)) * 8(I64))))
  -> INLINE: (460,35) SAMRAI::hier::Transformation::getRotation(const SAMRAI::hier::Transformation *) const
  -> INDIRECT- (VIRTUAL): (461,35)  EXPR_CONV.SI64.P64(*((SI64*) (overlap_176384_V$b9d.0.683->__vptr_V$b31_2.39 + EXPR_CONV.SI32.I64(3(SI32)) * 8(I64))))
  -> INLINE: (463,24) SAMRAI::hier::PatchData::getGhostBox(const SAMRAI::hier::PatchData *) const
  -> INDIRECT- (VIRTUAL): (464,4)  EXPR_CONV.SI64.P64(*((SI64*) (overlap_176384_V$b9d.0.683->__vptr_V$b31_2.39 + EXPR_CONV.SI32.I64(4(SI32)) * 8(I64))))
  -> INLINE: (475,22) SAMRAI::pdat::CellData<Real>::getDepth(const SAMRAI::pdat::CellData<Real> *) const
  -> DELETED: (478,22) std::allocator<double>::~allocator(std::allocator<double> *)
  -> DELETED: (478,29) std::allocator<double>::~allocator(std::allocator<double> *)
  -> INLINE: (478,29) std::allocator<double>::allocator(std::allocator<double> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (478,29) std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type, const std::vector<double, std::allocator<double>>::allocator_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (478,29) std::vector<double, std::allocator<double>>::~vector(std::vector<double, std::allocator<double>> *)
  -> INLINE: (481,63) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (482,12) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
  -> INLINE: (482,12) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
  -> INLINE: (482,29) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (482,29) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (482,36) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(203,13) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator++(std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(205,13) std::_List_const_iterator<SAMRAI::hier::Box>::operator++(std::_List_const_iterator<SAMRAI::hier::Box> *)
  -> INLINE: (483,38) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,30) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator*(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,44) std::_List_const_iterator<SAMRAI::hier::Box>::operator*(const std::_List_const_iterator<SAMRAI::hier::Box> *) const
  -> INLINE: (487,20) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (492,21) SAMRAI::pdat::CellIterator::operator!=(const SAMRAI::pdat::CellIterator *, const SAMRAI::pdat::CellIterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellIterator.h:(124,22) SAMRAI::pdat::CellIndex::operator!=(const SAMRAI::pdat::CellIndex *, const SAMRAI::pdat::CellIndex &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellIndex.h:(256,37) SAMRAI::hier::Index::operator!=(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(163,22) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
          -> INLINE: (150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: (150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (492,21) SAMRAI::pdat::CellIterator::operator!=(const SAMRAI::pdat::CellIterator *, const SAMRAI::pdat::CellIterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellIterator.h:(124,22) SAMRAI::pdat::CellIndex::operator!=(const SAMRAI::pdat::CellIndex *, const SAMRAI::pdat::CellIndex &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellIndex.h:(256,37) SAMRAI::hier::Index::operator!=(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(163,22) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
          -> INLINE: (150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: (150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (494,36) SAMRAI::pdat::CellIterator::operator*(const SAMRAI::pdat::CellIterator *) const
  -> INLINE: (495,16) SAMRAI::hier::Transformation::rotateIndex(SAMRAI::hier::Index &, SAMRAI::hier::Transformation::RotationIdentifier)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Transformation.h:(337,25) SAMRAI::hier::Index::operator[](SAMRAI::hier::Index *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Transformation.h:(337,36) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
  -> INLINE: (496,26) SAMRAI::pdat::CellIndex::operator+=(SAMRAI::pdat::CellIndex *, const SAMRAI::hier::IntVector &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellIndex.h:(85,7) SAMRAI::hier::Index::operator+=(SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(178,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(178,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(179,27) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (498,22) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (498,29) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (498,37) SAMRAI::pdat::ArrayData<Real>::operator()(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::hier::Index &, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(251,18) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(251,19) SAMRAI::pdat::ArrayData<Real>::getIndex(const SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::hier::Index &, unsigned int) const
      -> INLINE: (197,25) SAMRAI::hier::Box::offset(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,29) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,38) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,18) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,32) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,49) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,59) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,40) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,50) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (505,11) std::vector<double, std::allocator<double>>::~vector(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (505,11) SAMRAI::tbox::MessageStream::pack<__gnu_cxx::__alloc_traits<std::allocator<double>>::value_type>(SAMRAI::tbox::MessageStream *, const __gnu_cxx::__alloc_traits<std::allocator<double>>::value_type *, size_t)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h:(265,32) SAMRAI::tbox::MessageStream::getSizeof<double>(size_t)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h:(266,10) SAMRAI::tbox::MessageStream::copyDataIn(SAMRAI::tbox::MessageStream *, const void *, size_t)
      -> INLINE: (399,12) SAMRAI::tbox::MessageStream::growAsNeeded(const SAMRAI::tbox::MessageStream *) const
      -> INLINE: (403,25) std::vector<char, std::allocator<char>>::insert<const char *, void>(std::vector<char, std::allocator<char>> *, std::vector<char, std::allocator<char>>::iterator, const char *, const char *)
         {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
      -> INLINE: (403,32) std::vector<char, std::allocator<char>>::end(std::vector<char, std::allocator<char>> *)
         {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
      -> INLINE: (406,41) std::vector<char, std::allocator<char>>::size(const std::vector<char, std::allocator<char>> *) const
  -> INLINE: (505,23) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(479,29)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(479,29)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(479,29)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(498,30)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(488,20)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(489,10)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(493,21)
         remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(492,21)
         remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(178,42) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(497,26)
            remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
            remark #25478: While Loop Unrolled by 8  
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(499,37)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed ANTI dependence between myoffset (682:10) and myoffset (682:10)
            remark #25439: unrolled with remainder by 2  
            remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(499,37)
         <Remainder>
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(493,21)
            remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
         LOOP END
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(567,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(749,7):remark #34026: call to memset implemented as a call to optimized library version
/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(453,1):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4pdat8CellDataIdE16packWithRotationERNS_4tbox13MessageStreamERKNS0_11CellOverlapE] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:453

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :     343
            Global    :      92
            Local     :     251
        Regenerable   :      65
        Spilled       :      15
        
    Routine stack
        Variables     :     488 bytes*
            Reads     :      45 [1.90e+03 ~ 9.7%]
            Writes    :      30 [8.39e+01 ~ 0.4%]
        Spills        :      80 bytes*
            Reads     :      37 [5.84e+02 ~ 3.0%]
            Writes    :      11 [2.31e+02 ~ 1.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Vector_base<char, std::allocator<char>>::_M_deallocate(std::_Vector_base<char, std::allocator<char>> *, std::_Vector_base<char, std::allocator<char>>::pointer, std::size_t)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(172,7):remark #34051: REGISTER ALLOCATION : [_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcm] /usr/include/c++/4.8.5/bits/stl_vector.h:172

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdx rsi rdi]
        
    Routine temporaries
        Total         :      11
            Global    :       7
            Local     :       4
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Vector_base<char, std::allocator<char>>::_M_get_Tp_allocator(std::_Vector_base<char, std::allocator<char>> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(114,7):remark #34051: REGISTER ALLOCATION : [_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv] /usr/include/c++/4.8.5/bits/stl_vector.h:114

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rax rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Vector_base<double, std::allocator<double>>::~_Vector_base(std::_Vector_base<double, std::allocator<double>> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(160,7):remark #34051: REGISTER ALLOCATION : [_ZNSt12_Vector_baseIdSaIdEED1Ev] /usr/include/c++/4.8.5/bits/stl_vector.h:160

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :      10
            Global    :       7
            Local     :       3
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellData<Real>::unpackStream(SAMRAI::pdat::CellData<Real> *, SAMRAI::tbox::MessageStream &, const SAMRAI::hier::BoxOverlap &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::pdat::CellData<Real>::unpackStream(SAMRAI::pdat::CellData<Real> *, SAMRAI::tbox::MessageStream &, const SAMRAI::hier::BoxOverlap &)) [664] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(513,1)
  -> INLINE: (518,10) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (518,12) SAMRAI::pdat::ArrayData<Real>::unpackStream(SAMRAI::pdat::ArrayData<Real> *, SAMRAI::tbox::MessageStream &, const SAMRAI::hier::BoxContainer &, const SAMRAI::hier::IntVector &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(935,32) SAMRAI::tbox::MessageStream::getReadBuffer<Real>(SAMRAI::tbox::MessageStream *, size_t)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h:(195,32) SAMRAI::tbox::MessageStream::getSizeof<double>(size_t)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h:(198,61) SAMRAI::tbox::MessageStream::getCurrentSize(const SAMRAI::tbox::MessageStream *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(938,59) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(939,11) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(939,11) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(939,25) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(939,25) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(939,32) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(203,13) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator++(std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *)
         {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(205,13) std::_List_const_iterator<SAMRAI::hier::Box>::operator++(std::_List_const_iterator<SAMRAI::hier::Box> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(940,7) SAMRAI::pdat::ArrayData<Real>::unpackBuffer(SAMRAI::pdat::ArrayData<Real> *, const Real *, const SAMRAI::hier::Box &)
      -> INLINE: (1313,4) SAMRAI::pdat::ArrayDataOperationUtilities<Real, SAMRAI::pdat::CopyOperation<Real>>::doArrayDataBufferOperationOnBox(const SAMRAI::pdat::ArrayData<Real> &, const Real *, const SAMRAI::hier::Box &, bool, const SAMRAI::pdat::CopyOperation<Real> &)
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(272,41) SAMRAI::pdat::ArrayData<Real>::getDim(const SAMRAI::pdat::ArrayData<Real> *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1251,17) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(275,53) SAMRAI::pdat::ArrayData<Real>::getPointer(const SAMRAI::pdat::ArrayData<Real> *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(220,19) std::vector<double, std::allocator<double>>::operator[](const std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(278,44) SAMRAI::pdat::ArrayData<Real>::getPointer(const SAMRAI::pdat::ArrayData<Real> *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(220,19) std::vector<double, std::allocator<double>>::operator[](const std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(280,49) SAMRAI::pdat::ArrayData<Real>::getDepth(const SAMRAI::pdat::ArrayData<Real> *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(283,43) SAMRAI::pdat::ArrayData<Real>::getBox(const SAMRAI::pdat::ArrayData<Real> *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(288,47) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(288,47) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(289,24) SAMRAI::hier::Box::numberCells(const SAMRAI::hier::Box *, SAMRAI::hier::Box::dir_t) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(623,11) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
            -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
              -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
            -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
              -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
            -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
            -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
            -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
            -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(290,30) SAMRAI::hier::Box::numberCells(const SAMRAI::hier::Box *, SAMRAI::hier::Box::dir_t) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(623,11) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
            -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
              -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
            -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
              -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
            -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
            -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
            -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
            -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(294,40) SAMRAI::pdat::ArrayData<Real>::getOffset(const SAMRAI::pdat::ArrayData<Real> *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(307,53) SAMRAI::hier::Box::size(const SAMRAI::hier::Box *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(654,12) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
            -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
              -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
            -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
              -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
            -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
            -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
            -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
            -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(655,44) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(655,54) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(657,48) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(657,58) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(309,35) SAMRAI::hier::Box::offset(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,29) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,38) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,18) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,32) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,49) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,59) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,40) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,50) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(309,48) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(386,52) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(386,52) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(397,15) SAMRAI::pdat::CopyOperation<Real>::operator()(const SAMRAI::pdat::CopyOperation<Real> *, Real &, const Real &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(406,34) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(406,34) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(940,34) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,30) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator*(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,44) std::_List_const_iterator<SAMRAI::hier::Box>::operator*(const std::_List_const_iterator<SAMRAI::hier::Box> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(941,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator->(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(171,29) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator*(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(171,45) std::_List_const_iterator<SAMRAI::hier::Box>::operator*(const std::_List_const_iterator<SAMRAI::hier::Box> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(941,27) SAMRAI::hier::Box::size(const SAMRAI::hier::Box *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(654,12) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(655,44) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(655,54) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(657,48) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(657,58) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INDIRECT- (VIRTUAL): (518,33)  EXPR_CONV.SI64.P64(*((SI64*) (t_overlap.176412_V$b4b.0.677->__vptr_V$b31_2.39 + EXPR_CONV.SI32.I64(6(SI32)) * 8(I64))))
  -> INDIRECT- (VIRTUAL): (519,7)  EXPR_CONV.SI64.P64(*((SI64*) (t_overlap.176412_V$b4b.0.677->__vptr_V$b31_2.39 + EXPR_CONV.SI32.I64(3(SI32)) * 8(I64))))


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(220,12) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(519,12)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(288,47) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(519,12)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between this->d_empty_flag (606:16) and this->d_empty_flag (599:11)

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(519,12)
         remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(519,12)
         remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      LOOP END
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(519,12)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(656,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(519,12)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      remark #25478: While Loop Unrolled by 8  
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(519,12)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between myoffset (682:10) and myoffset (682:10)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(519,12)
   <Remainder>
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(319,4) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(519,12)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between dat_b[nd] (387:10) and dat_b[m] (425:16)

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(386,52) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(519,12)
         remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(386,52) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(519,12)
      <Remainder>
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(394,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(519,12)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed OUTPUT dependence between dst_ptr[dat_counter+i0] (31:4) and dst_ptr[dat_counter+i0] (31:4)

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(396,10) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(519,12)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed FLOW dependence between dst_ptr[dat_counter+i0] (31:4) and buffer[buf_counter+i0] (31:4)
            remark #25439: unrolled with remainder by 2  
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(396,10) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(519,12)
         <Remainder>
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(406,34) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(519,12)
            remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(412,16) ]
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(419,13) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(519,12)
            remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
            remark #25439: unrolled with remainder by 8  
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(424,13) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(519,12)
            remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
            remark #25439: unrolled with remainder by 2  
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(424,13) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(519,12)
         <Remainder>
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(419,13) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(519,12)
         <Remainder>
            remark #25436: completely unrolled by 7  
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(519,12)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(656,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(519,12)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      remark #25478: While Loop Unrolled by 8  
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(513,1):remark #34051: REGISTER ALLOCATION : [_ZN6SAMRAI4pdat8CellDataIdE12unpackStreamERNS_4tbox13MessageStreamERKNS_4hier10BoxOverlapE] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:513

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     364
            Global    :      85
            Local     :     279
        Regenerable   :      17
        Spilled       :      20
        
    Routine stack
        Variables     :     104 bytes*
            Reads     :      38 [6.46e+02 ~ 6.5%]
            Writes    :      16 [5.08e+02 ~ 5.1%]
        Spills        :     112 bytes*
            Reads     :      23 [1.86e+02 ~ 1.9%]
            Writes    :      21 [7.82e+01 ~ 0.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellData<Real>::sum(SAMRAI::pdat::CellData<Real> *, const SAMRAI::hier::PatchData &, const SAMRAI::hier::BoxOverlap &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::pdat::CellData<Real>::sum(SAMRAI::pdat::CellData<Real> *, const SAMRAI::hier::PatchData &, const SAMRAI::hier::BoxOverlap &)) [665] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(534,1)
  -> INLINE: (552,7) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (552,7) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (552,7) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (552,7) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (552,7) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (552,7) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (552,7) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (552,7) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> INLINE: (552,7) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (552,7) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (552,7) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (552,7) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (552,7) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (552,7) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INDIRECT- (VIRTUAL): (557,41)  EXPR_CONV.SI64.P64(*((SI64*) (t_overlap.176686_V$b4f.0.678->__vptr_V$b31_2.39 + EXPR_CONV.SI32.I64(3(SI32)) * 8(I64))))
  -> INDIRECT- (VIRTUAL): (559,10)  EXPR_CONV.SI64.P64(*((SI64*) (t_overlap.176686_V$b4f.0.678->__vptr_V$b31_2.39 + EXPR_CONV.SI32.I64(6(SI32)) * 8(I64))))
  -> INLINE: (560,40) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (561,17) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (561,19) SAMRAI::pdat::ArrayData<Real>::isInitialized(const SAMRAI::pdat::ArrayData<Real> *) const
  -> INLINE: (562,16) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (562,18) SAMRAI::pdat::ArrayData<Real>::sum(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::BoxContainer &, const SAMRAI::hier::IntVector &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(750,54) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(751,11) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(751,11) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(751,20) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(751,20) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(751,27) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(203,13) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator++(std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *)
         {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(205,13) std::_List_const_iterator<SAMRAI::hier::Box>::operator++(std::_List_const_iterator<SAMRAI::hier::Box> *)
    -> /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(752,7) SAMRAI::pdat::ArrayData<Real>::sum(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &, const SAMRAI::hier::IntVector &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(752,16) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,30) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator*(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,44) std::_List_const_iterator<SAMRAI::hier::Box>::operator*(const std::_List_const_iterator<SAMRAI::hier::Box> *) const


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(751,11) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(563,18)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(534,1):remark #34051: REGISTER ALLOCATION : [_ZN6SAMRAI4pdat8CellDataIdE3sumERKNS_4hier9PatchDataERKNS3_10BoxOverlapE] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:534

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rbp rsi rdi r8 r12-r15]
        
    Routine temporaries
        Total         :     379
            Global    :      90
            Local     :     289
        Regenerable   :     142
        Spilled       :       6
        
    Routine stack
        Variables     :     469 bytes*
            Reads     :      41 [6.93e+00 ~ 4.5%]
            Writes    :      54 [2.76e+01 ~ 18.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::sum(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &, const SAMRAI::hier::IntVector &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::pdat::ArrayData<Real>::sum(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &, const SAMRAI::hier::IntVector &)) [666] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(703,1)
  -> INLINE: (705,18) SAMRAI::hier::IntVector::operator==(const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(762,43) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(763,59) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(764,44) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(764,72) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(768,47) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(770,41) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(770,60) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (705,21) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(1133,28) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (705,50) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
  -> INLINE: (707,7) SAMRAI::pdat::ArrayData<Real>::sum(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &)
    -> INLINE: (558,15) SAMRAI::hier::Box::isSpatiallyEqual(const SAMRAI::hier::Box *, const SAMRAI::hier::Box &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(754,21) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(754,43) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,27) SAMRAI::hier::BlockId::operator==(const SAMRAI::hier::BlockId *, const SAMRAI::hier::BlockId &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,51) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,66) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: (559,13) SAMRAI::hier::Box::isSpatiallyEqual(const SAMRAI::hier::Box *, const SAMRAI::hier::Box &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(754,21) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(754,43) SAMRAI::hier::Index::operator==(const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,47) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(150,56) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,27) SAMRAI::hier::BlockId::operator==(const SAMRAI::hier::BlockId *, const SAMRAI::hier::BlockId &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,51) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(755,66) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: (561,37) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
    -> INLINE: (562,47) std::vector<double, std::allocator<double>>::operator[](const std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) const
    -> INLINE: (577,15) SAMRAI::pdat::SumOperation<Real>::operator()(const SAMRAI::pdat::SumOperation<Real> *, Real &, const Real &) const
    -> INLINE: (585,20) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: (590,46) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> (592,10) SAMRAI::pdat::ArrayDataOperationUtilities<Real, SAMRAI::pdat::SumOperation<Real>>::doArrayDataOperationOnBox(SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &, const SAMRAI::hier::IntVector &, unsigned int, unsigned int, unsigned int, const SAMRAI::pdat::SumOperation<Real> &)
  -> INLINE: (712,25) SAMRAI::hier::Box::shift(SAMRAI::hier::Box *, const SAMRAI::hier::Box &, const SAMRAI::hier::IntVector &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(1250,22) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(1250,30) SAMRAI::hier::Index::operator+(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(197,11) SAMRAI::hier::Index::operator+=(SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &)
        -> INLINE: (178,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (178,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (179,27) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(1250,44) SAMRAI::hier::Box::upper(const SAMRAI::hier::Box *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(1250,52) SAMRAI::hier::Index::operator+(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(197,11) SAMRAI::hier::Index::operator+=(SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &)
        -> INLINE: (178,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (178,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (179,27) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (714,20) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> (722,10) SAMRAI::pdat::ArrayDataOperationUtilities<Real, SAMRAI::pdat::SumOperation<Real>>::doArrayDataOperationOnBox(SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &, const SAMRAI::hier::IntVector &, unsigned int, unsigned int, unsigned int, const SAMRAI::pdat::SumOperation<Real> &)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(761,10) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(706,18)
   remark #15523: loop was not vectorized: loop control variable b was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(763,38) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(706,18)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(769,10) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(706,18)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(708,7)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(708,7)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(708,7)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(708,7)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(708,7)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(150,32) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(708,7)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(708,7)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(708,7)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(576,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(708,7)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(576,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(708,7)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(576,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(708,7)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(576,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(708,7)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(576,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(708,7)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(576,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(708,7)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(708,7)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(178,42) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(713,25)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 8  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(178,42) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(713,25)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 8  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(715,20)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
LOOP END

    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(703,1):remark #34051: REGISTER ALLOCATION : [_ZN6SAMRAI4pdat9ArrayDataIdE3sumERKS2_RKNS_4hier3BoxERKNS5_9IntVectorE] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:703

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :     344
            Global    :     104
            Local     :     240
        Regenerable   :      58
        Spilled       :       8
        
    Routine stack
        Variables     :     466 bytes*
            Reads     :      30 [7.71e+00 ~ 5.4%]
            Writes    :      28 [1.57e+00 ~ 1.1%]
        Spills        :      24 bytes*
            Reads     :       6 [1.04e+00 ~ 0.7%]
            Writes    :       3 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayDataOperationUtilities<Real, SAMRAI::pdat::SumOperation<Real>>::doArrayDataOperationOnBox(SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &, const SAMRAI::hier::IntVector &, unsigned int, unsigned int, unsigned int, const SAMRAI::pdat::SumOperation<Real> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::pdat::ArrayDataOperationUtilities<Real, SAMRAI::pdat::SumOperation<Real>>::doArrayDataOperationOnBox(SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &, const SAMRAI::hier::IntVector &, unsigned int, unsigned int, unsigned int, const SAMRAI::pdat::SumOperation<Real> &)) [667] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(59,1)
  -> INLINE: (64,35) SAMRAI::pdat::ArrayData<Real>::getDim(const SAMRAI::pdat::ArrayData<Real> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1251,17) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
  -> INLINE: (66,30) SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(210,19) std::vector<double, std::allocator<double>>::operator[](std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
  -> INLINE: (67,36) SAMRAI::pdat::ArrayData<Real>::getPointer(const SAMRAI::pdat::ArrayData<Real> *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(220,19) std::vector<double, std::allocator<double>>::operator[](const std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) const
  -> INLINE: (70,33) SAMRAI::pdat::ArrayData<Real>::getBox(const SAMRAI::pdat::ArrayData<Real> *) const
  -> INLINE: (71,33) SAMRAI::pdat::ArrayData<Real>::getBox(const SAMRAI::pdat::ArrayData<Real> *) const
  -> INLINE: (77,47) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (77,47) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (78,24) SAMRAI::hier::Box::numberCells(const SAMRAI::hier::Box *, SAMRAI::hier::Box::dir_t) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(623,11) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
      -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (79,26) SAMRAI::hier::Box::numberCells(const SAMRAI::hier::Box *, SAMRAI::hier::Box::dir_t) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(623,11) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
      -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (80,26) SAMRAI::hier::Box::numberCells(const SAMRAI::hier::Box *, SAMRAI::hier::Box::dir_t) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(623,11) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
      -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (84,34) SAMRAI::pdat::ArrayData<Real>::getOffset(const SAMRAI::pdat::ArrayData<Real> *) const
  -> INLINE: (85,34) SAMRAI::pdat::ArrayData<Real>::getOffset(const SAMRAI::pdat::ArrayData<Real> *) const
  -> INLINE: (97,53) SAMRAI::hier::Box::size(const SAMRAI::hier::Box *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(654,12) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
      -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(655,44) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(655,54) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(657,48) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(657,58) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (99,31) SAMRAI::hier::Box::offset(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,29) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,38) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,18) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,32) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,49) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,59) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,40) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,50) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (99,44) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (100,31) SAMRAI::hier::Box::offset(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,29) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,38) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,18) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,32) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,49) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,59) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,40) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,50) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (100,44) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (100,52) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(319,11) SAMRAI::hier::Index::operator-=(SAMRAI::hier::Index *, const SAMRAI::hier::IntVector &)
      -> INLINE: (300,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (300,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (301,27) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (187,52) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (187,52) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (199,15) SAMRAI::pdat::SumOperation<Real>::operator()(const SAMRAI::pdat::SumOperation<Real> *, Real &, const Real &) const
  -> INLINE: (208,53) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (208,53) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(77,47)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(79,24)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(80,26)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(81,26)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(98,53)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(656,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(98,53)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 2  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(100,31)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between myoffset (682:10) and myoffset (682:10)
   remark #25439: unrolled with remainder by 2  
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(100,31)
<Remainder>
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(300,42) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(101,52)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 8  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(101,31)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between myoffset (682:10) and myoffset (682:10)
   remark #25439: unrolled with remainder by 2  
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(101,31)
<Remainder>
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(119,4)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between dst_b[nd] (188:10) and dst_b[m] (230:16)

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(187,52)
      remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(187,52)
   <Remainder>
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(196,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between vdst (40:4) and vdst (40:4)

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(198,10)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed FLOW dependence between vdst (40:4) and vdst (40:4)
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(198,10)
      <Remainder>
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(208,53)
         remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(208,67) ]
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(222,13)
         remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
         remark #25439: unrolled with remainder by 8  
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(229,13)
         remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(229,13)
      <Remainder>
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(222,13)
      <Remainder>
         remark #25436: completely unrolled by 7  
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(59,1):remark #34051: REGISTER ALLOCATION : [_ZN6SAMRAI4pdat27ArrayDataOperationUtilitiesIdNS0_12SumOperationIdEEE25doArrayDataOperationOnBoxERNS0_9ArrayDataIdEERKS6_RKNS_4hier3BoxERKNSA_9IntVectorEjjjRKS3_] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:59

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :     300
            Global    :      96
            Local     :     204
        Regenerable   :       8
        Spilled       :      20
        
    Routine stack
        Variables     :     120 bytes*
            Reads     :      50 [3.48e+02 ~ 8.7%]
            Writes    :      29 [2.98e+02 ~ 7.5%]
        Spills        :     112 bytes*
            Reads     :      20 [4.38e+01 ~ 1.1%]
            Writes    :      20 [2.80e+01 ~ 0.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellData<Real>::unpackStreamAndSum(SAMRAI::pdat::CellData<Real> *, SAMRAI::tbox::MessageStream &, const SAMRAI::hier::BoxOverlap &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::pdat::CellData<Real>::unpackStreamAndSum(SAMRAI::pdat::CellData<Real> *, SAMRAI::tbox::MessageStream &, const SAMRAI::hier::BoxOverlap &)) [668] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(580,1)
  -> INDIRECT- (VIRTUAL): (587,7)  EXPR_CONV.SI64.P64(*((SI64*) (t_overlap.176771_V$b61.0.679->__vptr_V$b31_2.39 + EXPR_CONV.SI32.I64(6(SI32)) * 8(I64))))
  -> INDIRECT- (VIRTUAL): (588,38)  EXPR_CONV.SI64.P64(*((SI64*) (t_overlap.176771_V$b61.0.679->__vptr_V$b31_2.39 + EXPR_CONV.SI32.I64(3(SI32)) * 8(I64))))
  -> INLINE: (589,62) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (590,17) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
  -> INLINE: (590,17) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
  -> INLINE: (590,30) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (590,30) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (590,37) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(203,13) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator++(std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(205,13) std::_List_const_iterator<SAMRAI::hier::Box>::operator++(std::_List_const_iterator<SAMRAI::hier::Box> *)
  -> INLINE: (591,33) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,30) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator*(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,44) std::_List_const_iterator<SAMRAI::hier::Box>::operator*(const std::_List_const_iterator<SAMRAI::hier::Box> *) const
  -> INLINE: (591,50) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (591,52) SAMRAI::pdat::ArrayData<Real>::getBox(const SAMRAI::pdat::ArrayData<Real> *) const
  -> INLINE: (592,22) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (593,16) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (593,18) SAMRAI::pdat::ArrayData<Real>::unpackStreamAndSum(SAMRAI::pdat::ArrayData<Real> *, SAMRAI::tbox::MessageStream &, const SAMRAI::hier::Box &, const SAMRAI::hier::IntVector &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(969,43) SAMRAI::hier::Box::size(const SAMRAI::hier::Box *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(654,12) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
          -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(655,44) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(655,54) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(657,48) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(657,58) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(970,32) SAMRAI::tbox::MessageStream::getReadBuffer<Real>(SAMRAI::tbox::MessageStream *, size_t)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h:(195,32) SAMRAI::tbox::MessageStream::getSizeof<double>(size_t)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/MessageStream.h:(198,61) SAMRAI::tbox::MessageStream::getCurrentSize(const SAMRAI::tbox::MessageStream *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(972,4) SAMRAI::pdat::ArrayData<Real>::unpackBufferAndSum(SAMRAI::pdat::ArrayData<Real> *, const Real *, const SAMRAI::hier::Box &)
      -> INLINE: (1341,4) SAMRAI::pdat::ArrayDataOperationUtilities<Real, SAMRAI::pdat::SumOperation<Real>>::doArrayDataBufferOperationOnBox(const SAMRAI::pdat::ArrayData<Real> &, const Real *, const SAMRAI::hier::Box &, bool, const SAMRAI::pdat::SumOperation<Real> &)
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(272,41) SAMRAI::pdat::ArrayData<Real>::getDim(const SAMRAI::pdat::ArrayData<Real> *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1251,17) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(275,53) SAMRAI::pdat::ArrayData<Real>::getPointer(const SAMRAI::pdat::ArrayData<Real> *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(220,19) std::vector<double, std::allocator<double>>::operator[](const std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(278,44) SAMRAI::pdat::ArrayData<Real>::getPointer(const SAMRAI::pdat::ArrayData<Real> *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(220,19) std::vector<double, std::allocator<double>>::operator[](const std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(280,49) SAMRAI::pdat::ArrayData<Real>::getDepth(const SAMRAI::pdat::ArrayData<Real> *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(283,43) SAMRAI::pdat::ArrayData<Real>::getBox(const SAMRAI::pdat::ArrayData<Real> *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(288,47) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(288,47) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(289,24) SAMRAI::hier::Box::numberCells(const SAMRAI::hier::Box *, SAMRAI::hier::Box::dir_t) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(623,11) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
            -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
              -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
            -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
              -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
            -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
            -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
            -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
            -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(290,30) SAMRAI::hier::Box::numberCells(const SAMRAI::hier::Box *, SAMRAI::hier::Box::dir_t) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(623,11) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
            -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
              -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
            -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
              -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
            -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
            -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
            -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
            -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(626,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(294,40) SAMRAI::pdat::ArrayData<Real>::getOffset(const SAMRAI::pdat::ArrayData<Real> *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(307,53) SAMRAI::hier::Box::size(const SAMRAI::hier::Box *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(654,12) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
            -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
              -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
            -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
              -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
            -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
            -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
            -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
            -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(655,44) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(655,54) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(656,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(657,48) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(657,58) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(309,35) SAMRAI::hier::Box::offset(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,29) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
            -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(681,38) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,18) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,32) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,49) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(683,59) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,40) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(685,50) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(309,48) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(386,52) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(386,52) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(397,15) SAMRAI::pdat::SumOperation<Real>::operator()(const SAMRAI::pdat::SumOperation<Real> *, Real &, const Real &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(406,34) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp:(406,34) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(593,10)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(593,22)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(594,18)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(656,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(594,18)
      remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
      remark #25439: unrolled with remainder by 8  
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(288,47) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(594,18)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between intersect.intersect.intersect.intersect (604:41) and this->d_empty_flag (610:10)

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(594,18)
         remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(594,18)
         remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      LOOP END
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(594,18)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,55) ]
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(656,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(594,18)
      remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
      remark #25439: unrolled with remainder by 8  
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(594,18)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between myoffset (682:10) and myoffset (682:10)
      remark #25439: unrolled with remainder by 2  
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(681,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(594,18)
   <Remainder>
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(319,4) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(594,18)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between dat_b[nd] (387:10) and dat_b[m] (425:16)

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(386,52) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(594,18)
         remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(386,52) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(594,18)
      <Remainder>
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(394,7) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(594,18)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed OUTPUT dependence between dst_ptr[dat_counter+i0] (40:4) and dst_ptr[dat_counter+i0] (40:4)

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(396,10) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(594,18)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed FLOW dependence between dst_ptr[dat_counter+i0] (40:4) and dst_ptr[dat_counter+i0] (40:4)
            remark #25439: unrolled with remainder by 2  
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(396,10) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(594,18)
         <Remainder>
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(406,34) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(594,18)
            remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(412,16) ]
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(419,13) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(594,18)
            remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
            remark #25439: unrolled with remainder by 8  
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(424,13) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(594,18)
            remark #15315: loop was not vectorized: estimated number of iterations (3) is insufficient for vectorization
            remark #25439: unrolled with remainder by 2  
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(424,13) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(594,18)
         <Remainder>
         LOOP END

         LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(419,13) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(594,18)
         <Remainder>
            remark #25436: completely unrolled by 7  
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(656,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(594,18)
   <Remainder>
      remark #25436: completely unrolled by 7  
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(656,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(594,18)
   <Remainder>
      remark #25436: completely unrolled by 7  
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(580,1):remark #34051: REGISTER ALLOCATION : [_ZN6SAMRAI4pdat8CellDataIdE18unpackStreamAndSumERNS_4tbox13MessageStreamERKNS_4hier10BoxOverlapE] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:580

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :     472
            Global    :      99
            Local     :     373
        Regenerable   :      25
        Spilled       :      22
        
    Routine stack
        Variables     :     176 bytes*
            Reads     :     122 [7.69e+02 ~ 8.0%]
            Writes    :      24 [4.76e+02 ~ 5.0%]
        Spills        :     128 bytes*
            Reads     :      29 [1.72e+02 ~ 1.8%]
            Writes    :      28 [6.80e+01 ~ 0.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellData<Real>::getFromRestart(SAMRAI::pdat::CellData<Real> *, const std::shared_ptr<SAMRAI::tbox::Database> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::pdat::CellData<Real>::getFromRestart(SAMRAI::pdat::CellData<Real> *, const std::shared_ptr<SAMRAI::tbox::Database> &)) [669] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(717,1)
  -> DELETED: (723,8) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (723,8) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (723,24) std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (723,37) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (723,37) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INDIRECT- (VIRTUAL): (723,37)  EXPR_CONV.SI64.P64(*((SI64*) (__$Ua6_V$b6c.0.680->__vptr_V$a14 + EXPR_CONV.SI32.I64(65(SI32)) * 8(I64))))
  -> INLINE: (723,37) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (725,7) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (725,7) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (725,7) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (725,7) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (725,7) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (725,7) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (725,7) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (725,7) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> INLINE: (725,7) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (725,7) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (725,7) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (725,7) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (725,7) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (725,7) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (729,4) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (729,4) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (729,24) std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (729,37) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (729,37) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INDIRECT- (VIRTUAL): (729,37)  EXPR_CONV.SI64.P64(*((SI64*) (__$Ua7_V$b6d.0.680->__vptr_V$a14 + EXPR_CONV.SI32.I64(65(SI32)) * 8(I64))))
  -> INLINE: (729,37) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (731,10) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (731,12) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (731,12) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (731,12) std::shared_ptr<SAMRAI::tbox::Database>::~shared_ptr(std::shared_ptr<SAMRAI::tbox::Database> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (731,12) SAMRAI::pdat::ArrayData<Real>::getFromRestart(SAMRAI::pdat::ArrayData<Real> *, const std::shared_ptr<SAMRAI::tbox::Database> &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1200,8) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1200,8) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1200,24) std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1200,37) std::allocator<char>::allocator(std::allocator<char> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INDIRECT- (VIRTUAL): /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1200,37)  EXPR_CONV.SI64.P64(*((SI64*) (__$Ud2_V$c44.0.705.31769->__vptr_V$a14 + EXPR_CONV.SI32.I64(65(SI32)) * 8(I64))))
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1200,37) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1200,37) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1202,7) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1202,7) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1202,7) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1202,7) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1202,7) std::allocator<char>::allocator(std::allocator<char> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1202,7) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1202,7) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
    -> /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1202,7) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
    -> /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1202,7) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1202,7) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1202,7) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1202,7) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1202,7) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1202,7) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1206,4) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1206,4) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1206,24) std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1206,37) std::allocator<char>::allocator(std::allocator<char> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INDIRECT- (VIRTUAL): /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1206,37)  EXPR_CONV.SI64.P64(*((SI64*) (__$Ud3_V$c45.0.705.31769->__vptr_V$a14 + EXPR_CONV.SI32.I64(65(SI32)) * 8(I64))))
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1206,37) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1206,37) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1207,4) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1207,4) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1207,25) std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1207,38) std::allocator<char>::allocator(std::allocator<char> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INDIRECT- (VIRTUAL): /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1207,38)  EXPR_CONV.SI64.P64(*((SI64*) (__$Ud4_V$c46.0.705.31769->__vptr_V$a14 + EXPR_CONV.SI32.I64(65(SI32)) * 8(I64))))
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1207,38) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1207,38) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1208,10) SAMRAI::hier::Box::operator=(SAMRAI::hier::Box *, const SAMRAI::tbox::DatabaseBox &)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(1172,14) SAMRAI::hier::Box::Box_from_DatabaseBox(SAMRAI::hier::Box *, const SAMRAI::tbox::DatabaseBox &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1208,10) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1208,10) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1208,22) std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1208,39) std::allocator<char>::allocator(std::allocator<char> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INDIRECT- (VIRTUAL): /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1208,39)  EXPR_CONV.SI64.P64(*((SI64*) (__$Ud6_V$c4c.0.705.31769->__vptr_V$a14 + EXPR_CONV.SI32.I64(25(SI32)) * 8(I64))))
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1208,39) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1208,39) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1215,14) std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1215,16) SAMRAI::tbox::Database::getVector(SAMRAI::tbox::Database *, const std::string &, std::vector<double, std::allocator<double>> &)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/Database.h:(1471,13) std::vector<double, std::allocator<double>>::~vector(std::vector<double, std::allocator<double>> *)
         {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/Database.h:(1471,13) std::vector<double, std::allocator<double>>::operator=(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>> &&)
         {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
      -> INDIRECT- (VIRTUAL): /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/Database.h:(1471,31)  EXPR_CONV.SI64.P64(*((SI64*) (this_22990_V$a10.0.587.31788->__vptr_V$a14 + EXPR_CONV.SI32.I64(51(SI32)) * 8(I64))))
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1215,16) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1215,16) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1215,26) std::allocator<char>::allocator(std::allocator<char> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1215,26) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1215,26) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (731,37) std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic> *) const
  -> (731,51) std::shared_ptr<SAMRAI::tbox::Database>::~shared_ptr(std::shared_ptr<SAMRAI::tbox::Database> *)
  -> INLINE: (731,51) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (731,51) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INDIRECT- (VIRTUAL): (731,51)  EXPR_CONV.SI64.P64(*((SI64*) (__$Ua9_V$b6f.0.680->__vptr_V$a14 + EXPR_CONV.SI32.I64(11(SI32)) * 8(I64))))
  -> INLINE: (731,51) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(717,1):remark #34051: REGISTER ALLOCATION : [_ZN6SAMRAI4pdat8CellDataIdE14getFromRestartERKSt10shared_ptrINS_4tbox8DatabaseEE] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:717

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     937
            Global    :     237
            Local     :     700
        Regenerable   :     350
        Spilled       :       8
        
    Routine stack
        Variables     :     961 bytes*
            Reads     :      78 [3.56e+01 ~ 8.7%]
            Writes    :     126 [5.22e+01 ~ 12.8%]
        Spills        :      16 bytes*
            Reads     :       2 [1.33e-01 ~ 0.0%]
            Writes    :       2 [1.33e-01 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::shared_ptr<SAMRAI::tbox::Database>::~shared_ptr(std::shared_ptr<SAMRAI::tbox::Database> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr.h(93,11):remark #34051: REGISTER ALLOCATION : [_ZNSt10shared_ptrIN6SAMRAI4tbox8DatabaseEED1Ev] /usr/include/c++/4.8.5/bits/shared_ptr.h:93

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rdi r12-r13]
        
    Routine temporaries
        Total         :      24
            Global    :      12
            Local     :      12
        Regenerable   :       3
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *, const std::vector<double, std::allocator<double>>::allocator_type &)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(257,20):remark #34051: REGISTER ALLOCATION : [_ZNSt6vectorIdSaIdEEC1ERKS0_] /usr/include/c++/4.8.5/bits/stl_vector.h:257

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rsi rdi]
        
    Routine temporaries
        Total         :      10
            Global    :       0
            Local     :      10
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellData<Real>::putToRestart(const SAMRAI::pdat::CellData<Real> *, const std::shared_ptr<SAMRAI::tbox::Database> &) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::pdat::CellData<Real>::putToRestart(const SAMRAI::pdat::CellData<Real> *, const std::shared_ptr<SAMRAI::tbox::Database> &) const) [673] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(747,1)
  -> INLINE: (752,14) std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (752,27) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (752,27) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (752,27) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (752,52) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (752,52) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INDIRECT- (VIRTUAL): (752,52)  EXPR_CONV.SI64.P64(*((SI64*) (__$Uaf_V$b82.0.681->__vptr_V$a14 + EXPR_CONV.SI32.I64(62(SI32)) * 8(I64))))
  -> INLINE: (754,14) std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (754,27) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (754,27) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (754,27) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (754,38) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (754,38) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INDIRECT- (VIRTUAL): (754,38)  EXPR_CONV.SI64.P64(*((SI64*) (__$Ub0_V$b83.0.681->__vptr_V$a14 + EXPR_CONV.SI32.I64(62(SI32)) * 8(I64))))
  -> INLINE: (756,10) std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::pdat::ArrayData<Real>, __gnu_cxx::_S_atomic> *) const
  -> DELETED: (756,12) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (756,12) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (756,12) std::shared_ptr<SAMRAI::tbox::Database>::~shared_ptr(std::shared_ptr<SAMRAI::tbox::Database> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (756,12) SAMRAI::pdat::ArrayData<Real>::putToRestart(const SAMRAI::pdat::ArrayData<Real> *, const std::shared_ptr<SAMRAI::tbox::Database> &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1234,14) std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1234,27) std::allocator<char>::allocator(std::allocator<char> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1234,27) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1234,27) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INDIRECT- (VIRTUAL): /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1234,53)  EXPR_CONV.SI64.P64(*((SI64*) (__$Udc_V$c61.0.706.28540->__vptr_V$a14 + EXPR_CONV.SI32.I64(62(SI32)) * 8(I64))))
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1234,53) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1234,53) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1236,14) std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1236,27) std::allocator<char>::allocator(std::allocator<char> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1236,27) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1236,27) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INDIRECT- (VIRTUAL): /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1236,38)  EXPR_CONV.SI64.P64(*((SI64*) (__$Ude_V$c63.0.706.28540->__vptr_V$a14 + EXPR_CONV.SI32.I64(62(SI32)) * 8(I64))))
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1236,38) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1236,38) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1237,14) std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1237,27) std::allocator<char>::allocator(std::allocator<char> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1237,27) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1237,27) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INDIRECT- (VIRTUAL): /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1237,39)  EXPR_CONV.SI64.P64(*((SI64*) (__$Udf_V$c64.0.706.28540->__vptr_V$a14 + EXPR_CONV.SI32.I64(62(SI32)) * 8(I64))))
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1237,39) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1237,39) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1238,14) std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1238,31) std::allocator<char>::allocator(std::allocator<char> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1238,31) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1238,31) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1238,40) SAMRAI::hier::Box::operator void(SAMRAI::tbox::DatabaseBox *, const SAMRAI::hier::Box *) const
    -> INDIRECT- (VIRTUAL): /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1238,40)  EXPR_CONV.SI64.P64(*((SI64*) (__$Ue1_V$c66.0.706.28540->__vptr_V$a14 + EXPR_CONV.SI32.I64(22(SI32)) * 8(I64))))
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1238,40) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1238,40) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1243,14) std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1243,16) SAMRAI::tbox::Database::putVector(SAMRAI::tbox::Database *, const std::string &, const std::vector<double, std::allocator<double>> &)
      -> INDIRECT- (VIRTUAL): /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/Database.h:(1487,28)  EXPR_CONV.SI64.P64(*((SI64*) (this_22992_V$a15.0.588.28559->__vptr_V$a14 + EXPR_CONV.SI32.I64(47(SI32)) * 8(I64))))
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1243,16) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1243,16) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1243,26) std::allocator<char>::allocator(std::allocator<char> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> DELETED: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1243,26) std::allocator<char>::~allocator(std::allocator<char> *)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp:(1243,26) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (756,35) std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::tbox::Database, __gnu_cxx::_S_atomic> *) const
  -> (756,49) std::shared_ptr<SAMRAI::tbox::Database>::~shared_ptr(std::shared_ptr<SAMRAI::tbox::Database> *)
  -> INLINE: (756,49) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (756,49) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INDIRECT- (VIRTUAL): (756,49)  EXPR_CONV.SI64.P64(*((SI64*) (__$Ub2_V$b85.0.681->__vptr_V$a14 + EXPR_CONV.SI32.I64(10(SI32)) * 8(I64))))
  -> INLINE: (756,49) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(747,1):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4pdat8CellDataIdE12putToRestartERKSt10shared_ptrINS_4tbox8DatabaseEE] /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:747

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rbx rbp rsi rdi r15]
        
    Routine temporaries
        Total         :     357
            Global    :      96
            Local     :     261
        Regenerable   :     123
        Spilled       :       3
        
    Routine stack
        Variables     :      90 bytes*
            Reads     :      25 [1.40e+01 ~ 8.3%]
            Writes    :      19 [2.00e+00 ~ 1.2%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::pdat::CellData<Real>::copyWithRotation(SAMRAI::pdat::CellData<Real> *, const SAMRAI::pdat::CellData<Real> &, const SAMRAI::pdat::CellOverlap &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::CellData<Real>::copyWithRotation(SAMRAI::pdat::CellData<Real> *, const SAMRAI::pdat::CellData<Real> &, const SAMRAI::pdat::CellOverlap &)) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp(316,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::canEstimateStreamSizeFromBox()

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::canEstimateStreamSizeFromBox()) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(63,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::ArrayData(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::hier::Box &, unsigned int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::ArrayData(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::hier::Box &, unsigned int)) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(105,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::getBox(const SAMRAI::pdat::ArrayData<Real> *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::getBox(const SAMRAI::pdat::ArrayData<Real> *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(171,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::getDepth(const SAMRAI::pdat::ArrayData<Real> *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::getDepth(const SAMRAI::pdat::ArrayData<Real> *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(178,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::getOffset(const SAMRAI::pdat::ArrayData<Real> *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::getOffset(const SAMRAI::pdat::ArrayData<Real> *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(185,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::getPointer(SAMRAI::pdat::ArrayData<Real> *, unsigned int)) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(207,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::getPointer(const SAMRAI::pdat::ArrayData<Real> *, unsigned int) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::getPointer(const SAMRAI::pdat::ArrayData<Real> *, unsigned int) const) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(217,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::operator()(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::hier::Index &, unsigned int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::operator()(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::hier::Index &, unsigned int)) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(247,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::copy(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::copy(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &)) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(284,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::copy(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::BoxContainer &, const SAMRAI::hier::Transformation &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::copy(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::BoxContainer &, const SAMRAI::hier::Transformation &)) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(450,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::copyDepth(SAMRAI::pdat::ArrayData<Real> *, unsigned int, const SAMRAI::pdat::ArrayData<Real> &, unsigned int, const SAMRAI::hier::Box &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::copyDepth(SAMRAI::pdat::ArrayData<Real> *, unsigned int, const SAMRAI::pdat::ArrayData<Real> &, unsigned int, const SAMRAI::hier::Box &)) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(475,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::sum(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::sum(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::Box &)) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(549,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::sum(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::BoxContainer &, const SAMRAI::hier::IntVector &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::sum(SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::pdat::ArrayData<Real> &, const SAMRAI::hier::BoxContainer &, const SAMRAI::hier::IntVector &)) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(749,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::getDataStreamSize(const SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::hier::BoxContainer &, const SAMRAI::hier::IntVector &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::getDataStreamSize(const SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::hier::BoxContainer &, const SAMRAI::hier::IntVector &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(761,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::packStream(const SAMRAI::pdat::ArrayData<Real> *, SAMRAI::tbox::MessageStream &, const SAMRAI::hier::BoxContainer &, const SAMRAI::hier::Transformation &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::packStream(const SAMRAI::pdat::ArrayData<Real> *, SAMRAI::tbox::MessageStream &, const SAMRAI::hier::BoxContainer &, const SAMRAI::hier::Transformation &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(870,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::unpackStream(SAMRAI::pdat::ArrayData<Real> *, SAMRAI::tbox::MessageStream &, const SAMRAI::hier::BoxContainer &, const SAMRAI::hier::IntVector &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::unpackStream(SAMRAI::pdat::ArrayData<Real> *, SAMRAI::tbox::MessageStream &, const SAMRAI::hier::BoxContainer &, const SAMRAI::hier::IntVector &)) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(929,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::unpackStreamAndSum(SAMRAI::pdat::ArrayData<Real> *, SAMRAI::tbox::MessageStream &, const SAMRAI::hier::Box &, const SAMRAI::hier::IntVector &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::unpackStreamAndSum(SAMRAI::pdat::ArrayData<Real> *, SAMRAI::tbox::MessageStream &, const SAMRAI::hier::Box &, const SAMRAI::hier::IntVector &)) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(966,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::getFromRestart(SAMRAI::pdat::ArrayData<Real> *, const std::shared_ptr<SAMRAI::tbox::Database> &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::getFromRestart(SAMRAI::pdat::ArrayData<Real> *, const std::shared_ptr<SAMRAI::tbox::Database> &)) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(1197,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::putToRestart(const SAMRAI::pdat::ArrayData<Real> *, const std::shared_ptr<SAMRAI::tbox::Database> &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::putToRestart(const SAMRAI::pdat::ArrayData<Real> *, const std::shared_ptr<SAMRAI::tbox::Database> &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(1231,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::getDim(const SAMRAI::pdat::ArrayData<Real> *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::getDim(const SAMRAI::pdat::ArrayData<Real> *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(1250,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::packBuffer(const SAMRAI::pdat::ArrayData<Real> *, Real *, const SAMRAI::hier::Box &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::packBuffer(const SAMRAI::pdat::ArrayData<Real> *, Real *, const SAMRAI::hier::Box &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(1287,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::unpackBuffer(SAMRAI::pdat::ArrayData<Real> *, const Real *, const SAMRAI::hier::Box &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::unpackBuffer(SAMRAI::pdat::ArrayData<Real> *, const Real *, const SAMRAI::hier::Box &)) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(1306,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::unpackBufferAndSum(SAMRAI::pdat::ArrayData<Real> *, const Real *, const SAMRAI::hier::Box &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::unpackBufferAndSum(SAMRAI::pdat::ArrayData<Real> *, const Real *, const SAMRAI::hier::Box &)) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(1334,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::getIndex(const SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::hier::Index &, unsigned int) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::getIndex(const SAMRAI::pdat::ArrayData<Real> *, const SAMRAI::hier::Index &, unsigned int) const) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(194,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::CopyOperation<Real>::operator()(const SAMRAI::pdat::CopyOperation<Real> *, Real &, const Real &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::CopyOperation<Real>::operator()(const SAMRAI::pdat::CopyOperation<Real> *, Real &, const Real &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CopyOperation.cpp(30,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayDataOperationUtilities<Real, SAMRAI::pdat::CopyOperation<Real>>::doArrayDataBufferOperationOnBox(const SAMRAI::pdat::ArrayData<Real> &, const Real *, const SAMRAI::hier::Box &, bool, const SAMRAI::pdat::CopyOperation<Real> &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayDataOperationUtilities<Real, SAMRAI::pdat::CopyOperation<Real>>::doArrayDataBufferOperationOnBox(const SAMRAI::pdat::ArrayData<Real> &, const Real *, const SAMRAI::hier::Box &, bool, const SAMRAI::pdat::CopyOperation<Real> &)) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(267,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::SumOperation<Real>::operator()(const SAMRAI::pdat::SumOperation<Real> *, Real &, const Real &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::SumOperation<Real>::operator()(const SAMRAI::pdat::SumOperation<Real> *, Real &, const Real &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/SumOperation.cpp(35,1)

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayDataOperationUtilities<Real, SAMRAI::pdat::SumOperation<Real>>::doArrayDataBufferOperationOnBox(const SAMRAI::pdat::ArrayData<Real> &, const Real *, const SAMRAI::hier::Box &, bool, const SAMRAI::pdat::SumOperation<Real> &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayDataOperationUtilities<Real, SAMRAI::pdat::SumOperation<Real>>::doArrayDataBufferOperationOnBox(const SAMRAI::pdat::ArrayData<Real> &, const Real *, const SAMRAI::hier::Box &, bool, const SAMRAI::pdat::SumOperation<Real> &)) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayDataOperationUtilities.cpp(267,1)

===========================================================================

Begin optimization report for: SAMRAI::geom::CartesianGridGeometry::getXLower(const SAMRAI::geom::CartesianGridGeometry *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::geom::CartesianGridGeometry::getXLower(const SAMRAI::geom::CartesianGridGeometry *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/geom/CartesianGridGeometry.h(265,4)

===========================================================================

Begin optimization report for: SAMRAI::geom::CartesianGridGeometry::getXUpper(const SAMRAI::geom::CartesianGridGeometry *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::geom::CartesianGridGeometry::getXUpper(const SAMRAI::geom::CartesianGridGeometry *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/geom/CartesianGridGeometry.h(275,4)

===========================================================================

Begin optimization report for: SAMRAI::geom::CartesianPatchGeometry::getDx(const SAMRAI::geom::CartesianPatchGeometry *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::geom::CartesianPatchGeometry::getDx(const SAMRAI::geom::CartesianPatchGeometry *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/geom/CartesianPatchGeometry.h(70,4)

===========================================================================

Begin optimization report for: SAMRAI::geom::CartesianPatchGeometry::getXLower(const SAMRAI::geom::CartesianPatchGeometry *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::geom::CartesianPatchGeometry::getXLower(const SAMRAI::geom::CartesianPatchGeometry *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/geom/CartesianPatchGeometry.h(79,4)

===========================================================================

Begin optimization report for: __sti__$E()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (__sti__$E()) [824] <compiler generated>
  -> INLINE: /usr/include/c++/4.8.5/iostream:(74,25) __sti___ZN6SAMRAI4pdat8CellDataIdE6t_copyE()
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/CellData.cpp:(38,46) std::shared_ptr<SAMRAI::tbox::Timer>::shared_ptr(std::shared_ptr<SAMRAI::tbox::Timer> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(733,17):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (8, 0)
<compiler generated>:remark #34051: REGISTER ALLOCATION : [__sti__$E] (null):0

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rdx rsi rdi]
        
    Routine temporaries
        Total         :      24
            Global    :      11
            Local     :      13
        Regenerable   :      16
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: __sti___ZN6SAMRAI4pdat8CellDataIdE6t_copyE()

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (__sti___ZN6SAMRAI4pdat8CellDataIdE6t_copyE()) <compiler generated>

===========================================================================

Begin optimization report for: std::_Vector_base<double, std::allocator<double>>::_M_get_Tp_allocator(std::_Vector_base<double, std::allocator<double>> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(114,7):remark #34051: REGISTER ALLOCATION : [_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv] /usr/include/c++/4.8.5/bits/stl_vector.h:114

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rax rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Vector_base<double, std::allocator<double>>::_M_deallocate(std::_Vector_base<double, std::allocator<double>> *, std::_Vector_base<double, std::allocator<double>>::pointer, std::size_t)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(172,7):remark #34051: REGISTER ALLOCATION : [_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdm] /usr/include/c++/4.8.5/bits/stl_vector.h:172

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdx rsi rdi]
        
    Routine temporaries
        Total         :      11
            Global    :       7
            Local     :       4
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Vector_base<Real *, std::allocator<Real *>>::_M_get_Tp_allocator(std::_Vector_base<Real *, std::allocator<Real *>> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(114,7):remark #34051: REGISTER ALLOCATION : [_ZNSt12_Vector_baseIPdSaIS0_EE19_M_get_Tp_allocatorEv] /usr/include/c++/4.8.5/bits/stl_vector.h:114

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rax rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Vector_base<Real *, std::allocator<Real *>>::_M_deallocate(std::_Vector_base<Real *, std::allocator<Real *>> *, std::_Vector_base<Real *, std::allocator<Real *>>::pointer, std::size_t)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(172,7):remark #34051: REGISTER ALLOCATION : [_ZNSt12_Vector_baseIPdSaIS0_EE13_M_deallocateEPS0_m] /usr/include/c++/4.8.5/bits/stl_vector.h:172

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdx rsi rdi]
        
    Routine temporaries
        Total         :      11
            Global    :       7
            Local     :       4
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::pdat::ArrayData<Real>::isInitialized(const SAMRAI::pdat::ArrayData<Real> *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::pdat::ArrayData<Real>::isInitialized(const SAMRAI::pdat::ArrayData<Real> *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/pdat/ArrayData.cpp(164,1)

===========================================================================

Begin optimization report for: SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/GlobalId.h(88,4)

===========================================================================

Begin optimization report for: std::vector<Real *, std::allocator<Real *>>::_M_default_append(std::vector<Real *, std::allocator<Real *>> *, std::vector<Real *, std::allocator<Real *>>::size_type)

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /usr/include/c++/4.8.5/bits/vector.tcc(541,8)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /usr/include/c++/4.8.5/bits/vector.tcc(541,8)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /usr/include/c++/4.8.5/bits/vector.tcc(541,8)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /usr/include/c++/4.8.5/bits/vector.tcc(558,5)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /usr/include/c++/4.8.5/bits/vector.tcc(558,5)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /usr/include/c++/4.8.5/bits/vector.tcc(558,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(749,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(749,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/vector.tcc(534,5):remark #34051: REGISTER ALLOCATION : [_ZNSt6vectorIPdSaIS0_EE17_M_default_appendEm] /usr/include/c++/4.8.5/bits/vector.tcc:534

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rbx rsi rdi r12-r15 zmm0]
        
    Routine temporaries
        Total         :      52
            Global    :      24
            Local     :      28
        Regenerable   :       7
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      16 bytes*
            Reads     :       2 [6.32e-01 ~ 0.7%]
            Writes    :       2 [6.32e-01 ~ 0.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Hashtable<std::string, std::pair<const std::string, SAMRAI::hier::IntVector>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__umap_traits<true>>::_M_emplace<std::pair<std::string, SAMRAI::hier::IntVector>>(std::_Hashtable<std::string, std::pair<const std::string, SAMRAI::hier::IntVector>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__umap_traits<true>> *, std::true_type, std::pair<std::string, SAMRAI::hier::IntVector> &&)

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(1163,15) inlined into /usr/include/c++/4.8.5/bits/hashtable.h(1275,25)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(1705,7) inlined into /usr/include/c++/4.8.5/bits/hashtable.h(1283,61)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   remark #25478: While Loop Unrolled by 2  
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/char_traits.h(255,16):remark #34026: call to memcmp implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable.h(780,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable.h(1258,7):remark #34051: REGISTER ALLOCATION : [_ZNSt10_HashtableISsSt4pairIKSsN6SAMRAI4hier9IntVectorEESaIS5_ENSt8__detail10_Select1stESt8equal_toISsESt4hashISsENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE10_M_emplaceIIS0_ISsS4_EEEES0_INS7_14_Node_iteratorIS5_Lb0ELb1EEEbESt17integral_constantIbLb1EEDpOT_] /usr/include/c++/4.8.5/bits/hashtable.h:1258

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     200
            Global    :      52
            Local     :     148
        Regenerable   :      23
        Spilled       :       8
        
    Routine stack
        Variables     :      58 bytes*
            Reads     :      13 [1.14e+00 ~ 1.0%]
            Writes    :      14 [2.24e+00 ~ 2.0%]
        Spills        :      16 bytes*
            Reads     :       4 [1.34e+00 ~ 1.2%]
            Writes    :       2 [1.90e+00 ~ 1.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Hashtable<std::string, std::pair<const std::string, SAMRAI::hier::IntVector>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__umap_traits<true>>::clear(std::_Hashtable<std::string, std::pair<const std::string, SAMRAI::hier::IntVector>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__umap_traits<true>> *)

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/hashtable.h(759,7) inlined into /usr/include/c++/4.8.5/bits/hashtable.h(1642,7)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/hashtable.h(1642,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable.h(1640,5):remark #34051: REGISTER ALLOCATION : [_ZNSt10_HashtableISsSt4pairIKSsN6SAMRAI4hier9IntVectorEESaIS5_ENSt8__detail10_Select1stESt8equal_toISsESt4hashISsENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE5clearEv] /usr/include/c++/4.8.5/bits/hashtable.h:1640

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rbx rbp rsi rdi r8 r14-r15]
        
    Routine temporaries
        Total         :      31
            Global    :      13
            Local     :      18
        Regenerable   :       7
        Spilled       :       4
        
    Routine stack
        Variables     :       1 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      24 bytes*
            Reads     :       3 [2.33e+00 ~ 2.6%]
            Writes    :       3 [2.33e+00 ~ 2.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Hashtable<std::string, std::pair<const std::string, SAMRAI::hier::IntVector>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__umap_traits<true>>::_Hashtable(std::_Hashtable<std::string, std::pair<const std::string, SAMRAI::hier::IntVector>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__umap_traits<true>> *, std::_Hashtable<std::string, std::pair<const std::string, SAMRAI::hier::IntVector>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__umap_traits<true>>::size_type, const std::hash<std::string> &, const std::__detail::_Mod_range_hashing &, const std::__detail::_Default_ranged_hash &, const std::equal_to<std::string> &, const std::__detail::_Select1st &, const std::_Hashtable<std::string, std::pair<const std::string, SAMRAI::hier::IntVector>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__umap_traits<true>>::allocator_type &)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/hashtable.h(780,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/hashtable.h(829,5):remark #34051: REGISTER ALLOCATION : [_ZNSt10_HashtableISsSt4pairIKSsN6SAMRAI4hier9IntVectorEESaIS5_ENSt8__detail10_Select1stESt8equal_toISsESt4hashISsENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEEC1EmRKSC_RKSD_RKSE_RKSA_RKS8_RKS6_] /usr/include/c++/4.8.5/bits/hashtable.h:829

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rsi rdi r8-r9 r13-r15]
        
    Routine temporaries
        Total         :      28
            Global    :      12
            Local     :      16
        Regenerable   :       3
        Spilled       :       3
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Hashtable<std::string, std::pair<const std::string, SAMRAI::hier::IntVector>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__umap_traits<true>>::_M_deallocate_buckets(std::_Hashtable<std::string, std::pair<const std::string, SAMRAI::hier::IntVector>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__umap_traits<true>> *, std::_Hashtable<std::string, std::pair<const std::string, SAMRAI::hier::IntVector>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__umap_traits<true>>::__bucket_type *, std::_Hashtable<std::string, std::pair<const std::string, SAMRAI::hier::IntVector>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__umap_traits<true>>::size_type)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/hashtable.h(792,5):remark #34051: REGISTER ALLOCATION : [_ZNSt10_HashtableISsSt4pairIKSsN6SAMRAI4hier9IntVectorEESaIS5_ENSt8__detail10_Select1stESt8equal_toISsESt4hashISsENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS7_15_Hash_node_baseEm] /usr/include/c++/4.8.5/bits/hashtable.h:792

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdx rsi rdi]
        
    Routine temporaries
        Total         :      11
            Global    :       0
            Local     :      11
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Hashtable<std::string, std::pair<const std::string, SAMRAI::hier::IntVector>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__umap_traits<true>>::_M_deallocate_node(std::_Hashtable<std::string, std::pair<const std::string, SAMRAI::hier::IntVector>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__umap_traits<true>> *, std::_Hashtable<std::string, std::pair<const std::string, SAMRAI::hier::IntVector>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__umap_traits<true>>::__node_type *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/hashtable.h(745,5):remark #34051: REGISTER ALLOCATION : [_ZNSt10_HashtableISsSt4pairIKSsN6SAMRAI4hier9IntVectorEESaIS5_ENSt8__detail10_Select1stESt8equal_toISsESt4hashISsENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE18_M_deallocate_nodeEPNS7_10_Hash_nodeIS5_Lb1EEE] /usr/include/c++/4.8.5/bits/hashtable.h:745

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rbx rsi rdi]
        
    Routine temporaries
        Total         :      23
            Global    :      11
            Local     :      12
        Regenerable   :       5
        Spilled       :       1
        
    Routine stack
        Variables     :       1 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Hashtable<std::string, std::pair<const std::string, SAMRAI::hier::IntVector>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__umap_traits<true>>::_M_node_allocator(std::_Hashtable<std::string, std::pair<const std::string, SAMRAI::hier::IntVector>, std::allocator<std::pair<const std::string, SAMRAI::hier::IntVector>>, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__umap_traits<true>> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/hashtable.h(331,7):remark #34051: REGISTER ALLOCATION : [_ZNSt10_HashtableISsSt4pairIKSsN6SAMRAI4hier9IntVectorEESaIS5_ENSt8__detail10_Select1stESt8equal_toISsESt4hashISsENS7_18_Mod_range_hashingENS7_20_Default_ranged_hashENS7_20_Prime_rehash_policyENS7_17_Hashtable_traitsILb1ELb0ELb1EEEE17_M_node_allocatorEv] /usr/include/c++/4.8.5/bits/hashtable.h:331

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rax rdi]
        
    Routine temporaries
        Total         :      10
            Global    :       0
            Local     :      10
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::vector<double, std::allocator<double>>::_M_default_append(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /usr/include/c++/4.8.5/bits/vector.tcc(541,8)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /usr/include/c++/4.8.5/bits/vector.tcc(541,8)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /usr/include/c++/4.8.5/bits/vector.tcc(541,8)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /usr/include/c++/4.8.5/bits/vector.tcc(558,5)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /usr/include/c++/4.8.5/bits/vector.tcc(558,5)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /usr/include/c++/4.8.5/bits/vector.tcc(558,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(749,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(749,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/vector.tcc(534,5):remark #34051: REGISTER ALLOCATION : [_ZNSt6vectorIdSaIdEE17_M_default_appendEm] /usr/include/c++/4.8.5/bits/vector.tcc:534

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rsi rdi r8 r12-r15 zmm0]
        
    Routine temporaries
        Total         :      56
            Global    :      28
            Local     :      28
        Regenerable   :      11
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      16 bytes*
            Reads     :       3 [8.34e-01 ~ 0.8%]
            Writes    :       3 [8.34e-01 ~ 0.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
