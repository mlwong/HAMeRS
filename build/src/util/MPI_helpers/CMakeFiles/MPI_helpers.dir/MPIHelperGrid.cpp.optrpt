Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: MPIHelperGrid::getNumberOfCells(const MPIHelperGrid *) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MPIHelperGrid::getNumberOfCells(const MPIHelperGrid *) const) [2] /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(12,1)
  -> INLINE: (15,45) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (15,47) SAMRAI::hier::PatchHierarchy::getNumberOfLevels(const SAMRAI::hier::PatchHierarchy *) const
  -> INLINE: (17,15) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (29,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (29,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (29,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(495,28) std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>> *, std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>>::size_type) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(495,28) std::shared_ptr<SAMRAI::hier::PatchLevel>::shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const std::shared_ptr<SAMRAI::hier::PatchLevel> &)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (31,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (31,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (32,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (32,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (32,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (32,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (32,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (32,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (33,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1222,10) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator++(std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (35,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (35,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (35,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (41,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (41,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (43,65) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(637,11) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
      -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
        -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
      -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
      -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(638,17) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(1133,28) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(638,36) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(640,32) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(284,11) SAMRAI::hier::Index::operator-=(SAMRAI::hier::Index *, const SAMRAI::hier::Index &)
        -> INLINE: (267,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (267,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(640,39) SAMRAI::hier::Index::operator+(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, int) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(253,11) SAMRAI::hier::Index::operator+=(SAMRAI::hier::Index *, int)
        -> INLINE: (239,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
        -> INLINE: (239,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (45,54) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (46,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (47,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (60,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (72,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (72,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (72,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(495,28) std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>> *, std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>>::size_type) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(495,28) std::shared_ptr<SAMRAI::hier::PatchLevel>::shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const std::shared_ptr<SAMRAI::hier::PatchLevel> &)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (74,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (74,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (75,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (75,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (75,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (75,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (75,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (75,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (76,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1222,10) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator++(std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (78,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (78,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (78,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (84,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (84,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> (86,65) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (88,54) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (88,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (89,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (90,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (103,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (115,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (115,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (115,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(495,28) std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>> *, std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>>::size_type) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(495,28) std::shared_ptr<SAMRAI::hier::PatchLevel>::shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const std::shared_ptr<SAMRAI::hier::PatchLevel> &)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (117,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (117,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (118,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (118,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (118,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (118,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (118,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (118,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (119,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1222,10) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator++(std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (121,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (121,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (121,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (127,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (127,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> (129,65) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (131,54) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (131,77) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (131,100) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (132,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (133,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(22,9)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(32,21)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(43,65)
         remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(267,42) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(43,65)
         remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
         remark #25478: While Loop Unrolled by 8  
      LOOP END

      LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(239,42) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(43,65)
         remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
         remark #25478: While Loop Unrolled by 8  
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(65,9)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(75,21)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(108,9)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(118,21)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(12,1):remark #34051: REGISTER ALLOCATION : [_ZNK13MPIHelperGrid16getNumberOfCellsEv] /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp:12

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rbp rsi rdi r8-r9 r12-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :     409
            Global    :      74
            Local     :     335
        Regenerable   :     134
        Spilled       :       6
        
    Routine stack
        Variables     :     436 bytes*
            Reads     :      64 [2.97e+02 ~ 11.6%]
            Writes    :      51 [1.51e+02 ~ 5.9%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr.h(93,11):remark #34051: REGISTER ALLOCATION : [_ZNSt10shared_ptrIN6SAMRAI4hier10PatchLevelEED1Ev] /usr/include/c++/4.8.5/bits/shared_ptr.h:93

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rdi r12-r13]
        
    Routine temporaries
        Total         :      24
            Global    :      12
            Local     :      12
        Regenerable   :       3
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr.h(93,11):remark #34051: REGISTER ALLOCATION : [_ZNSt10shared_ptrIN6SAMRAI4hier5PatchEED1Ev] /usr/include/c++/4.8.5/bits/shared_ptr.h:93

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rdi r12-r13]
        
    Routine temporaries
        Total         :      24
            Global    :      12
            Local     :      12
        Regenerable   :       3
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MPIHelperGrid::getWeightedNumberOfCells(const MPIHelperGrid *) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MPIHelperGrid::getWeightedNumberOfCells(const MPIHelperGrid *) const) [5] /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(156,1)
  -> INLINE: (159,45) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (159,47) SAMRAI::hier::PatchHierarchy::getNumberOfLevels(const SAMRAI::hier::PatchHierarchy *) const
  -> INLINE: (161,15) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (173,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (173,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (176,50) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (176,70) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (176,72) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> INLINE: (181,50) SAMRAI::hier::IntVector::operator=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(189,16) std::vector<int, std::allocator<int>>::operator=(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>> &)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (181,52) SAMRAI::hier::IntVector::getOne(const SAMRAI::tbox::Dimension &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(1146,27) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (189,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (189,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (189,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(495,28) std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>> *, std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>>::size_type) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(495,28) std::shared_ptr<SAMRAI::hier::PatchLevel>::shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const std::shared_ptr<SAMRAI::hier::PatchLevel> &)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (191,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (191,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (192,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (192,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (192,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (192,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (192,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (192,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (193,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1222,10) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator++(std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (195,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (195,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (195,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (201,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (201,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> (203,65) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (205,63) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (205,105) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (206,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (207,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (220,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (232,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (232,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (235,50) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (235,70) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (235,72) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> INLINE: (240,50) SAMRAI::hier::IntVector::operator=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(189,16) std::vector<int, std::allocator<int>>::operator=(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>> &)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (240,52) SAMRAI::hier::IntVector::getOne(const SAMRAI::tbox::Dimension &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(1146,27) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (248,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (248,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (248,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(495,28) std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>> *, std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>>::size_type) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(495,28) std::shared_ptr<SAMRAI::hier::PatchLevel>::shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const std::shared_ptr<SAMRAI::hier::PatchLevel> &)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (250,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (250,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (251,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (251,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (251,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (251,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (251,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (251,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (252,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1222,10) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator++(std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (254,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (254,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (254,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (260,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (260,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> (262,65) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (264,63) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (264,86) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (265,58) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (266,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (267,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (280,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (292,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (292,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (295,50) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (295,70) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (295,72) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> INLINE: (300,50) SAMRAI::hier::IntVector::operator=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
    -> /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(189,16) std::vector<int, std::allocator<int>>::operator=(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>> &)
  -> INLINE: (300,52) SAMRAI::hier::IntVector::getOne(const SAMRAI::tbox::Dimension &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(1146,27) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (308,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (308,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (308,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(495,28) std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>> *, std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>>::size_type) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(495,28) std::shared_ptr<SAMRAI::hier::PatchLevel>::shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const std::shared_ptr<SAMRAI::hier::PatchLevel> &)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (310,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (310,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (311,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (311,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (311,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (311,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (311,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (311,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (312,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1222,10) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator++(std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (314,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (314,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (314,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (320,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (320,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> (322,65) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (324,63) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (324,86) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (325,58) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (326,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (327,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(174,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(192,21)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(233,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(251,21)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(285,9)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(293,13)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   LOOP END

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(311,21)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(166,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/4.8.5/ext/new_allocator.h(104,27) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(225,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/4.8.5/ext/new_allocator.h(104,27) ]
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(156,1):remark #34051: REGISTER ALLOCATION : [_ZNK13MPIHelperGrid24getWeightedNumberOfCellsEv] /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp:156

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rbp rsi rdi r8-r9 r12-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :     491
            Global    :     107
            Local     :     384
        Regenerable   :     144
        Spilled       :      13
        
    Routine stack
        Variables     :     532 bytes*
            Reads     :      65 [2.80e+02 ~ 13.2%]
            Writes    :      45 [1.36e+02 ~ 6.4%]
        Spills        :      56 bytes*
            Reads     :      22 [8.41e+00 ~ 0.4%]
            Writes    :      13 [4.93e+00 ~ 0.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Vector_base<int, std::allocator<int>>::_M_deallocate(std::_Vector_base<int, std::allocator<int>> *, std::_Vector_base<int, std::allocator<int>>::pointer, std::size_t)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(172,7):remark #34051: REGISTER ALLOCATION : [_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPim] /usr/include/c++/4.8.5/bits/stl_vector.h:172

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdx rsi rdi]
        
    Routine temporaries
        Total         :      11
            Global    :       7
            Local     :       4
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::vector<int, std::allocator<int>>::operator=(std::vector<int, std::allocator<int>> *, const std::vector<int, std::allocator<int>> &)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/vector.tcc(162,5):remark #34051: REGISTER ALLOCATION : [_ZNSt6vectorIiSaIiEEaSERKS1_] /usr/include/c++/4.8.5/bits/vector.tcc:162

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rbx rbp rsi rdi r12-r15]
        
    Routine temporaries
        Total         :      56
            Global    :      22
            Local     :      34
        Regenerable   :       1
        Spilled       :       6
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)) [12] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(515,4)
  -> INLINE: (520,43) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (521,48) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (521,48) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (522,24) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (522,52) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (526,47) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (528,21) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (528,40) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(519,10)
   remark #15523: loop was not vectorized: loop control variable b was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(521,48)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between this (522:24) and *(this+(offset+i)*4) (522:24)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(521,48)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(527,10)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between this (528:21) and *(this+i*4) (528:21)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(527,10)
<Remainder>
LOOP END

    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(515,4):remark #34051: REGISTER ALLOCATION : [_ZN6SAMRAI4hier9IntVectormLERKS1_] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:515

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rbp rsi rdi r8-r11 r14-r15]
        
    Routine temporaries
        Total         :      68
            Global    :      22
            Local     :      46
        Regenerable   :       1
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      32 bytes*
            Reads     :       4 [1.40e+00 ~ 0.7%]
            Writes    :       4 [1.40e+00 ~ 0.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const) [13] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(636,4)
  -> INLINE: (637,11) SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const
    -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: (604,32) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
      -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
    -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: (604,41) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: (605,21) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
    -> INLINE: (605,31) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (638,17) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(1133,28) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (638,36) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
    -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
  -> INLINE: (640,32) SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(284,11) SAMRAI::hier::Index::operator-=(SAMRAI::hier::Index *, const SAMRAI::hier::Index &)
      -> INLINE: (267,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (267,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (640,39) SAMRAI::hier::Index::operator+(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h:(253,11) SAMRAI::hier::Index::operator+=(SAMRAI::hier::Index *, int)
      -> INLINE: (239,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
      -> INLINE: (239,42) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(604,41) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(638,11)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(267,42) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(641,32)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 2  
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(239,42) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(641,39)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 8  
LOOP END

    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(636,4):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4hier3Box11numberCellsEv] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:636

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rbx rsi rdi r8 r13]
        
    Routine temporaries
        Total         :      79
            Global    :      17
            Local     :      62
        Regenerable   :      13
        Spilled       :       2
        
    Routine stack
        Variables     :      56 bytes*
            Reads     :      13 [3.69e+00 ~ 4.7%]
            Writes    :      12 [2.25e+00 ~ 2.9%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MPIHelperGrid::getAveragedGridLevelNumberWithInhomogeneousXDirection(std::vector<double, std::allocator<double>> *, const MPIHelperGrid *) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MPIHelperGrid::getAveragedGridLevelNumberWithInhomogeneousXDirection(std::vector<double, std::allocator<double>> *, const MPIHelperGrid *) const) [14] /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(350,1)
  -> (351,23) std::vector<double, std::allocator<double>>::~vector(std::vector<double, std::allocator<double>> *)
  -> (351,23) std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *)
  -> INLINE: (353,45) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (353,47) SAMRAI::hier::PatchHierarchy::getNumberOfLevels(const SAMRAI::hier::PatchHierarchy *) const
  -> INLINE: (362,13) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (364,26) std::shared_ptr<ExtendedFlattenedHierarchy>::shared_ptr<ExtendedFlattenedHierarchy>(std::shared_ptr<ExtendedFlattenedHierarchy> *, ExtendedFlattenedHierarchy *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (364,26) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
  -> INLINE: (370,41) std::__shared_ptr<SAMRAI::geom::CartesianGridGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianGridGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (370,43) SAMRAI::geom::CartesianGridGeometry::getXLower(const SAMRAI::geom::CartesianGridGeometry *) const
  -> INLINE: (371,41) std::__shared_ptr<SAMRAI::geom::CartesianGridGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianGridGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (371,43) SAMRAI::geom::CartesianGridGeometry::getXUpper(const SAMRAI::geom::CartesianGridGeometry *) const
  -> INLINE: (373,15) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (375,59) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (379,33) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (380,55) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (395,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (395,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (395,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (402,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (402,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (406,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (406,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (406,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (409,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
  -> INLINE: (411,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (413,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (413,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (414,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (414,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (414,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (414,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (414,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (414,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (415,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (417,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (417,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (417,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (423,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (423,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (426,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (426,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (431,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (431,42) ExtendedFlattenedHierarchy::getOverlappedVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> (435,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (436,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (436,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (436,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (436,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (437,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (439,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (441,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (443,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (445,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (447,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> (460,64) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (461,34) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (461,34) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (461,68) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (461,68) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (462,33) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (464,77) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (466,62) SAMRAI::hier::Box::contains(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
  -> INLINE: (486,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (487,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (502,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (504,59) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (514,33) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (515,55) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (530,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (530,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (530,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (537,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (537,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (541,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (541,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (541,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (544,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
  -> INLINE: (546,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (548,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (548,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (549,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (549,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (549,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (549,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (549,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (549,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (550,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (552,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (552,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (552,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (558,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (558,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (560,71) std::shared_ptr<SAMRAI::hier::PatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (561,21) std::static_pointer_cast<SAMRAI::geom::CartesianPatchGeometry, SAMRAI::hier::PatchGeometry>(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *, const std::shared_ptr<SAMRAI::hier::PatchGeometry> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (561,21) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
  -> INLINE: (562,30) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> (562,32) SAMRAI::hier::Patch::getPatchGeometry(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const SAMRAI::hier::Patch *) const
  -> INLINE: (564,52) std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (564,54) SAMRAI::geom::CartesianPatchGeometry::getDx(const SAMRAI::geom::CartesianPatchGeometry *) const
  -> INLINE: (567,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (567,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (572,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (572,42) ExtendedFlattenedHierarchy::getOverlappedVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> (578,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (579,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (579,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (579,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (579,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (580,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (582,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (584,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (586,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (587,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (589,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (591,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (592,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> (607,68) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (608,38) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (608,38) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (608,72) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (608,72) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (609,37) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (611,81) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (613,66) SAMRAI::hier::Box::contains(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
  -> INLINE: (634,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (634,13) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (635,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (650,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (652,59) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (663,33) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (664,55) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (679,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (679,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (679,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (686,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (686,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (690,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (690,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (690,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (693,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
  -> INLINE: (695,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (697,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (697,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (698,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (698,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (698,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (698,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (698,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (698,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (699,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (701,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (701,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (701,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (707,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (707,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (709,71) std::shared_ptr<SAMRAI::hier::PatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (710,21) std::static_pointer_cast<SAMRAI::geom::CartesianPatchGeometry, SAMRAI::hier::PatchGeometry>(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *, const std::shared_ptr<SAMRAI::hier::PatchGeometry> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (710,21) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
  -> INLINE: (711,30) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> (711,32) SAMRAI::hier::Patch::getPatchGeometry(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const SAMRAI::hier::Patch *) const
  -> INLINE: (713,52) std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (713,54) SAMRAI::geom::CartesianPatchGeometry::getDx(const SAMRAI::geom::CartesianPatchGeometry *) const
  -> INLINE: (716,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (716,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (721,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (721,42) ExtendedFlattenedHierarchy::getOverlappedVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> (727,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (728,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (728,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (728,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (728,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (729,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (731,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (733,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (735,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (736,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (737,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (739,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (741,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (742,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (743,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> (760,72) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (761,42) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (761,42) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (761,76) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (761,76) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (762,41) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (764,85) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (766,70) SAMRAI::hier::Box::contains(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
  -> INLINE: (788,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (788,13) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (789,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (805,5) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(382,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(382,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(382,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(382,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(382,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(382,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(404,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(414,21)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(436,25)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(449,21)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(461,34)
            remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(478,25)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(478,25)
            remark #15300: LOOP WAS VECTORIZED
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(478,25)
         <Remainder loop for vectorization>
            remark #15301: REMAINDER LOOP WAS VECTORIZED
         LOOP END

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(478,25)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(517,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(517,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(517,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(517,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(517,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(517,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(539,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(549,21)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(579,25)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(594,21)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(596,25)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(608,38)
               remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(625,29)
            <Peeled loop for vectorization>
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(625,29)
               remark #15300: LOOP WAS VECTORIZED
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(625,29)
            <Remainder loop for vectorization>
               remark #15301: REMAINDER LOOP WAS VECTORIZED
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(625,29)
            <Remainder loop for vectorization>
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(666,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(666,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(666,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(666,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(666,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(666,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(688,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(698,21)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(728,25)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(745,21)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(747,25)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(749,29)
               remark #15542: loop was not vectorized: inner loop was already vectorized

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(761,42)
                  remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(778,33)
               <Peeled loop for vectorization>
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(778,33)
                  remark #15300: LOOP WAS VECTORIZED
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(778,33)
               <Remainder loop for vectorization>
                  remark #15301: REMAINDER LOOP WAS VECTORIZED
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(778,33)
               <Remainder loop for vectorization>
               LOOP END
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(388,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(402,36) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(523,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(537,36) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(672,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(686,36) ]
LOOP END

    Report from: Code generation optimizations [cg]

/home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(350,1):remark #34051: REGISTER ALLOCATION : [_ZNK13MPIHelperGrid53getAveragedGridLevelNumberWithInhomogeneousXDirectionEv] /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp:350

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rsi rdi r8-r9 r12-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :    1162
            Global    :     359
            Local     :     803
        Regenerable   :     332
        Spilled       :      71
        
    Routine stack
        Variables     :    1232 bytes*
            Reads     :      64 [4.04e+02 ~ 0.0%]
            Writes    :      46 [5.05e+02 ~ 0.0%]
        Spills        :     528 bytes*
            Reads     :     227 [9.52e+04 ~ 4.7%]
            Writes    :      84 [9.24e+03 ~ 0.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const) [15] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h(271,7)
  -> INLINE: (272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
  -> INLINE: (273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const


    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h(271,7):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4hier12BoxContainer25BoxContainerConstIteratorneERKS2_] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:271

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rdx rsi rdi]
        
    Routine temporaries
        Total         :      18
            Global    :       9
            Local     :       9
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const) [16] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h(159,7)
  -> INLINE: (160,30) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator*(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *) const
  -> INLINE: (160,44) std::_List_const_iterator<SAMRAI::hier::Box>::operator*(const std::_List_const_iterator<SAMRAI::hier::Box> *) const


    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h(159,7):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4hier12BoxContainer25BoxContainerConstIteratordeEv] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:159

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rax rdi]
        
    Routine temporaries
        Total         :      12
            Global    :       8
            Local     :       4
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::Patch::getPatchGeometry(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const SAMRAI::hier::Patch *) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::Patch::getPatchGeometry(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const SAMRAI::hier::Patch *) const) [17] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Patch.h(345,4)
  -> INLINE: (346,14) std::shared_ptr<SAMRAI::hier::PatchGeometry>::shared_ptr(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const std::shared_ptr<SAMRAI::hier::PatchGeometry> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/Patch.h(345,4):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4hier5Patch16getPatchGeometryEv] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Patch.h:345

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rdx rsi rdi]
        
    Routine temporaries
        Total         :      15
            Global    :       8
            Local     :       7
        Regenerable   :       2
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const) [18] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(611,4)
  -> INLINE: (614,11) SAMRAI::hier::IntVector::operator/=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
    -> INLINE: (589,43) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: (590,48) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: (590,48) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: (591,24) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
    -> INLINE: (591,52) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
    -> INLINE: (595,47) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
    -> INLINE: (597,21) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
    -> INLINE: (597,40) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(588,10) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(615,11)
   remark #15523: loop was not vectorized: loop control variable b was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(590,48) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(615,11)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      remark #25478: While Loop Unrolled by 2  
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(596,10) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(615,11)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(596,10) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(615,11)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(596,10) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(615,11)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(596,10) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(615,11)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
LOOP END

    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(611,4):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4hier9IntVectordvERKS1_] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:611

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r11 r13-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :      87
            Global    :      32
            Local     :      55
        Regenerable   :       1
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      16 bytes*
            Reads     :       4 [1.25e+00 ~ 0.7%]
            Writes    :       4 [1.25e+00 ~ 0.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)) [19] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h(1220,7)
  -> INLINE: (1222,10) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator++(std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h(1220,7):remark #34051: REGISTER ALLOCATION : [_ZN6SAMRAI4hier10PatchLevel8IteratorppEi] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:1220

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    5[ rax rdx rbx rsi rdi]
        
    Routine temporaries
        Total         :      17
            Global    :       8
            Local     :       9
        Regenerable   :       0
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const) [20] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h(1270,4)


    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h(1270,4):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4hier10PatchLevel3endEv] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:1270

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdx rsi rdi]
        
    Routine temporaries
        Total         :      13
            Global    :       0
            Local     :      13
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const) [21] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h(1260,4)


    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h(1260,4):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4hier10PatchLevel5beginEv] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:1260

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdx rsi rdi]
        
    Routine temporaries
        Total         :      13
            Global    :       0
            Local     :      13
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: ExtendedFlattenedHierarchy::getOverlappedVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ExtendedFlattenedHierarchy::getOverlappedVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const) [22] /home/akula/HAMeRS_IB/HAMeRS/include/extn/patch_hierarchies/ExtendedFlattenedHierarchy.hpp(128,9)
  -> INLINE: (132,43) std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>>::operator[](const std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>> *, std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>>::size_type) const
  -> INLINE: (132,57) std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::find(const std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>> *, const std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type &) const
    -> INLINE: /usr/include/c++/4.8.5/bits/stl_map.h:(837,26) std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::find(const std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type> *, const std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::key_type &) const
      -> INLINE: /usr/include/c++/4.8.5/bits/stl_tree.h:(1805,65) std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::_M_lower_bound(const std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::_Const_Link_type, std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::_Const_Link_type, const std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type &) const
        -> INLINE: (1157,29) std::less<SAMRAI::hier::BoxId>::operator()(const std::less<SAMRAI::hier::BoxId> *, const SAMRAI::hier::BoxId &, const SAMRAI::hier::BoxId &) const
          -> INLINE: /usr/include/c++/4.8.5/bits/stl_function.h:(235,20) SAMRAI::hier::BoxId::operator<(const SAMRAI::hier::BoxId *, const SAMRAI::hier::BoxId &) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(224,26) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(224,57) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(225,27) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(225,59) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,28) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,41) SAMRAI::hier::LocalId::operator<(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,57) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,29) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,42) SAMRAI::hier::LocalId::operator==(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,59) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(228,32) SAMRAI::hier::PeriodicId::operator<(const SAMRAI::hier::PeriodicId *, const SAMRAI::hier::PeriodicId &) const
      -> INLINE: /usr/include/c++/4.8.5/bits/stl_tree.h:(1807,33) std::less<SAMRAI::hier::BoxId>::operator()(const std::less<SAMRAI::hier::BoxId> *, const SAMRAI::hier::BoxId &, const SAMRAI::hier::BoxId &) const
        -> INLINE: /usr/include/c++/4.8.5/bits/stl_function.h:(235,20) SAMRAI::hier::BoxId::operator<(const SAMRAI::hier::BoxId *, const SAMRAI::hier::BoxId &) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(224,26) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(224,57) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(225,27) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(225,59) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,28) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,41) SAMRAI::hier::LocalId::operator<(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,57) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,29) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,42) SAMRAI::hier::LocalId::operator==(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,59) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(228,32) SAMRAI::hier::PeriodicId::operator<(const SAMRAI::hier::PeriodicId *, const SAMRAI::hier::PeriodicId &) const
  -> INLINE: (132,57) SAMRAI::hier::Box::getBoxId(const SAMRAI::hier::Box *) const
  -> INLINE: (134,21) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::value_type>::operator==(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (134,50) std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::end(const std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (134,50) std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>>::operator[](const std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>> *, std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>>::size_type) const
  -> INLINE: (136,17) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (136,17) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (136,17) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (136,17) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (136,17) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (136,17) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (136,17) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (136,17) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (136,17) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> INLINE: (136,17) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (136,17) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (136,17) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (136,17) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (136,17) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (136,17) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (141,23) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::value_type> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h(228,34) inlined into /home/akula/HAMeRS_IB/HAMeRS/include/extn/patch_hierarchies/ExtendedFlattenedHierarchy.hpp(133,57)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/home/akula/HAMeRS_IB/HAMeRS/include/extn/patch_hierarchies/ExtendedFlattenedHierarchy.hpp(128,9):remark #34051: REGISTER ALLOCATION : [_ZNK26ExtendedFlattenedHierarchy25getOverlappedVisibleBoxesERKN6SAMRAI4hier3BoxEi] /home/akula/HAMeRS_IB/HAMeRS/include/extn/patch_hierarchies/ExtendedFlattenedHierarchy.hpp:128

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rbp rsi rdi r8-r10 r12-r15]
        
    Routine temporaries
        Total         :     338
            Global    :      84
            Local     :     254
        Regenerable   :     121
        Spilled       :       6
        
    Routine stack
        Variables     :     421 bytes*
            Reads     :      24 [6.75e+00 ~ 3.0%]
            Writes    :      51 [2.84e+01 ~ 12.8%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const) [23] /home/akula/HAMeRS_IB/HAMeRS/include/extn/patch_hierarchies/ExtendedFlattenedHierarchy.hpp(98,9)
  -> INLINE: (102,32) std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>>::operator[](const std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>> *, std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>>::size_type) const
  -> INLINE: (102,46) std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::find(const std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>> *, const std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type &) const
    -> INLINE: /usr/include/c++/4.8.5/bits/stl_map.h:(837,26) std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::find(const std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type> *, const std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::key_type &) const
      -> INLINE: /usr/include/c++/4.8.5/bits/stl_tree.h:(1805,65) std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::_M_lower_bound(const std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::_Const_Link_type, std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::_Const_Link_type, const std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type &) const
        -> INLINE: (1157,29) std::less<SAMRAI::hier::BoxId>::operator()(const std::less<SAMRAI::hier::BoxId> *, const SAMRAI::hier::BoxId &, const SAMRAI::hier::BoxId &) const
          -> INLINE: /usr/include/c++/4.8.5/bits/stl_function.h:(235,20) SAMRAI::hier::BoxId::operator<(const SAMRAI::hier::BoxId *, const SAMRAI::hier::BoxId &) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(224,26) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(224,57) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(225,27) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(225,59) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,28) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,41) SAMRAI::hier::LocalId::operator<(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,57) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,29) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,42) SAMRAI::hier::LocalId::operator==(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,59) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(228,32) SAMRAI::hier::PeriodicId::operator<(const SAMRAI::hier::PeriodicId *, const SAMRAI::hier::PeriodicId &) const
      -> INLINE: /usr/include/c++/4.8.5/bits/stl_tree.h:(1807,33) std::less<SAMRAI::hier::BoxId>::operator()(const std::less<SAMRAI::hier::BoxId> *, const SAMRAI::hier::BoxId &, const SAMRAI::hier::BoxId &) const
        -> INLINE: /usr/include/c++/4.8.5/bits/stl_function.h:(235,20) SAMRAI::hier::BoxId::operator<(const SAMRAI::hier::BoxId *, const SAMRAI::hier::BoxId &) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(224,26) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(224,57) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(225,27) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(225,59) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,28) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,41) SAMRAI::hier::LocalId::operator<(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,57) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,29) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,42) SAMRAI::hier::LocalId::operator==(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,59) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(228,32) SAMRAI::hier::PeriodicId::operator<(const SAMRAI::hier::PeriodicId *, const SAMRAI::hier::PeriodicId &) const
  -> INLINE: (102,46) SAMRAI::hier::Box::getBoxId(const SAMRAI::hier::Box *) const
  -> INLINE: (104,21) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::value_type>::operator==(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (104,39) std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::end(const std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (104,39) std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>>::operator[](const std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>> *, std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>>::size_type) const
  -> INLINE: (106,17) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (106,17) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (106,17) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (106,17) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (106,17) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (106,17) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (106,17) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (106,17) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (106,17) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> INLINE: (106,17) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (106,17) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (106,17) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (106,17) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (106,17) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (106,17) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (111,23) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::value_type> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h(228,34) inlined into /home/akula/HAMeRS_IB/HAMeRS/include/extn/patch_hierarchies/ExtendedFlattenedHierarchy.hpp(103,46)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/home/akula/HAMeRS_IB/HAMeRS/include/extn/patch_hierarchies/ExtendedFlattenedHierarchy.hpp(98,9):remark #34051: REGISTER ALLOCATION : [_ZNK26ExtendedFlattenedHierarchy15getVisibleBoxesERKN6SAMRAI4hier3BoxEi] /home/akula/HAMeRS_IB/HAMeRS/include/extn/patch_hierarchies/ExtendedFlattenedHierarchy.hpp:98

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rbp rsi rdi r8-r10 r12-r15]
        
    Routine temporaries
        Total         :     338
            Global    :      84
            Local     :     254
        Regenerable   :     121
        Spilled       :       6
        
    Routine stack
        Variables     :     421 bytes*
            Reads     :      24 [6.75e+00 ~ 3.0%]
            Writes    :      51 [2.84e+01 ~ 12.8%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const) [24] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h(692,4)


    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h(692,4):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4hier12BoxContainer5beginEv] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:692

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdx rsi rdi]
        
    Routine temporaries
        Total         :      13
            Global    :       0
            Local     :      13
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)) [25] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h(183,7)
  -> INLINE: (186,13) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator++(std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (188,13) std::_List_const_iterator<SAMRAI::hier::Box>::operator++(std::_List_const_iterator<SAMRAI::hier::Box> *)


    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h(183,7):remark #34051: REGISTER ALLOCATION : [_ZN6SAMRAI4hier12BoxContainer25BoxContainerConstIteratorppEi] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:183

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    5[ rax rdx rsi rdi r15]
        
    Routine temporaries
        Total         :      19
            Global    :       8
            Local     :      11
        Regenerable   :       0
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::Box::contains(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::Box::contains(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const) [26] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(724,4)
  -> INLINE: (725,29) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
    -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
  -> INLINE: (725,29) SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const
    -> INLINE: (1299,19) SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const
  -> INLINE: (725,38) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (725,38) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (726,16) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (726,26) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (726,36) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (726,46) SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(725,38)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(724,4):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4hier3Box8containsERKNS0_5IndexE] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:724

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rsi rdi r8]
        
    Routine temporaries
        Total         :      16
            Global    :      12
            Local     :       4
        Regenerable   :       2
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const) [27] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h(703,4)


    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h(703,4):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4hier12BoxContainer3endEv] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:703

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdx rsi rdi]
        
    Routine temporaries
        Total         :      13
            Global    :       0
            Local     :      13
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const) [28] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h(493,4)
  -> INLINE: (495,28) std::shared_ptr<SAMRAI::hier::PatchLevel>::shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const std::shared_ptr<SAMRAI::hier::PatchLevel> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (495,28) std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>> *, std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>>::size_type) const


    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h(493,4):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4hier14PatchHierarchy13getPatchLevelEi] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:493

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    5[ rax rdx rcx rsi rdi]
        
    Routine temporaries
        Total         :      20
            Global    :       8
            Local     :      12
        Regenerable   :       2
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr.h(93,11):remark #34051: REGISTER ALLOCATION : [_ZNSt10shared_ptrIN6SAMRAI4geom22CartesianPatchGeometryEED1Ev] /usr/include/c++/4.8.5/bits/shared_ptr.h:93

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rdi r12-r13]
        
    Routine temporaries
        Total         :      24
            Global    :      12
            Local     :      12
        Regenerable   :       3
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(249,17):remark #34051: REGISTER ALLOCATION : [_ZNSt6vectorIdSaIdEEC1Ev] /usr/include/c++/4.8.5/bits/stl_vector.h:249

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rax rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::vector<double, std::allocator<double>>::~vector(std::vector<double, std::allocator<double>> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(415,7):remark #34051: REGISTER ALLOCATION : [_ZNSt6vectorIdSaIdEED1Ev] /usr/include/c++/4.8.5/bits/stl_vector.h:415

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :      10
            Global    :       7
            Local     :       3
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Vector_base<double, std::allocator<double>>::~_Vector_base(std::_Vector_base<double, std::allocator<double>> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(160,7):remark #34051: REGISTER ALLOCATION : [_ZNSt12_Vector_baseIdSaIdEED1Ev] /usr/include/c++/4.8.5/bits/stl_vector.h:160

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :      10
            Global    :       7
            Local     :       3
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr.h(93,11):remark #34051: REGISTER ALLOCATION : [_ZNSt10shared_ptrI26ExtendedFlattenedHierarchyED1Ev] /usr/include/c++/4.8.5/bits/shared_ptr.h:93

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rdi r12-r13]
        
    Routine temporaries
        Total         :      24
            Global    :      12
            Local     :      12
        Regenerable   :       3
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::__enable_shared_from_this_helper<__gnu_cxx::_S_atomic>(const std::__shared_count<__gnu_cxx::_S_atomic> &, ...)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(724,5):remark #34051: REGISTER ALLOCATION : [_ZSt32__enable_shared_from_this_helperILN9__gnu_cxx12_Lock_policyE2EEvRKSt14__shared_countIXT_EEz] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:724

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       7
            Global    :       0
            Local     :       7
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :     176 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MPIHelperGrid::getAveragedGridLevelNumberWithInhomogeneousYDirection(std::vector<double, std::allocator<double>> *, const MPIHelperGrid *) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MPIHelperGrid::getAveragedGridLevelNumberWithInhomogeneousYDirection(std::vector<double, std::allocator<double>> *, const MPIHelperGrid *) const) [37] /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(814,1)
  -> (815,23) std::vector<double, std::allocator<double>>::~vector(std::vector<double, std::allocator<double>> *)
  -> (815,23) std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *)
  -> INLINE: (817,45) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (817,47) SAMRAI::hier::PatchHierarchy::getNumberOfLevels(const SAMRAI::hier::PatchHierarchy *) const
  -> INLINE: (826,13) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (828,26) std::shared_ptr<ExtendedFlattenedHierarchy>::shared_ptr<ExtendedFlattenedHierarchy>(std::shared_ptr<ExtendedFlattenedHierarchy> *, ExtendedFlattenedHierarchy *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (828,26) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
  -> INLINE: (834,41) std::__shared_ptr<SAMRAI::geom::CartesianGridGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianGridGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (834,43) SAMRAI::geom::CartesianGridGeometry::getXLower(const SAMRAI::geom::CartesianGridGeometry *) const
  -> INLINE: (835,41) std::__shared_ptr<SAMRAI::geom::CartesianGridGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianGridGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (835,43) SAMRAI::geom::CartesianGridGeometry::getXUpper(const SAMRAI::geom::CartesianGridGeometry *) const
  -> INLINE: (837,15) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (839,9) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (839,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (839,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (839,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (839,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (839,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (839,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (839,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (839,9) std::operator<<<char, std::char_traits<char>, std::allocator<char>>(std::basic_ostream<char, std::char_traits<char>> &, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)
  -> (839,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (839,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (839,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (839,9) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> INLINE: (839,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (839,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (839,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (845,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (847,59) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (857,33) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (858,55) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (873,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (873,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (873,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (880,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (880,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (884,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (884,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (884,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (887,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
  -> INLINE: (889,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (891,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (891,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (892,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (892,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (892,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (892,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (892,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (892,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (893,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (895,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (895,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (895,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (901,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (901,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (903,71) std::shared_ptr<SAMRAI::hier::PatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (904,21) std::static_pointer_cast<SAMRAI::geom::CartesianPatchGeometry, SAMRAI::hier::PatchGeometry>(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *, const std::shared_ptr<SAMRAI::hier::PatchGeometry> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (904,21) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
  -> INLINE: (905,30) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (905,32) SAMRAI::hier::Patch::getPatchGeometry(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const SAMRAI::hier::Patch *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Patch.h:(346,14) std::shared_ptr<SAMRAI::hier::PatchGeometry>::shared_ptr(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const std::shared_ptr<SAMRAI::hier::PatchGeometry> &)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (907,52) std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (907,54) SAMRAI::geom::CartesianPatchGeometry::getDx(const SAMRAI::geom::CartesianPatchGeometry *) const
  -> INLINE: (910,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (910,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (915,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (915,42) ExtendedFlattenedHierarchy::getOverlappedVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (921,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (922,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (922,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> INLINE: (922,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (922,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (923,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (925,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (927,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (929,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (930,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (932,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (934,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (935,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (950,68) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (951,38) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (951,38) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> INLINE: (951,72) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (951,72) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (952,37) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (954,81) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (956,66) SAMRAI::hier::Box::contains(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
  -> INLINE: (977,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (977,13) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (978,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (993,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (995,59) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1006,33) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1007,55) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1022,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (1022,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (1022,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (1029,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1029,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (1033,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (1033,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1033,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (1036,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
  -> INLINE: (1038,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1040,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1040,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (1041,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (1041,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (1041,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1041,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1041,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (1041,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> (1042,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
  -> INLINE: (1044,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1044,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (1044,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (1050,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1050,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (1052,71) std::shared_ptr<SAMRAI::hier::PatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1053,21) std::static_pointer_cast<SAMRAI::geom::CartesianPatchGeometry, SAMRAI::hier::PatchGeometry>(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *, const std::shared_ptr<SAMRAI::hier::PatchGeometry> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (1053,21) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
  -> INLINE: (1054,30) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1054,32) SAMRAI::hier::Patch::getPatchGeometry(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const SAMRAI::hier::Patch *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Patch.h:(346,14) std::shared_ptr<SAMRAI::hier::PatchGeometry>::shared_ptr(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const std::shared_ptr<SAMRAI::hier::PatchGeometry> &)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1056,52) std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1056,54) SAMRAI::geom::CartesianPatchGeometry::getDx(const SAMRAI::geom::CartesianPatchGeometry *) const
  -> INLINE: (1059,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (1059,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (1064,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (1064,42) ExtendedFlattenedHierarchy::getOverlappedVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (1070,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (1071,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (1071,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> INLINE: (1071,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (1071,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (1072,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (1074,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (1076,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (1078,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1079,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1080,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1082,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (1084,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (1085,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (1086,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (1103,72) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (1104,42) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (1104,42) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> INLINE: (1104,76) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (1104,76) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> (1105,41) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
  -> (1107,85) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> (1109,70) SAMRAI::hier::Box::contains(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
  -> INLINE: (1131,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1131,13) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1132,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1148,5) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(857,33)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(857,33)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(857,33)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(857,33)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(857,33)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(857,33)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(860,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(860,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(860,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(860,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(860,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(860,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(882,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(892,21)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(922,25)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(937,21)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(939,25)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(951,38)
               remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(968,29)
            <Peeled loop for vectorization>
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(968,29)
               remark #15300: LOOP WAS VECTORIZED
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(968,29)
            <Remainder loop for vectorization>
               remark #15301: REMAINDER LOOP WAS VECTORIZED
            LOOP END

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(968,29)
            <Remainder loop for vectorization>
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(1009,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(1009,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(1009,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(1009,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(1009,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(1009,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(1031,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(1041,21)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(1071,25)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(1088,21)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(1090,25)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(1092,29)
               remark #15542: loop was not vectorized: inner loop was already vectorized

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(1104,42)
                  remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(1121,33)
               <Peeled loop for vectorization>
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(1121,33)
                  remark #15300: LOOP WAS VECTORIZED
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(1121,33)
               <Remainder loop for vectorization>
                  remark #15301: REMAINDER LOOP WAS VECTORIZED
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(1121,33)
               <Remainder loop for vectorization>
               LOOP END
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(866,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(880,36) ]
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(1015,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(1029,36) ]
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(749,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(749,7):remark #34026: call to memset implemented as a call to optimized library version
/home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(814,1):remark #34051: REGISTER ALLOCATION : [_ZNK13MPIHelperGrid53getAveragedGridLevelNumberWithInhomogeneousYDirectionEv] /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp:814

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :    1179
            Global    :     347
            Local     :     832
        Regenerable   :     379
        Spilled       :      68
        
    Routine stack
        Variables     :    1233 bytes*
            Reads     :      65 [2.01e+01 ~ 0.0%]
            Writes    :      90 [3.49e+01 ~ 0.0%]
        Spills        :     504 bytes*
            Reads     :     186 [5.48e+03 ~ 4.9%]
            Writes    :      81 [5.32e+02 ~ 0.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MPIHelperGrid::getAveragedGridLevelNumberWithInhomogeneousZDirection(std::vector<double, std::allocator<double>> *, const MPIHelperGrid *) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MPIHelperGrid::getAveragedGridLevelNumberWithInhomogeneousZDirection(std::vector<double, std::allocator<double>> *, const MPIHelperGrid *) const) [38] /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(1157,1)
  -> (1158,23) std::vector<double, std::allocator<double>>::~vector(std::vector<double, std::allocator<double>> *)
  -> (1158,23) std::vector<double, std::allocator<double>>::vector(std::vector<double, std::allocator<double>> *)
  -> INLINE: (1160,45) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1160,47) SAMRAI::hier::PatchHierarchy::getNumberOfLevels(const SAMRAI::hier::PatchHierarchy *) const
  -> INLINE: (1169,13) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1171,26) std::shared_ptr<ExtendedFlattenedHierarchy>::shared_ptr<ExtendedFlattenedHierarchy>(std::shared_ptr<ExtendedFlattenedHierarchy> *, ExtendedFlattenedHierarchy *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (1171,26) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
  -> INLINE: (1177,41) std::__shared_ptr<SAMRAI::geom::CartesianGridGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianGridGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1177,43) SAMRAI::geom::CartesianGridGeometry::getXLower(const SAMRAI::geom::CartesianGridGeometry *) const
  -> INLINE: (1178,41) std::__shared_ptr<SAMRAI::geom::CartesianGridGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianGridGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1178,43) SAMRAI::geom::CartesianGridGeometry::getXUpper(const SAMRAI::geom::CartesianGridGeometry *) const
  -> INLINE: (1180,15) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (1182,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (1182,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (1182,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1182,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (1182,9) std::operator<<<char, std::char_traits<char>, std::allocator<char>>(std::basic_ostream<char, std::char_traits<char>> &, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)
  -> (1182,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (1182,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (1182,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (1182,9) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> INLINE: (1182,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1182,9) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1182,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (1182,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (1182,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1182,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1182,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1188,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (1190,9) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1190,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1190,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (1190,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (1190,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1190,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (1190,9) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (1190,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (1190,9) std::operator<<<char, std::char_traits<char>, std::allocator<char>>(std::basic_ostream<char, std::char_traits<char>> &, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> &)
  -> (1190,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (1190,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (1190,9) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> (1190,9) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> INLINE: (1190,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1190,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1190,9) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1196,20) SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const
  -> INLINE: (1198,59) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1209,33) std::vector<double, std::allocator<double>>::resize(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1210,55) std::vector<double, std::allocator<double>>::data(std::vector<double, std::allocator<double>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1225,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1225,36) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(495,28) std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>> *, std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>>::size_type) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(495,28) std::shared_ptr<SAMRAI::hier::PatchLevel>::shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const std::shared_ptr<SAMRAI::hier::PatchLevel> &)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (1225,36) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (1232,34) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1232,36) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> (1236,41) SAMRAI::hier::IntVector::operator*=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (1236,61) std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchHierarchy, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1236,63) SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:(782,32) std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::operator[](const std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>> *, std::vector<SAMRAI::hier::IntVector, std::allocator<SAMRAI::hier::IntVector>>::size_type) const
  -> INLINE: (1239,91) SAMRAI::hier::IntVector::operator/(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &) const
    -> /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(614,11) SAMRAI::hier::IntVector::operator/=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)
  -> INLINE: (1241,70) SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(256,22) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (1243,59) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1243,61) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (1244,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (1244,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (1244,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1244,35) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1244,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (1244,37) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (1245,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1222,10) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator++(std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1247,62) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1247,62) std::shared_ptr<SAMRAI::hier::Patch>::shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *, const std::shared_ptr<SAMRAI::hier::Patch> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (1247,62) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
  -> INLINE: (1253,51) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1253,53) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (1255,71) std::shared_ptr<SAMRAI::hier::PatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1256,21) std::static_pointer_cast<SAMRAI::geom::CartesianPatchGeometry, SAMRAI::hier::PatchGeometry>(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *, const std::shared_ptr<SAMRAI::hier::PatchGeometry> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (1256,21) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
  -> INLINE: (1257,30) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1257,32) SAMRAI::hier::Patch::getPatchGeometry(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const SAMRAI::hier::Patch *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Patch.h:(346,14) std::shared_ptr<SAMRAI::hier::PatchGeometry>::shared_ptr(std::shared_ptr<SAMRAI::hier::PatchGeometry> *, const std::shared_ptr<SAMRAI::hier::PatchGeometry> &)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1259,52) std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::geom::CartesianPatchGeometry, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1259,54) SAMRAI::geom::CartesianPatchGeometry::getDx(const SAMRAI::geom::CartesianPatchGeometry *) const
  -> INLINE: (1262,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (1262,42) ExtendedFlattenedHierarchy::getVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (1267,40) std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<ExtendedFlattenedHierarchy, __gnu_cxx::_S_atomic> *) const
  -> (1267,42) ExtendedFlattenedHierarchy::getOverlappedVisibleBoxes(const ExtendedFlattenedHierarchy *, const SAMRAI::hier::Box &, int) const
  -> INLINE: (1273,91) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (1274,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
  -> INLINE: (1274,25) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
  -> INLINE: (1274,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (1274,48) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (1275,24) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(186,13) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator++(std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(188,13) std::_List_const_iterator<SAMRAI::hier::Box>::operator++(std::_List_const_iterator<SAMRAI::hier::Box> *)
  -> INLINE: (1277,58) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,30) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator*(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,44) std::_List_const_iterator<SAMRAI::hier::Box>::operator*(const std::_List_const_iterator<SAMRAI::hier::Box> *) const
  -> (1279,77) SAMRAI::hier::Box::numberCells(SAMRAI::hier::IntVector *, const SAMRAI::hier::Box *) const
  -> INLINE: (1281,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1282,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1283,61) SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(272,22) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (1285,69) SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const
  -> INLINE: (1287,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (1288,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (1289,50) SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const
  -> INLINE: (1306,72) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (1307,42) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
  -> INLINE: (1307,42) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const
  -> INLINE: (1307,76) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (1307,76) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::const_iterator *, const SAMRAI::hier::BoxContainer *) const
  -> INLINE: (1308,41) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(186,13) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator++(std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(188,13) std::_List_const_iterator<SAMRAI::hier::Box>::operator++(std::_List_const_iterator<SAMRAI::hier::Box> *)
  -> INLINE: (1310,85) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,30) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator*(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(160,44) std::_List_const_iterator<SAMRAI::hier::Box>::operator*(const std::_List_const_iterator<SAMRAI::hier::Box> *) const
  -> (1312,70) SAMRAI::hier::Box::contains(const SAMRAI::hier::Box *, const SAMRAI::hier::Index &) const
  -> INLINE: (1334,13) std::shared_ptr<SAMRAI::hier::Patch>::~shared_ptr(std::shared_ptr<SAMRAI::hier::Patch> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1334,13) std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry>::~shared_ptr(std::shared_ptr<SAMRAI::geom::CartesianPatchGeometry> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1335,9) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1351,5) std::shared_ptr<ExtendedFlattenedHierarchy>::~shared_ptr(std::shared_ptr<ExtendedFlattenedHierarchy> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(1209,33)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(1209,33)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(1209,33)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(1209,33)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(1209,33)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(1209,33)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(1212,9)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(1212,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(1212,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(1212,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(1212,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(1212,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(1234,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(1244,21)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(1274,25)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(1291,21)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(1293,25)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(1295,29)
               remark #15542: loop was not vectorized: inner loop was already vectorized

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(1307,42)
                  remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(1324,33)
               <Peeled loop for vectorization>
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(1324,33)
                  remark #15300: LOOP WAS VECTORIZED
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(1324,33)
               <Remainder loop for vectorization>
                  remark #15301: REMAINDER LOOP WAS VECTORIZED
               LOOP END

               LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(1324,33)
               <Remainder loop for vectorization>
               LOOP END
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(1218,9)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(1232,36) ]
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(749,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(749,7):remark #34026: call to memset implemented as a call to optimized library version
/home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp(1157,1):remark #34051: REGISTER ALLOCATION : [_ZNK13MPIHelperGrid53getAveragedGridLevelNumberWithInhomogeneousZDirectionEv] /home/akula/HAMeRS_IB/HAMeRS/src/util/MPI_helpers/MPIHelperGrid.cpp:1157

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rsi rdi r8-r10 r12-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :    1116
            Global    :     292
            Local     :     824
        Regenerable   :     375
        Spilled       :      43
        
    Routine stack
        Variables     :    1246 bytes*
            Reads     :     100 [5.80e+02 ~ 9.6%]
            Writes    :     134 [1.08e+02 ~ 1.8%]
        Spills        :     304 bytes*
            Reads     :     110 [2.81e+02 ~ 4.7%]
            Writes    :      49 [1.36e+01 ~ 0.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::IntVector::operator/=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::IntVector::operator/=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)) [41] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(584,4)
  -> INLINE: (589,43) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (590,48) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (590,48) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (591,24) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (591,52) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const
  -> INLINE: (595,47) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (597,21) std::vector<int, std::allocator<int>>::operator[](std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type)
  -> INLINE: (597,40) std::vector<int, std::allocator<int>>::operator[](const std::vector<int, std::allocator<int>> *, std::vector<int, std::allocator<int>>::size_type) const


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(588,10)
   remark #15523: loop was not vectorized: loop control variable b was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(590,48)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      remark #25478: While Loop Unrolled by 2  
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(596,10)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(596,10)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(596,10)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(596,10)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
LOOP END

    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(584,4):remark #34051: REGISTER ALLOCATION : [_ZN6SAMRAI4hier9IntVectordVERKS1_] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:584

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :      84
            Global    :      31
            Local     :      53
        Regenerable   :       1
        Spilled       :       5
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      40 bytes*
            Reads     :      10 [3.05e+00 ~ 1.6%]
            Writes    :      10 [3.05e+00 ~ 1.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::char_traits<char>::length(const std::char_traits<char>::char_type *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/char_traits.h(259,7):remark #34051: REGISTER ALLOCATION : [_ZNSt11char_traitsIcE6lengthEPKc] /usr/include/c++/4.8.5/bits/char_traits.h:259

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      12
            Global    :       7
            Local     :       5
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>>::~basic_stringbuf(std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/iosfwd(93,11):remark #34051: REGISTER ALLOCATION : [_ZNSt15basic_stringbufIcSt11char_traitsIcESaIcEED1Ev] /usr/include/c++/4.8.5/iosfwd:93

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rbp rsi rdi]
        
    Routine temporaries
        Total         :      21
            Global    :      11
            Local     :      10
        Regenerable   :       5
        Spilled       :       1
        
    Routine stack
        Variables     :       1 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: __gnu_cxx::__exchange_and_add_dispatch(_Atomic_word *, int)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/ext/atomicity.h(79,3):remark #34051: REGISTER ALLOCATION : [_ZN17_INTERNALb0d2c99c9__gnu_cxx27__exchange_and_add_dispatchEPii] /usr/include/c++/4.8.5/ext/atomicity.h:79

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rdx rsi rdi]
        
    Routine temporaries
        Total         :      16
            Global    :       8
            Local     :       8
        Regenerable   :       2
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_base<__gnu_cxx::_S_atomic>::~_Sp_counted_base(std::_Sp_counted_base<__gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(114,7):remark #34051: REGISTER ALLOCATION : [_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EED1Ev] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:114

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       8
            Global    :       0
            Local     :       8
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_base<__gnu_cxx::_S_atomic>::~_Sp_counted_base(std::_Sp_counted_base<__gnu_cxx::_S_atomic> *const)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(113,7):remark #34051: REGISTER ALLOCATION : [_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EED0Ev] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:113

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_base<__gnu_cxx::_S_atomic>::_M_destroy(std::_Sp_counted_base<__gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(124,7):remark #34051: REGISTER ALLOCATION : [_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:124

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      19
            Global    :       7
            Local     :      12
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ExtendedFlattenedHierarchy *, __gnu_cxx::_S_atomic>::_M_dispose(std::_Sp_counted_ptr<ExtendedFlattenedHierarchy *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(290,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP26ExtendedFlattenedHierarchyLN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:290

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rbp rdi]
        
    Routine temporaries
        Total         :      11
            Global    :       7
            Local     :       4
        Regenerable   :       0
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ExtendedFlattenedHierarchy *, __gnu_cxx::_S_atomic>::_M_destroy(std::_Sp_counted_ptr<ExtendedFlattenedHierarchy *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(294,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP26ExtendedFlattenedHierarchyLN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:294

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      19
            Global    :       7
            Local     :      12
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ExtendedFlattenedHierarchy *, __gnu_cxx::_S_atomic>::_M_get_deleter(std::_Sp_counted_ptr<ExtendedFlattenedHierarchy *, __gnu_cxx::_S_atomic> *, const std::type_info &)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(298,7):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP26ExtendedFlattenedHierarchyLN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:298

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rsi rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ExtendedFlattenedHierarchy *, __gnu_cxx::_S_atomic>::~_Sp_counted_ptr(std::_Sp_counted_ptr<ExtendedFlattenedHierarchy *, __gnu_cxx::_S_atomic> *const)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(281,11):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP26ExtendedFlattenedHierarchyLN9__gnu_cxx12_Lock_policyE2EED0Ev] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:281

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Sp_counted_ptr<ExtendedFlattenedHierarchy *, __gnu_cxx::_S_atomic>::~_Sp_counted_ptr(std::_Sp_counted_ptr<ExtendedFlattenedHierarchy *, __gnu_cxx::_S_atomic> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr_base.h(281,11):remark #34051: REGISTER ALLOCATION : [_ZNSt15_Sp_counted_ptrIP26ExtendedFlattenedHierarchyLN9__gnu_cxx12_Lock_policyE2EED1Ev] /usr/include/c++/4.8.5/bits/shared_ptr_base.h:281

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       7
            Global    :       0
            Local     :       7
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::tbox::Dimension::operator==(const SAMRAI::tbox::Dimension *, const SAMRAI::tbox::Dimension &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/Dimension.h(73,4)

===========================================================================

Begin optimization report for: SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/Dimension.h(137,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::LocalId::operator==(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::LocalId::operator==(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/LocalId.h(354,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::LocalId::operator<(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::LocalId::operator<(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/LocalId.h(382,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/GlobalId.h(106,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::PeriodicId::operator<(const SAMRAI::hier::PeriodicId *, const SAMRAI::hier::PeriodicId &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::PeriodicId::operator<(const SAMRAI::hier::PeriodicId *, const SAMRAI::hier::PeriodicId &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PeriodicId.h(163,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::BoxId::operator<(const SAMRAI::hier::BoxId *, const SAMRAI::hier::BoxId &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::BoxId::operator<(const SAMRAI::hier::BoxId *, const SAMRAI::hier::BoxId &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h(222,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::IntVector::operator=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::IntVector::operator=(SAMRAI::hier::IntVector *, const SAMRAI::hier::IntVector &)) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(186,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::IntVector::operator[](SAMRAI::hier::IntVector *, unsigned int)) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(253,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::IntVector::operator[](const SAMRAI::hier::IntVector *, unsigned int) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(269,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(1132,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::IntVector::getOne(const SAMRAI::tbox::Dimension &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::IntVector::getOne(const SAMRAI::tbox::Dimension &)) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(1145,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Index::operator+=(SAMRAI::hier::Index *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Index::operator+=(SAMRAI::hier::Index *, int)) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(238,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Index::operator+(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, int) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Index::operator+(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, int) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(251,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Index::operator-=(SAMRAI::hier::Index *, const SAMRAI::hier::Index &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Index::operator-=(SAMRAI::hier::Index *, const SAMRAI::hier::Index &)) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(265,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Index::operator-(SAMRAI::hier::Index *, const SAMRAI::hier::Index *, const SAMRAI::hier::Index &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(281,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Index::operator[](const SAMRAI::hier::Index *, unsigned int) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(489,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Index::operator()(const SAMRAI::hier::Index *, unsigned int) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(515,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Index::getDim(const SAMRAI::hier::Index *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Index.h(724,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Box::getBoxId(const SAMRAI::hier::Box *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Box::getBoxId(const SAMRAI::hier::Box *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(315,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Box::lower(const SAMRAI::hier::Box *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(495,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Box::empty(const SAMRAI::hier::Box *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(598,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Box::getDim(const SAMRAI::hier::Box *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(1298,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Patch.h(93,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h(1171,7)

===========================================================================

Begin optimization report for: SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h(1200,7)

===========================================================================

Begin optimization report for: SAMRAI::hier::PatchHierarchy::getNumberOfLevels(const SAMRAI::hier::PatchHierarchy *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::PatchHierarchy::getNumberOfLevels(const SAMRAI::hier::PatchHierarchy *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h(548,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::PatchHierarchy::getRatioToCoarserLevel(const SAMRAI::hier::PatchHierarchy *, int) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h(780,4)

===========================================================================

Begin optimization report for: SAMRAI::geom::CartesianGridGeometry::getXLower(const SAMRAI::geom::CartesianGridGeometry *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::geom::CartesianGridGeometry::getXLower(const SAMRAI::geom::CartesianGridGeometry *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/geom/CartesianGridGeometry.h(265,4)

===========================================================================

Begin optimization report for: SAMRAI::geom::CartesianGridGeometry::getXUpper(const SAMRAI::geom::CartesianGridGeometry *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::geom::CartesianGridGeometry::getXUpper(const SAMRAI::geom::CartesianGridGeometry *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/geom/CartesianGridGeometry.h(275,4)

===========================================================================

Begin optimization report for: SAMRAI::geom::CartesianPatchGeometry::getDx(const SAMRAI::geom::CartesianPatchGeometry *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::geom::CartesianPatchGeometry::getDx(const SAMRAI::geom::CartesianPatchGeometry *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/geom/CartesianPatchGeometry.h(70,4)

===========================================================================

Begin optimization report for: __sti__$E()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (__sti__$E()) [313] <compiler generated>


    Report from: Code generation optimizations [cg]

<compiler generated>:remark #34051: REGISTER ALLOCATION : [__sti__$E] (null):0

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdx rsi rdi]
        
    Routine temporaries
        Total         :      13
            Global    :       7
            Local     :       6
        Regenerable   :       7
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Vector_base<double, std::allocator<double>>::_M_get_Tp_allocator(std::_Vector_base<double, std::allocator<double>> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(114,7):remark #34051: REGISTER ALLOCATION : [_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv] /usr/include/c++/4.8.5/bits/stl_vector.h:114

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rax rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Vector_base<double, std::allocator<double>>::_M_deallocate(std::_Vector_base<double, std::allocator<double>> *, std::_Vector_base<double, std::allocator<double>>::pointer, std::size_t)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(172,7):remark #34051: REGISTER ALLOCATION : [_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdm] /usr/include/c++/4.8.5/bits/stl_vector.h:172

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdx rsi rdi]
        
    Routine temporaries
        Total         :      11
            Global    :       7
            Local     :       4
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/GlobalId.h(88,4)

===========================================================================

Begin optimization report for: std::vector<double, std::allocator<double>>::_M_default_append(std::vector<double, std::allocator<double>> *, std::vector<double, std::allocator<double>>::size_type)

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /usr/include/c++/4.8.5/bits/vector.tcc(541,8)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /usr/include/c++/4.8.5/bits/vector.tcc(541,8)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /usr/include/c++/4.8.5/bits/vector.tcc(541,8)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /usr/include/c++/4.8.5/bits/vector.tcc(558,5)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /usr/include/c++/4.8.5/bits/vector.tcc(558,5)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_algobase.h(749,7) inlined into /usr/include/c++/4.8.5/bits/vector.tcc(558,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_algobase.h(372,6):remark #34026: call to memmove implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(749,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/stl_algobase.h(749,7):remark #34026: call to memset implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/vector.tcc(534,5):remark #34051: REGISTER ALLOCATION : [_ZNSt6vectorIdSaIdEE17_M_default_appendEm] /usr/include/c++/4.8.5/bits/vector.tcc:534

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rsi rdi r8 r12-r15 zmm0]
        
    Routine temporaries
        Total         :      56
            Global    :      28
            Local     :      28
        Regenerable   :      11
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      16 bytes*
            Reads     :       3 [8.34e-01 ~ 0.8%]
            Writes    :       3 [8.34e-01 ~ 0.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
