Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: ExtendedFlattenedHierarchy::ExtendedFlattenedHierarchy(ExtendedFlattenedHierarchy *const, const SAMRAI::hier::PatchHierarchy &, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ExtendedFlattenedHierarchy::ExtendedFlattenedHierarchy(ExtendedFlattenedHierarchy *const, const SAMRAI::hier::PatchHierarchy &, int, int)) [3] /home/akula/HAMeRS_IB/HAMeRS/src/extn/patch_hierarchies/ExtendedFlattenedHierarchy.cpp(22,29)
  -> (22,29) ExtendedFlattenedHierarchy::ExtendedFlattenedHierarchy(ExtendedFlattenedHierarchy *, const SAMRAI::hier::PatchHierarchy &, int, int)


    Report from: Code generation optimizations [cg]

/home/akula/HAMeRS_IB/HAMeRS/src/extn/patch_hierarchies/ExtendedFlattenedHierarchy.cpp(22,29):remark #34051: REGISTER ALLOCATION : [_ZN26ExtendedFlattenedHierarchyC2ERKN6SAMRAI4hier14PatchHierarchyEii] /home/akula/HAMeRS_IB/HAMeRS/src/extn/patch_hierarchies/ExtendedFlattenedHierarchy.cpp:22

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rdx rcx rsi rdi]
        
    Routine temporaries
        Total         :      18
            Global    :       0
            Local     :      18
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: ExtendedFlattenedHierarchy::ExtendedFlattenedHierarchy(ExtendedFlattenedHierarchy *, const SAMRAI::hier::PatchHierarchy &, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ExtendedFlattenedHierarchy::ExtendedFlattenedHierarchy(ExtendedFlattenedHierarchy *, const SAMRAI::hier::PatchHierarchy &, int, int)) [4] /home/akula/HAMeRS_IB/HAMeRS/src/extn/patch_hierarchies/ExtendedFlattenedHierarchy.cpp(29,1)
  -> (22,29) std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>>::~vector(std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>> *)
  -> (22,29) std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>>::~vector(std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>> *)
  -> (22,29) std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>>::vector(std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>> *)
  -> (22,29) std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>>::vector(std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>> *)
  -> INLINE: (30,32) SAMRAI::hier::PatchHierarchy::getNumberOfLevels(const SAMRAI::hier::PatchHierarchy *) const
  -> INLINE: (35,21) std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>>::resize(std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>> *, std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (36,32) std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>>::resize(std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>> *, std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>>::size_type)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (44,23) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (44,23) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (48,44) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (49,30) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (49,32) SAMRAI::hier::PatchLevel::findConnector(const SAMRAI::hier::PatchLevel *, const SAMRAI::hier::PatchLevel &, const SAMRAI::hier::IntVector &, SAMRAI::hier::ConnectorNotFoundAction, bool) const
  -> INLINE: (50,21) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (50,33) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> (50,33) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> INLINE: (51,21) SAMRAI::hier::IntVector::getOne(const SAMRAI::tbox::Dimension &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(1146,27) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (51,63) SAMRAI::hier::PatchHierarchy::getDim(const SAMRAI::hier::PatchHierarchy *) const
  -> INLINE: (55,44) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (56,30) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (56,32) SAMRAI::hier::PatchLevel::findConnector(const SAMRAI::hier::PatchLevel *, const SAMRAI::hier::PatchLevel &, const SAMRAI::hier::IntVector &, SAMRAI::hier::ConnectorNotFoundAction, bool) const
  -> INLINE: (57,21) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (57,33) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> (57,33) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> INLINE: (58,21) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(1133,28) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (58,64) SAMRAI::hier::PatchHierarchy::getDim(const SAMRAI::hier::PatchHierarchy *) const
  -> INLINE: (62,77) SAMRAI::hier::Connector::getRatio(const SAMRAI::hier::Connector *) const
  -> INLINE: (64,69) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (64,71) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (65,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (65,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (65,37) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (65,37) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (65,39) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (65,39) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (66,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1222,10) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator++(std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (68,71) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (69,53) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (69,55) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (70,61) SAMRAI::hier::Box::getBlockId(const SAMRAI::hier::Box *) const
  -> INLINE: (71,57) SAMRAI::hier::Box::getBoxId(const SAMRAI::hier::Box *) const
  -> INLINE: (72,76) std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>>::operator[](std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>> *, std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>>::size_type)
  -> INLINE: (72,80) std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::operator[](std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>> *, const std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type &)
    -> INLINE: /usr/include/c++/4.8.5/bits/stl_map.h:(461,29) std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::lower_bound(std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>> *, const std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type &)
      -> INLINE: (864,33) std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::lower_bound(std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type> *, const std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::key_type &)
        -> INLINE: /usr/include/c++/4.8.5/bits/stl_tree.h:(879,53) std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::_M_lower_bound(std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::_Link_type, std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::_Link_type, const std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type &)
          -> INLINE: (1141,29) std::less<SAMRAI::hier::BoxId>::operator()(const std::less<SAMRAI::hier::BoxId> *, const SAMRAI::hier::BoxId &, const SAMRAI::hier::BoxId &) const
            -> INLINE: /usr/include/c++/4.8.5/bits/stl_function.h:(235,20) SAMRAI::hier::BoxId::operator<(const SAMRAI::hier::BoxId *, const SAMRAI::hier::BoxId &) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(224,26) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(224,57) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(225,27) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(225,59) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,28) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,41) SAMRAI::hier::LocalId::operator<(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,57) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,29) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,42) SAMRAI::hier::LocalId::operator==(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,59) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(228,32) SAMRAI::hier::PeriodicId::operator<(const SAMRAI::hier::PeriodicId *, const SAMRAI::hier::PeriodicId &) const
    -> INLINE: /usr/include/c++/4.8.5/bits/stl_map.h:(463,32) std::less<SAMRAI::hier::BoxId>::operator()(const std::less<SAMRAI::hier::BoxId> *, const SAMRAI::hier::BoxId &, const SAMRAI::hier::BoxId &) const
      -> INLINE: /usr/include/c++/4.8.5/bits/stl_function.h:(235,20) SAMRAI::hier::BoxId::operator<(const SAMRAI::hier::BoxId *, const SAMRAI::hier::BoxId &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(224,26) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(224,57) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(225,27) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(225,59) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,28) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,41) SAMRAI::hier::LocalId::operator<(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,57) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,29) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,42) SAMRAI::hier::LocalId::operator==(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,59) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(228,32) SAMRAI::hier::PeriodicId::operator<(const SAMRAI::hier::PeriodicId *, const SAMRAI::hier::PeriodicId &) const
  -> INLINE: (74,47) std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>>::operator[](std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>> *, std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>>::size_type)
  -> INLINE: (74,51) std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::operator[](std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>> *, const std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type &)
    -> INLINE: /usr/include/c++/4.8.5/bits/stl_map.h:(461,29) std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::lower_bound(std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>> *, const std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type &)
      -> INLINE: (864,33) std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::lower_bound(std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type> *, const std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::key_type &)
        -> INLINE: /usr/include/c++/4.8.5/bits/stl_tree.h:(879,53) std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::_M_lower_bound(std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::_Link_type, std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::_Link_type, const std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type &)
          -> INLINE: (1141,29) std::less<SAMRAI::hier::BoxId>::operator()(const std::less<SAMRAI::hier::BoxId> *, const SAMRAI::hier::BoxId &, const SAMRAI::hier::BoxId &) const
            -> INLINE: /usr/include/c++/4.8.5/bits/stl_function.h:(235,20) SAMRAI::hier::BoxId::operator<(const SAMRAI::hier::BoxId *, const SAMRAI::hier::BoxId &) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(224,26) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(224,57) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(225,27) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(225,59) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,28) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,41) SAMRAI::hier::LocalId::operator<(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,57) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,29) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,42) SAMRAI::hier::LocalId::operator==(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,59) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(228,32) SAMRAI::hier::PeriodicId::operator<(const SAMRAI::hier::PeriodicId *, const SAMRAI::hier::PeriodicId &) const
    -> INLINE: /usr/include/c++/4.8.5/bits/stl_map.h:(463,32) std::less<SAMRAI::hier::BoxId>::operator()(const std::less<SAMRAI::hier::BoxId> *, const SAMRAI::hier::BoxId &, const SAMRAI::hier::BoxId &) const
      -> INLINE: /usr/include/c++/4.8.5/bits/stl_function.h:(235,20) SAMRAI::hier::BoxId::operator<(const SAMRAI::hier::BoxId *, const SAMRAI::hier::BoxId &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(224,26) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(224,57) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(225,27) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(225,59) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,28) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,41) SAMRAI::hier::LocalId::operator<(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,57) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,29) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,42) SAMRAI::hier::LocalId::operator==(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,59) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(228,32) SAMRAI::hier::PeriodicId::operator<(const SAMRAI::hier::PeriodicId *, const SAMRAI::hier::PeriodicId &) const
  -> (79,36) SAMRAI::hier::Connector::hasNeighborSet(const SAMRAI::hier::Connector *, const SAMRAI::hier::BoxId &) const
  -> (81,36) SAMRAI::hier::Connector::getNeighborBoxes(const SAMRAI::hier::Connector *, const SAMRAI::hier::BoxId &, SAMRAI::hier::BoxContainer &) const
  -> INLINE: (83,37) SAMRAI::hier::BoxContainer::empty(const SAMRAI::hier::BoxContainer *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(682,21) std::list<SAMRAI::hier::Box, std::allocator<SAMRAI::hier::Box>>::empty(const std::list<SAMRAI::hier::Box, std::allocator<SAMRAI::hier::Box>> *) const
  -> INLINE: (87,34) SAMRAI::hier::RealBoxConstIterator::operator!=(const SAMRAI::hier::RealBoxConstIterator *, const SAMRAI::hier::RealBoxConstIterator &) const
    -> /home/akula/libraries/SAMRAI/include/SAMRAI/hier/RealBoxConstIterator.h:(102,43) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
  -> (87,34) SAMRAI::hier::RealBoxConstIterator::operator!=(const SAMRAI::hier::RealBoxConstIterator *, const SAMRAI::hier::RealBoxConstIterator &) const
  -> INLINE: (90,36) SAMRAI::hier::RealBoxConstIterator::operator->(const SAMRAI::hier::RealBoxConstIterator *) const
    -> /home/akula/libraries/SAMRAI/include/SAMRAI/hier/RealBoxConstIterator.h:(82,16) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> INLINE: (90,38) SAMRAI::hier::Box::getBlockId(const SAMRAI::hier::Box *) const
  -> INLINE: (90,51) SAMRAI::hier::BlockId::operator==(const SAMRAI::hier::BlockId *, const SAMRAI::hier::BlockId &) const
  -> (92,40) SAMRAI::hier::BoxContainer::pushBack(SAMRAI::hier::BoxContainer *, const SAMRAI::hier::Box &)
  -> INLINE: (92,49) SAMRAI::hier::RealBoxConstIterator::operator*(const SAMRAI::hier::RealBoxConstIterator *) const
    -> /home/akula/libraries/SAMRAI/include/SAMRAI/hier/RealBoxConstIterator.h:(73,14) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const
  -> INLINE: (102,78) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::iterator *, SAMRAI::hier::BoxContainer *)
  -> (103,26) SAMRAI::hier::BoxContainer::BoxContainerIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerIterator *, const SAMRAI::hier::BoxContainer::BoxContainerIterator &) const
  -> (103,26) SAMRAI::hier::BoxContainer::BoxContainerIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerIterator *, const SAMRAI::hier::BoxContainer::BoxContainerIterator &) const
  -> INLINE: (103,42) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::iterator *, SAMRAI::hier::BoxContainer *)
  -> INLINE: (103,42) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::iterator *, SAMRAI::hier::BoxContainer *)
  -> (104,25) SAMRAI::hier::BoxContainer::BoxContainerIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerIterator *, SAMRAI::hier::BoxContainer::BoxContainerIterator *, int)
  -> INLINE: (106,47) SAMRAI::hier::BoxContainer::BoxContainerIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerIterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(373,30) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator*(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(373,44) std::_List_iterator<SAMRAI::hier::Box>::operator*(const std::_List_iterator<SAMRAI::hier::Box> *) const
  -> INLINE: (106,70) SAMRAI::hier::PeriodicId::zero()
  -> INLINE: (106,70) SAMRAI::hier::BoxId::getOwnerRank(const SAMRAI::hier::BoxId *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(129,26) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
  -> INLINE: (107,29) SAMRAI::hier::LocalId::operator++(SAMRAI::hier::LocalId *, SAMRAI::hier::LocalId *, int)
  -> INLINE: (108,56) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::iterator *, SAMRAI::hier::BoxContainer *)
  -> (112,40) SAMRAI::hier::Connector::hasNeighborSet(const SAMRAI::hier::Connector *, const SAMRAI::hier::BoxId &) const
  -> (114,40) SAMRAI::hier::Connector::getNeighborBoxes(const SAMRAI::hier::Connector *, const SAMRAI::hier::BoxId &, SAMRAI::hier::BoxContainer &) const
  -> INLINE: (118,86) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::iterator *, SAMRAI::hier::BoxContainer *)
  -> (119,30) SAMRAI::hier::BoxContainer::BoxContainerIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerIterator *, const SAMRAI::hier::BoxContainer::BoxContainerIterator &) const
  -> (119,30) SAMRAI::hier::BoxContainer::BoxContainerIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerIterator *, const SAMRAI::hier::BoxContainer::BoxContainerIterator &) const
  -> INLINE: (119,50) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::iterator *, SAMRAI::hier::BoxContainer *)
  -> INLINE: (119,50) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::iterator *, SAMRAI::hier::BoxContainer *)
  -> (120,29) SAMRAI::hier::BoxContainer::BoxContainerIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerIterator *, SAMRAI::hier::BoxContainer::BoxContainerIterator *, int)
  -> (122,67) SAMRAI::hier::BoxContainer::BoxContainerIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerIterator *) const
  -> INLINE: (123,87) SAMRAI::hier::Box::getBoxId(const SAMRAI::hier::Box *) const
  -> (124,36) SAMRAI::hier::BoxId::operator!=(const SAMRAI::hier::BoxId *, const SAMRAI::hier::BoxId &) const
  -> INLINE: (126,51) SAMRAI::hier::BoxContainer::push_back(SAMRAI::hier::BoxContainer *, const SAMRAI::hier::Box &)
    -> /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(1096,7) SAMRAI::hier::BoxContainer::pushBack(SAMRAI::hier::BoxContainer *, const SAMRAI::hier::Box &)
  -> INLINE: (133,86) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::iterator *, SAMRAI::hier::BoxContainer *)
  -> (134,30) SAMRAI::hier::BoxContainer::BoxContainerIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerIterator *, const SAMRAI::hier::BoxContainer::BoxContainerIterator &) const
  -> (134,30) SAMRAI::hier::BoxContainer::BoxContainerIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerIterator *, const SAMRAI::hier::BoxContainer::BoxContainerIterator &) const
  -> INLINE: (134,50) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::iterator *, SAMRAI::hier::BoxContainer *)
  -> INLINE: (134,50) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::iterator *, SAMRAI::hier::BoxContainer *)
  -> (135,29) SAMRAI::hier::BoxContainer::BoxContainerIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerIterator *, SAMRAI::hier::BoxContainer::BoxContainerIterator *, int)
  -> (137,58) SAMRAI::hier::BoxContainer::BoxContainerIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerIterator *) const
  -> INLINE: (137,92) SAMRAI::hier::PeriodicId::zero()
  -> INLINE: (137,92) SAMRAI::hier::BoxId::getOwnerRank(const SAMRAI::hier::BoxId *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(129,26) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
  -> INLINE: (138,44) SAMRAI::hier::LocalId::operator++(SAMRAI::hier::LocalId *, SAMRAI::hier::LocalId *, int)
  -> INLINE: (139,82) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::iterator *, SAMRAI::hier::BoxContainer *)
  -> INLINE: (146,44) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (147,30) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (147,32) SAMRAI::hier::PatchLevel::findConnector(const SAMRAI::hier::PatchLevel *, const SAMRAI::hier::PatchLevel &, const SAMRAI::hier::IntVector &, SAMRAI::hier::ConnectorNotFoundAction, bool) const
  -> INLINE: (148,21) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> (148,33) SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const
  -> (148,33) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
  -> INLINE: (149,21) SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h:(1133,28) SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const
  -> INLINE: (149,64) SAMRAI::hier::PatchHierarchy::getDim(const SAMRAI::hier::PatchHierarchy *) const
  -> INLINE: (153,69) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (153,71) SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (154,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (154,21) SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1201,28) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::_Self &) const
  -> INLINE: (154,37) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (154,37) std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::PatchLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (154,39) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (154,39) SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (155,20) SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1222,10) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator++(std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (157,71) SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:(1172,27) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type>::operator->(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_type, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::value_type>, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::key_compare, std::map<SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, std::shared_ptr<SAMRAI::hier::Patch>>>>::_Pair_alloc_type>::value_type> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (158,53) std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::Patch, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (158,55) SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const
  -> INLINE: (159,57) SAMRAI::hier::Box::getBoxId(const SAMRAI::hier::Box *) const
  -> INLINE: (160,76) std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>>::operator[](std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>> *, std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>>::size_type)
  -> INLINE: (160,80) std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::operator[](std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>> *, const std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type &)
    -> INLINE: /usr/include/c++/4.8.5/bits/stl_map.h:(461,29) std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::lower_bound(std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>> *, const std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type &)
      -> INLINE: (864,33) std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::lower_bound(std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type> *, const std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::key_type &)
        -> INLINE: /usr/include/c++/4.8.5/bits/stl_tree.h:(879,53) std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::_M_lower_bound(std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::_Link_type, std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::_Link_type, const std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type &)
          -> INLINE: (1141,29) std::less<SAMRAI::hier::BoxId>::operator()(const std::less<SAMRAI::hier::BoxId> *, const SAMRAI::hier::BoxId &, const SAMRAI::hier::BoxId &) const
            -> INLINE: /usr/include/c++/4.8.5/bits/stl_function.h:(235,20) SAMRAI::hier::BoxId::operator<(const SAMRAI::hier::BoxId *, const SAMRAI::hier::BoxId &) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(224,26) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(224,57) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(225,27) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(225,59) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,28) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,41) SAMRAI::hier::LocalId::operator<(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,57) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,29) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,42) SAMRAI::hier::LocalId::operator==(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,59) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(228,32) SAMRAI::hier::PeriodicId::operator<(const SAMRAI::hier::PeriodicId *, const SAMRAI::hier::PeriodicId &) const
    -> INLINE: /usr/include/c++/4.8.5/bits/stl_map.h:(463,32) std::less<SAMRAI::hier::BoxId>::operator()(const std::less<SAMRAI::hier::BoxId> *, const SAMRAI::hier::BoxId &, const SAMRAI::hier::BoxId &) const
      -> INLINE: /usr/include/c++/4.8.5/bits/stl_function.h:(235,20) SAMRAI::hier::BoxId::operator<(const SAMRAI::hier::BoxId *, const SAMRAI::hier::BoxId &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(224,26) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(224,57) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(225,27) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(225,59) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,28) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,41) SAMRAI::hier::LocalId::operator<(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,57) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,29) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,42) SAMRAI::hier::LocalId::operator==(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,59) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
        -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(228,32) SAMRAI::hier::PeriodicId::operator<(const SAMRAI::hier::PeriodicId *, const SAMRAI::hier::PeriodicId &) const
  -> INLINE: (162,47) std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>>::operator[](std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>> *, std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>>::size_type)
  -> (162,51) std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::operator[](std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>> *, const std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type &)
  -> INLINE: (164,62) SAMRAI::hier::PeriodicId::zero()
  -> INLINE: (164,62) SAMRAI::hier::Box::getOwnerRank(const SAMRAI::hier::Box *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h:(359,19) SAMRAI::hier::BoxId::getOwnerRank(const SAMRAI::hier::BoxId *) const
      -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(129,26) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
  -> INLINE: (165,25) SAMRAI::hier::LocalId::operator++(SAMRAI::hier::LocalId *, SAMRAI::hier::LocalId *, int)
  -> INLINE: (166,52) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::iterator *, SAMRAI::hier::BoxContainer *)
  -> (169,40) SAMRAI::hier::Connector::hasNeighborSet(const SAMRAI::hier::Connector *, const SAMRAI::hier::BoxId &) const
  -> (171,40) SAMRAI::hier::Connector::getNeighborBoxes(const SAMRAI::hier::Connector *, const SAMRAI::hier::BoxId &, SAMRAI::hier::BoxContainer &) const
  -> INLINE: (175,86) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::iterator *, SAMRAI::hier::BoxContainer *)
  -> (176,30) SAMRAI::hier::BoxContainer::BoxContainerIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerIterator *, const SAMRAI::hier::BoxContainer::BoxContainerIterator &) const
  -> (176,30) SAMRAI::hier::BoxContainer::BoxContainerIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerIterator *, const SAMRAI::hier::BoxContainer::BoxContainerIterator &) const
  -> INLINE: (176,50) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::iterator *, SAMRAI::hier::BoxContainer *)
  -> INLINE: (176,50) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::iterator *, SAMRAI::hier::BoxContainer *)
  -> (177,29) SAMRAI::hier::BoxContainer::BoxContainerIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerIterator *, SAMRAI::hier::BoxContainer::BoxContainerIterator *, int)
  -> (179,67) SAMRAI::hier::BoxContainer::BoxContainerIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerIterator *) const
  -> INLINE: (180,87) SAMRAI::hier::Box::getBoxId(const SAMRAI::hier::Box *) const
  -> (181,36) SAMRAI::hier::BoxId::operator!=(const SAMRAI::hier::BoxId *, const SAMRAI::hier::BoxId &) const
  -> INLINE: (183,51) SAMRAI::hier::BoxContainer::push_back(SAMRAI::hier::BoxContainer *, const SAMRAI::hier::Box &)
    -> /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(1096,7) SAMRAI::hier::BoxContainer::pushBack(SAMRAI::hier::BoxContainer *, const SAMRAI::hier::Box &)
  -> INLINE: (190,86) SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::iterator *, SAMRAI::hier::BoxContainer *)
  -> (191,30) SAMRAI::hier::BoxContainer::BoxContainerIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerIterator *, const SAMRAI::hier::BoxContainer::BoxContainerIterator &) const
  -> (191,30) SAMRAI::hier::BoxContainer::BoxContainerIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerIterator *, const SAMRAI::hier::BoxContainer::BoxContainerIterator &) const
  -> INLINE: (191,50) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::iterator *, SAMRAI::hier::BoxContainer *)
  -> INLINE: (191,50) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::iterator *, SAMRAI::hier::BoxContainer *)
  -> (192,29) SAMRAI::hier::BoxContainer::BoxContainerIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerIterator *, SAMRAI::hier::BoxContainer::BoxContainerIterator *, int)
  -> (194,58) SAMRAI::hier::BoxContainer::BoxContainerIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerIterator *) const
  -> INLINE: (194,92) SAMRAI::hier::PeriodicId::zero()
  -> INLINE: (194,92) SAMRAI::hier::BoxId::getOwnerRank(const SAMRAI::hier::BoxId *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(129,26) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
  -> INLINE: (195,44) SAMRAI::hier::LocalId::operator++(SAMRAI::hier::LocalId *, SAMRAI::hier::LocalId *, int)
  -> INLINE: (196,82) SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::iterator *, SAMRAI::hier::BoxContainer *)
  -> INLINE: (201,5) std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/extn/patch_hierarchies/ExtendedFlattenedHierarchy.cpp(35,21)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between __first->_M_t (96:11) and this->first (96:12)

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1123,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/extn/patch_hierarchies/ExtendedFlattenedHierarchy.cpp(35,21)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/extn/patch_hierarchies/ExtendedFlattenedHierarchy.cpp(36,32)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between __first->_M_t (96:11) and this->first (96:12)

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1123,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/extn/patch_hierarchies/ExtendedFlattenedHierarchy.cpp(36,32)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/extn/patch_hierarchies/ExtendedFlattenedHierarchy.cpp(65,21)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h(228,34) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/extn/patch_hierarchies/ExtendedFlattenedHierarchy.cpp(72,80)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h(228,34) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/extn/patch_hierarchies/ExtendedFlattenedHierarchy.cpp(74,51)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/extn/patch_hierarchies/ExtendedFlattenedHierarchy.cpp(87,34)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/extn/patch_hierarchies/ExtendedFlattenedHierarchy.cpp(103,26)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/extn/patch_hierarchies/ExtendedFlattenedHierarchy.cpp(119,30)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/extn/patch_hierarchies/ExtendedFlattenedHierarchy.cpp(134,30)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/extn/patch_hierarchies/ExtendedFlattenedHierarchy.cpp(154,21)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h(228,34) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/extn/patch_hierarchies/ExtendedFlattenedHierarchy.cpp(160,80)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/extn/patch_hierarchies/ExtendedFlattenedHierarchy.cpp(176,30)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/extn/patch_hierarchies/ExtendedFlattenedHierarchy.cpp(191,30)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at /home/akula/HAMeRS_IB/HAMeRS/src/extn/patch_hierarchies/ExtendedFlattenedHierarchy.cpp(41,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /home/akula/HAMeRS_IB/HAMeRS/src/extn/patch_hierarchies/ExtendedFlattenedHierarchy.cpp(147,32) ]
LOOP END

    Report from: Code generation optimizations [cg]

/home/akula/HAMeRS_IB/HAMeRS/src/extn/patch_hierarchies/ExtendedFlattenedHierarchy.cpp(29,1):remark #34051: REGISTER ALLOCATION : [_ZN26ExtendedFlattenedHierarchyC1ERKN6SAMRAI4hier14PatchHierarchyEii] /home/akula/HAMeRS_IB/HAMeRS/src/extn/patch_hierarchies/ExtendedFlattenedHierarchy.cpp:29

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rbp rsi rdi r8-r9 r12-r15]
        
    Routine temporaries
        Total         :     918
            Global    :     199
            Local     :     719
        Regenerable   :     401
        Spilled       :      18
        
    Routine stack
        Variables     :    1891 bytes*
            Reads     :      37 [3.61e+02 ~ 2.9%]
            Writes    :      44 [1.89e+02 ~ 1.5%]
        Spills        :      96 bytes*
            Reads     :      36 [1.76e+02 ~ 1.4%]
            Writes    :      13 [2.29e+01 ~ 0.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *) const) [5] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h(159,7)
  -> INLINE: (160,30) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator*(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *) const
  -> INLINE: (160,44) std::_List_const_iterator<SAMRAI::hier::Box>::operator*(const std::_List_const_iterator<SAMRAI::hier::Box> *) const


    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h(159,7):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4hier12BoxContainer25BoxContainerConstIteratordeEv] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:159

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rax rdi]
        
    Routine temporaries
        Total         :      12
            Global    :       8
            Local     :       4
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::_M_emplace_hint_unique<const std::piecewise_construct_t &, std::tuple<const std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type &>, std::tuple<>>(std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::const_iterator, const std::piecewise_construct_t &, std::tuple<const std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type &> &&, std::tuple<> &&)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_tree.h(140,51):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/stl_tree.h(1668,7):remark #34051: REGISTER ALLOCATION : [_ZNSt8_Rb_treeIN6SAMRAI4hier5BoxIdESt4pairIKS2_NS1_12BoxContainerEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE22_M_emplace_hint_uniqueIIRKSt21piecewise_construct_tSt5tupleIIRS4_EESH_IIEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_] /usr/include/c++/4.8.5/bits/stl_tree.h:1668

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rbx rbp rsi rdi r8 r12 r14 zmm0]
        
    Routine temporaries
        Total         :      74
            Global    :      20
            Local     :      54
        Regenerable   :       3
        Spilled       :       4
        
    Routine stack
        Variables     :      32 bytes*
            Reads     :       4 [1.12e+00 ~ 1.9%]
            Writes    :       6 [3.00e+00 ~ 5.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::_M_put_node(std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::_Link_type)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_tree.h(374,7):remark #34051: REGISTER ALLOCATION : [_ZNSt8_Rb_treeIN6SAMRAI4hier5BoxIdESt4pairIKS2_NS1_12BoxContainerEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E] /usr/include/c++/4.8.5/bits/stl_tree.h:374

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rsi rdi]
        
    Routine temporaries
        Total         :      10
            Global    :       0
            Local     :      10
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::_M_get_insert_hint_unique_pos(std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::const_iterator, const std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::key_type &)

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1321,7) inlined into /usr/include/c++/4.8.5/bits/stl_tree.h(1426,38)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1321,7) inlined into /usr/include/c++/4.8.5/bits/stl_tree.h(1442,38)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1321,7) inlined into /usr/include/c++/4.8.5/bits/stl_tree.h(1458,38)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_tree.h(1414,5):remark #34051: REGISTER ALLOCATION : [_ZNSt8_Rb_treeIN6SAMRAI4hier5BoxIdESt4pairIKS2_NS1_12BoxContainerEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS4_] /usr/include/c++/4.8.5/bits/stl_tree.h:1414

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rbp rsi rdi r8-r9 r12-r15]
        
    Routine temporaries
        Total         :     141
            Global    :      48
            Local     :      93
        Regenerable   :       5
        Spilled       :       6
        
    Routine stack
        Variables     :      48 bytes*
            Reads     :       6 [5.92e-01 ~ 0.8%]
            Writes    :      18 [5.92e-01 ~ 0.8%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::_M_destroy_node(std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::_Link_type)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_tree.h(420,7):remark #34051: REGISTER ALLOCATION : [_ZNSt8_Rb_treeIN6SAMRAI4hier5BoxIdESt4pairIKS2_NS1_12BoxContainerEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E] /usr/include/c++/4.8.5/bits/stl_tree.h:420

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rbp rsi rdi r12]
        
    Routine temporaries
        Total         :      14
            Global    :       8
            Local     :       6
        Regenerable   :       0
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const) [12] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h(271,7)
  -> INLINE: (272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
  -> INLINE: (273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const


    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h(271,7):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4hier12BoxContainer25BoxContainerConstIteratorneERKS2_] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:271

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rdx rsi rdi]
        
    Routine temporaries
        Total         :      18
            Global    :       9
            Local     :       9
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::BoxContainer::BoxContainerIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerIterator *, const SAMRAI::hier::BoxContainer::BoxContainerIterator &) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::BoxContainer::BoxContainerIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerIterator *, const SAMRAI::hier::BoxContainer::BoxContainerIterator &) const) [13] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h(492,7)
  -> INLINE: (493,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
  -> INLINE: (494,29) std::_List_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_iterator<SAMRAI::hier::Box> *, const std::_List_iterator<SAMRAI::hier::Box>::_Self &) const


    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h(492,7):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4hier12BoxContainer20BoxContainerIteratorneERKS2_] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:492

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rdx rsi rdi]
        
    Routine temporaries
        Total         :      18
            Global    :       9
            Local     :       9
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::BoxContainer::BoxContainerIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerIterator *) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::BoxContainer::BoxContainerIterator::operator*(const SAMRAI::hier::BoxContainer::BoxContainerIterator *) const) [14] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h(372,7)
  -> INLINE: (373,30) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator*(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *) const
  -> INLINE: (373,44) std::_List_iterator<SAMRAI::hier::Box>::operator*(const std::_List_iterator<SAMRAI::hier::Box> *) const


    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h(372,7):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4hier12BoxContainer20BoxContainerIteratordeEv] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:372

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rax rdi]
        
    Routine temporaries
        Total         :      12
            Global    :       8
            Local     :       4
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::Connector::getNeighborBoxes(const SAMRAI::hier::Connector *, const SAMRAI::hier::BoxId &, SAMRAI::hier::BoxContainer &) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::Connector::getNeighborBoxes(const SAMRAI::hier::Connector *, const SAMRAI::hier::BoxId &, SAMRAI::hier::BoxContainer &) const) [15] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Connector.h(421,4)
  -> INLINE: (424,56) SAMRAI::hier::Connector::getRelations(const SAMRAI::hier::Connector *, const SAMRAI::hier::BoxId &) const
  -> INLINE: (425,31) SAMRAI::hier::BoxId::getGlobalId(const SAMRAI::hier::BoxId *) const
  -> INLINE: (426,24) SAMRAI::hier::PeriodicId::zero()


    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/Connector.h(421,4):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4hier9Connector16getNeighborBoxesERKNS0_5BoxIdERNS0_12BoxContainerE] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Connector.h:421

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rbx rsi rdi r13-r15]
        
    Routine temporaries
        Total         :      33
            Global    :      11
            Local     :      22
        Regenerable   :       8
        Spilled       :       4
        
    Routine stack
        Variables     :      20 bytes*
            Reads     :       1 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::Connector::hasNeighborSet(const SAMRAI::hier::Connector *, const SAMRAI::hier::BoxId &) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::Connector::hasNeighborSet(const SAMRAI::hier::Connector *, const SAMRAI::hier::BoxId &) const) [16] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Connector.h(384,4)
  -> INLINE: (385,56) SAMRAI::hier::Connector::getRelations(const SAMRAI::hier::Connector *, const SAMRAI::hier::BoxId &) const
  -> INLINE: (386,31) SAMRAI::hier::BoxId::getGlobalId(const SAMRAI::hier::BoxId *) const
  -> INLINE: (386,46) SAMRAI::hier::PeriodicId::zero()
  -> INLINE: (387,52) SAMRAI::hier::BoxNeighborhoodCollection::find(SAMRAI::hier::BoxNeighborhoodCollection::ConstIterator *, const SAMRAI::hier::BoxNeighborhoodCollection *, const SAMRAI::hier::BoxId &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxNeighborhoodCollection.h:(1044,57) std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::find(const std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>> *, const std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::key_type &) const
      -> INLINE: /usr/include/c++/4.8.5/bits/stl_set.h:(667,26) std::_Rb_tree<std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::key_type, std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::value_type, std::_Identity<std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::value_type>, std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::key_compare, std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::_Key_alloc_type>::find(const std::_Rb_tree<std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::key_type, std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::value_type, std::_Identity<std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::value_type>, std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::key_compare, std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::_Key_alloc_type> *, const std::_Rb_tree<std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::key_type, std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::value_type, std::_Identity<std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::value_type>, std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::key_compare, std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::_Key_alloc_type>::key_type &) const
        -> INLINE: /usr/include/c++/4.8.5/bits/stl_tree.h:(1805,65) std::_Rb_tree<std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::key_type, std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::value_type, std::_Identity<std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::value_type>, std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::key_compare, std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::_Key_alloc_type>::_M_lower_bound(const std::_Rb_tree<std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::key_type, std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::value_type, std::_Identity<std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::value_type>, std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::key_compare, std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::_Key_alloc_type> *, std::_Rb_tree<std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::key_type, std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::value_type, std::_Identity<std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::value_type>, std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::key_compare, std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::_Key_alloc_type>::_Const_Link_type, std::_Rb_tree<std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::key_type, std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::value_type, std::_Identity<std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::value_type>, std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::key_compare, std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::_Key_alloc_type>::_Const_Link_type, const std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::key_type &) const
          -> INLINE: (1157,29) SAMRAI::hier::BoxNeighborhoodCollection::box_id_less::operator()(const SAMRAI::hier::BoxNeighborhoodCollection::box_id_less *, const SAMRAI::hier::BoxId &, const SAMRAI::hier::BoxId &) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxNeighborhoodCollection.h:(77,21) SAMRAI::hier::BoxId::operator<(const SAMRAI::hier::BoxId *, const SAMRAI::hier::BoxId &) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(224,26) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(224,57) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(225,27) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(225,59) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,28) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,41) SAMRAI::hier::LocalId::operator<(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,57) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,29) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,42) SAMRAI::hier::LocalId::operator==(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,59) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(228,32) SAMRAI::hier::PeriodicId::operator<(const SAMRAI::hier::PeriodicId *, const SAMRAI::hier::PeriodicId &) const
        -> INLINE: /usr/include/c++/4.8.5/bits/stl_tree.h:(1807,33) SAMRAI::hier::BoxNeighborhoodCollection::box_id_less::operator()(const SAMRAI::hier::BoxNeighborhoodCollection::box_id_less *, const SAMRAI::hier::BoxId &, const SAMRAI::hier::BoxId &) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxNeighborhoodCollection.h:(77,21) SAMRAI::hier::BoxId::operator<(const SAMRAI::hier::BoxId *, const SAMRAI::hier::BoxId &) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(224,26) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(224,57) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(225,27) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(225,59) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,28) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,41) SAMRAI::hier::LocalId::operator<(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,57) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,29) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,42) SAMRAI::hier::LocalId::operator==(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,59) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(228,32) SAMRAI::hier::PeriodicId::operator<(const SAMRAI::hier::PeriodicId *, const SAMRAI::hier::PeriodicId &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxNeighborhoodCollection.h:(1045,26) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::key_type, std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::value_type, std::_Identity<std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::value_type>, std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::key_compare, std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::_Key_alloc_type>::value_type>::operator==(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::key_type, std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::value_type, std::_Identity<std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::value_type>, std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::key_compare, std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::key_type, std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::value_type, std::_Identity<std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::value_type>, std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::key_compare, std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::_Key_alloc_type>::value_type>::_Self &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxNeighborhoodCollection.h:(1045,29) std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::end(const std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>> *) const
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxNeighborhoodCollection.h:(1046,17) SAMRAI::hier::BoxNeighborhoodCollection::end(SAMRAI::hier::BoxNeighborhoodCollection::ConstIterator *, const SAMRAI::hier::BoxNeighborhoodCollection *) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxNeighborhoodCollection.h:(1048,54) std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::find(const std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>> *, const std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::key_type &) const
      -> INLINE: /usr/include/c++/4.8.5/bits/stl_map.h:(837,26) std::_Rb_tree<std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::key_type, std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::value_type, std::_Select1st<std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::value_type>, std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::key_compare, std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::_Pair_alloc_type>::find(const std::_Rb_tree<std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::key_type, std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::value_type, std::_Select1st<std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::value_type>, std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::key_compare, std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::_Pair_alloc_type> *, const std::_Rb_tree<std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::key_type, std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::value_type, std::_Select1st<std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::value_type>, std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::key_compare, std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::_Pair_alloc_type>::key_type &) const
        -> INLINE: /usr/include/c++/4.8.5/bits/stl_tree.h:(1805,65) std::_Rb_tree<std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::key_type, std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::value_type, std::_Select1st<std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::value_type>, std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::key_compare, std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::_Pair_alloc_type>::_M_lower_bound(const std::_Rb_tree<std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::key_type, std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::value_type, std::_Select1st<std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::value_type>, std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::key_compare, std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::key_type, std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::value_type, std::_Select1st<std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::value_type>, std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::key_compare, std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::_Pair_alloc_type>::_Const_Link_type, std::_Rb_tree<std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::key_type, std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::value_type, std::_Select1st<std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::value_type>, std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::key_compare, std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::_Pair_alloc_type>::_Const_Link_type, const std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::key_type &) const
          -> INLINE: (1157,29) SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less::operator()(const SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less *, const SAMRAI::hier::BoxId *, const SAMRAI::hier::BoxId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxNeighborhoodCollection.h:(68,22) SAMRAI::hier::BoxId::operator<(const SAMRAI::hier::BoxId *, const SAMRAI::hier::BoxId &) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(224,26) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(224,57) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(225,27) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(225,59) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,28) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,41) SAMRAI::hier::LocalId::operator<(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,57) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,29) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,42) SAMRAI::hier::LocalId::operator==(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,59) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
              -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(228,32) SAMRAI::hier::PeriodicId::operator<(const SAMRAI::hier::PeriodicId *, const SAMRAI::hier::PeriodicId &) const
        -> INLINE: /usr/include/c++/4.8.5/bits/stl_tree.h:(1807,33) SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less::operator()(const SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less *, const SAMRAI::hier::BoxId *, const SAMRAI::hier::BoxId *) const
          -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxNeighborhoodCollection.h:(68,22) SAMRAI::hier::BoxId::operator<(const SAMRAI::hier::BoxId *, const SAMRAI::hier::BoxId &) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(224,26) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(224,57) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(225,27) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(225,59) SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,28) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,41) SAMRAI::hier::LocalId::operator<(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(226,57) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,29) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,42) SAMRAI::hier::LocalId::operator==(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(227,59) SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const
            -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:(228,32) SAMRAI::hier::PeriodicId::operator<(const SAMRAI::hier::PeriodicId *, const SAMRAI::hier::PeriodicId &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxNeighborhoodCollection.h:(1048,56) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::key_type, std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::value_type, std::_Identity<std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::value_type>, std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::key_compare, std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::_Key_alloc_type>::value_type>::operator*(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::key_type, std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::value_type, std::_Identity<std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::value_type>, std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::key_compare, std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::_Key_alloc_type>::value_type> *) const
  -> INLINE: (388,17) SAMRAI::hier::BoxNeighborhoodCollection::ConstIterator::operator!=(const SAMRAI::hier::BoxNeighborhoodCollection::ConstIterator *, const SAMRAI::hier::BoxNeighborhoodCollection::ConstIterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxNeighborhoodCollection.h:(357,25) SAMRAI::hier::BoxNeighborhoodCollection::ConstIterator::operator==(const SAMRAI::hier::BoxNeighborhoodCollection::ConstIterator *, const SAMRAI::hier::BoxNeighborhoodCollection::ConstIterator &) const
      -> INLINE: (344,23) std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::key_type, std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::value_type, std::_Select1st<std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::value_type>, std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::key_compare, std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::_Pair_alloc_type>::value_type>::operator==(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::key_type, std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::value_type, std::_Select1st<std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::value_type>, std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::key_compare, std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::_Pair_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::key_type, std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::value_type, std::_Select1st<std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::value_type>, std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::key_compare, std::map<const SAMRAI::hier::BoxId *, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood, SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less, std::allocator<std::pair<const SAMRAI::hier::BoxId *const, SAMRAI::hier::BoxNeighborhoodCollection::Neighborhood>>>::_Pair_alloc_type>::value_type>::_Self &) const
      -> INLINE: (345,34) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::key_type, std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::value_type, std::_Identity<std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::value_type>, std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::key_compare, std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::_Key_alloc_type>::value_type>::operator==(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::key_type, std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::value_type, std::_Identity<std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::value_type>, std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::key_compare, std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::key_type, std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::value_type, std::_Identity<std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::value_type>, std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::key_compare, std::set<SAMRAI::hier::BoxId, SAMRAI::hier::BoxNeighborhoodCollection::box_id_less, std::allocator<SAMRAI::hier::BoxId>>::_Key_alloc_type>::value_type>::_Self &) const
  -> INLINE: (388,34) SAMRAI::hier::BoxNeighborhoodCollection::end(SAMRAI::hier::BoxNeighborhoodCollection::ConstIterator *, const SAMRAI::hier::BoxNeighborhoodCollection *) const


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Connector.h(387,57)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h(228,34) inlined into /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Connector.h(388,52)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/Connector.h(384,4):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4hier9Connector14hasNeighborSetERKNS0_5BoxIdE] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Connector.h:384

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rsi rdi r8-r11 r13-r14]
        
    Routine temporaries
        Total         :      98
            Global    :      28
            Local     :      70
        Regenerable   :      19
        Spilled       :       2
        
    Routine stack
        Variables     :      68 bytes*
            Reads     :      13 [5.27e+00 ~ 3.2%]
            Writes    :       2 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::PatchHierarchy::getPatchLevel(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const SAMRAI::hier::PatchHierarchy *, int) const) [17] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h(493,4)
  -> INLINE: (495,28) std::shared_ptr<SAMRAI::hier::PatchLevel>::shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *, const std::shared_ptr<SAMRAI::hier::PatchLevel> &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (495,28) std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>>::operator[](const std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>> *, std::vector<std::shared_ptr<SAMRAI::hier::PatchLevel>, std::allocator<std::shared_ptr<SAMRAI::hier::PatchLevel>>>::size_type) const


    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h(493,4):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4hier14PatchHierarchy13getPatchLevelEi] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h:493

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    5[ rax rdx rcx rsi rdi]
        
    Routine temporaries
        Total         :      20
            Global    :       8
            Local     :      12
        Regenerable   :       2
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::PatchLevel::findConnector(const SAMRAI::hier::PatchLevel *, const SAMRAI::hier::PatchLevel &, const SAMRAI::hier::IntVector &, SAMRAI::hier::ConnectorNotFoundAction, bool) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::PatchLevel::findConnector(const SAMRAI::hier::PatchLevel *, const SAMRAI::hier::PatchLevel &, const SAMRAI::hier::IntVector &, SAMRAI::hier::ConnectorNotFoundAction, bool) const) [18] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h(922,4)
  -> INLINE: (923,14) SAMRAI::hier::PatchLevel::getBoxLevel(const SAMRAI::hier::PatchLevel *) const
  -> INLINE: (923,27) std::__shared_ptr<SAMRAI::hier::BoxLevel, __gnu_cxx::_S_atomic>::operator->(const std::__shared_ptr<SAMRAI::hier::BoxLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (923,29) SAMRAI::hier::BoxLevel::findConnector(const SAMRAI::hier::BoxLevel *, const SAMRAI::hier::BoxLevel &, const SAMRAI::hier::IntVector &, SAMRAI::hier::ConnectorNotFoundAction, bool) const
  -> INLINE: (923,43) std::__shared_ptr<SAMRAI::hier::BoxLevel, __gnu_cxx::_S_atomic>::operator*(const std::__shared_ptr<SAMRAI::hier::BoxLevel, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (923,49) SAMRAI::hier::PatchLevel::getBoxLevel(const SAMRAI::hier::PatchLevel *) const


    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h(922,4):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4hier10PatchLevel13findConnectorERKS1_RKNS0_9IntVectorENS0_23ConnectorNotFoundActionEb] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h:922

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rsi rdi r8 r12-r15]
        
    Routine temporaries
        Total         :      26
            Global    :      12
            Local     :      14
        Regenerable   :       0
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::BoxId::operator!=(const SAMRAI::hier::BoxId *, const SAMRAI::hier::BoxId &) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::BoxId::operator!=(const SAMRAI::hier::BoxId *, const SAMRAI::hier::BoxId &) const) [19] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h(206,4)
  -> INLINE: (208,31) SAMRAI::hier::GlobalId::operator!=(const SAMRAI::hier::GlobalId *, const SAMRAI::hier::GlobalId &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/GlobalId.h:(144,22) SAMRAI::hier::LocalId::operator!=(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const
  -> INLINE: (209,24) SAMRAI::hier::PeriodicId::operator!=(const SAMRAI::hier::PeriodicId *, const SAMRAI::hier::PeriodicId &) const


    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h(206,4):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4hier5BoxIdneERKS1_] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h:206

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rdx rsi rdi]
        
    Routine temporaries
        Total         :      20
            Global    :      10
            Local     :      10
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::BoxContainer::BoxContainerIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerIterator *, SAMRAI::hier::BoxContainer::BoxContainerIterator *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::BoxContainer::BoxContainerIterator::operator++(SAMRAI::hier::BoxContainer::BoxContainerIterator *, SAMRAI::hier::BoxContainer::BoxContainerIterator *, int)) [20] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h(396,7)
  -> INLINE: (399,13) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator++(std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (401,13) std::_List_iterator<SAMRAI::hier::Box>::operator++(std::_List_iterator<SAMRAI::hier::Box> *)


    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h(396,7):remark #34051: REGISTER ALLOCATION : [_ZN6SAMRAI4hier12BoxContainer20BoxContainerIteratorppEi] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:396

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    5[ rax rdx rsi rdi r15]
        
    Routine temporaries
        Total         :      19
            Global    :       8
            Local     :      11
        Regenerable   :       0
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::BoxContainer::pushBack(SAMRAI::hier::BoxContainer *, const SAMRAI::hier::Box &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::BoxContainer::pushBack(SAMRAI::hier::BoxContainer *, const SAMRAI::hier::Box &)) [21] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h(1063,4)
  -> INLINE: (1070,17) std::list<SAMRAI::hier::Box, std::allocator<SAMRAI::hier::Box>>::push_back(std::list<SAMRAI::hier::Box, std::allocator<SAMRAI::hier::Box>> *, const std::list<SAMRAI::hier::Box, std::allocator<SAMRAI::hier::Box>>::value_type &)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1072,10) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (1072,10) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (1072,10) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1072,10) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (1072,10) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, std::basic_ostream<char, std::char_traits<char>>::__ostream_type &(*)(std::basic_ostream<char, std::char_traits<char>>::__ostream_type &))
  -> INLINE: (1072,10) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1072,10) std::allocator<char>::allocator(std::allocator<char> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1072,10) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> DELETED: (1072,10) std::allocator<char>::~allocator(std::allocator<char> *)
  -> INLINE: (1072,10) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1072,10) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (1072,10) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> INLINE: (1072,10) std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1074,11) std::__shared_ptr<SAMRAI::hier::MultiblockBoxTree, __gnu_cxx::_S_atomic>::operator bool(const std::__shared_ptr<SAMRAI::hier::MultiblockBoxTree, __gnu_cxx::_S_atomic> *) const
  -> INLINE: (1075,17) std::__shared_ptr<SAMRAI::hier::MultiblockBoxTree, __gnu_cxx::_S_atomic>::reset(std::__shared_ptr<SAMRAI::hier::MultiblockBoxTree, __gnu_cxx::_S_atomic> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/char_traits.h(271,40):remark #34026: call to memcpy implemented as a call to optimized library version
/usr/include/c++/4.8.5/bits/shared_ptr_base.h(733,17):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 8)
/usr/include/c++/4.8.5/bits/stl_list.h(115,9):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
/home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h(1063,4):remark #34051: REGISTER ALLOCATION : [_ZN6SAMRAI4hier12BoxContainer8pushBackERKNS0_3BoxE] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:1063

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rsi rdi r8-r9 r12-r15 zmm0]
        
    Routine temporaries
        Total         :     332
            Global    :      81
            Local     :     251
        Regenerable   :     123
        Spilled       :       7
        
    Routine stack
        Variables     :     437 bytes*
            Reads     :      28 [7.07e+00 ~ 5.5%]
            Writes    :      57 [2.33e+01 ~ 18.3%]
        Spills        :      16 bytes*
            Reads     :       2 [1.30e-01 ~ 0.1%]
            Writes    :       2 [1.30e-01 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::char_traits<char>::length(const std::char_traits<char>::char_type *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/char_traits.h(259,7):remark #34051: REGISTER ALLOCATION : [_ZNSt11char_traitsIcE6lengthEPKc] /usr/include/c++/4.8.5/bits/char_traits.h:259

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      12
            Global    :       7
            Local     :       5
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>>::~basic_stringbuf(std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/iosfwd(93,11):remark #34051: REGISTER ALLOCATION : [_ZNSt15basic_stringbufIcSt11char_traitsIcESaIcEED1Ev] /usr/include/c++/4.8.5/iosfwd:93

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rbp rsi rdi]
        
    Routine temporaries
        Total         :      21
            Global    :      11
            Local     :      10
        Regenerable   :       5
        Spilled       :       1
        
    Routine stack
        Variables     :       1 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: __gnu_cxx::__exchange_and_add_dispatch(_Atomic_word *, int)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/ext/atomicity.h(79,3):remark #34051: REGISTER ALLOCATION : [_ZN17_INTERNAL0eb233e19__gnu_cxx27__exchange_and_add_dispatchEPii] /usr/include/c++/4.8.5/ext/atomicity.h:79

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rdx rsi rdi]
        
    Routine temporaries
        Total         :      16
            Global    :       8
            Local     :       8
        Regenerable   :       2
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_List_base<SAMRAI::hier::Box, std::allocator<SAMRAI::hier::Box>>::_M_put_node(std::_List_base<SAMRAI::hier::Box, std::allocator<SAMRAI::hier::Box>> *, std::_List_node<SAMRAI::hier::Box> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_list.h(338,7):remark #34051: REGISTER ALLOCATION : [_ZNSt10_List_baseIN6SAMRAI4hier3BoxESaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E] /usr/include/c++/4.8.5/bits/stl_list.h:338

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rsi rdi]
        
    Routine temporaries
        Total         :      10
            Global    :       0
            Local     :      10
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::operator[](std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>> *, const std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type &)

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h(228,34) inlined into /usr/include/c++/4.8.5/bits/stl_map.h(462,29)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_tree.h(140,51):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/stl_map.h(457,7):remark #34051: REGISTER ALLOCATION : [_ZNSt3mapIN6SAMRAI4hier5BoxIdENS1_12BoxContainerESt4lessIS2_ESaISt4pairIKS2_S3_EEEixERS7_] /usr/include/c++/4.8.5/bits/stl_map.h:457

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rbp rsi rdi r8-r10 r12 r15 zmm0]
        
    Routine temporaries
        Total         :      86
            Global    :      25
            Local     :      61
        Regenerable   :       3
        Spilled       :       4
        
    Routine stack
        Variables     :      32 bytes*
            Reads     :       4 [9.28e-01 ~ 0.7%]
            Writes    :       6 [2.49e+00 ~ 2.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::RealBoxConstIterator::operator!=(const SAMRAI::hier::RealBoxConstIterator *, const SAMRAI::hier::RealBoxConstIterator &) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SAMRAI::hier::RealBoxConstIterator::operator!=(const SAMRAI::hier::RealBoxConstIterator *, const SAMRAI::hier::RealBoxConstIterator &) const) [35] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/RealBoxConstIterator.h(101,4)
  -> INLINE: (102,43) SAMRAI::hier::BoxContainer::BoxContainerConstIterator::operator!=(const SAMRAI::hier::BoxContainer::BoxContainerConstIterator *, const SAMRAI::hier::BoxContainer::BoxContainerConstIterator &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(272,40) std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::operator!=(const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type> *, const std::_Rb_tree_const_iterator<std::_Rb_tree<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_type, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type, std::_Identity<std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::value_type>, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::key_compare, std::set<SAMRAI::hier::Box *, SAMRAI::hier::Box::id_less, std::allocator<SAMRAI::hier::Box *>>::_Key_alloc_type>::value_type>::_Self &) const
    -> INLINE: /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h:(273,29) std::_List_const_iterator<SAMRAI::hier::Box>::operator!=(const std::_List_const_iterator<SAMRAI::hier::Box> *, const std::_List_const_iterator<SAMRAI::hier::Box>::_Self &) const


    Report from: Code generation optimizations [cg]

/home/akula/libraries/SAMRAI/include/SAMRAI/hier/RealBoxConstIterator.h(101,4):remark #34051: REGISTER ALLOCATION : [_ZNK6SAMRAI4hier20RealBoxConstIteratorneERKS1_] /home/akula/libraries/SAMRAI/include/SAMRAI/hier/RealBoxConstIterator.h:101

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rdx rsi rdi]
        
    Routine temporaries
        Total         :      21
            Global    :      10
            Local     :      11
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::shared_ptr<SAMRAI::hier::PatchLevel>::~shared_ptr(std::shared_ptr<SAMRAI::hier::PatchLevel> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/shared_ptr.h(93,11):remark #34051: REGISTER ALLOCATION : [_ZNSt10shared_ptrIN6SAMRAI4hier10PatchLevelEED1Ev] /usr/include/c++/4.8.5/bits/shared_ptr.h:93

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rdi r12-r13]
        
    Routine temporaries
        Total         :      24
            Global    :      12
            Local     :      12
        Regenerable   :       3
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>>::~vector(std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>> *)

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.8.5/bits/stl_vector.h(416,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between __first->_M_t (96:11) and this->first (96:12)

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1123,7) inlined into /usr/include/c++/4.8.5/bits/stl_vector.h(416,9)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(415,7):remark #34051: REGISTER ALLOCATION : [_ZNSt6vectorISt3mapIN6SAMRAI4hier5BoxIdENS2_12BoxContainerESt4lessIS3_ESaISt4pairIKS3_S4_EEESaISB_EED1Ev] /usr/include/c++/4.8.5/bits/stl_vector.h:415

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rbx rbp rsi rdi r12-r15]
        
    Routine temporaries
        Total         :      21
            Global    :      12
            Local     :       9
        Regenerable   :       0
        Spilled       :       6
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       6 [5.91e+00 ~ 1.2%]
            Writes    :       6 [5.91e+00 ~ 1.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>>::vector(std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(249,17):remark #34051: REGISTER ALLOCATION : [_ZNSt6vectorISt3mapIN6SAMRAI4hier5BoxIdENS2_12BoxContainerESt4lessIS3_ESaISt4pairIKS3_S4_EEESaISB_EEC1Ev] /usr/include/c++/4.8.5/bits/stl_vector.h:249

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rax rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: ExtendedFlattenedHierarchy::~ExtendedFlattenedHierarchy(ExtendedFlattenedHierarchy *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ExtendedFlattenedHierarchy::~ExtendedFlattenedHierarchy(ExtendedFlattenedHierarchy *)) [40] /home/akula/HAMeRS_IB/HAMeRS/src/extn/patch_hierarchies/ExtendedFlattenedHierarchy.cpp(212,1)
  -> INLINE: (213,1) std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>>::~vector(std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (213,1) std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>>::~vector(std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/extn/patch_hierarchies/ExtendedFlattenedHierarchy.cpp(213,1)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between __first->_M_t (96:11) and this->first (96:12)

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1123,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/extn/patch_hierarchies/ExtendedFlattenedHierarchy.cpp(213,1)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/extn/patch_hierarchies/ExtendedFlattenedHierarchy.cpp(213,1)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between __first->_M_t (96:11) and this->first (96:12)

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1123,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/extn/patch_hierarchies/ExtendedFlattenedHierarchy.cpp(213,1)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/home/akula/HAMeRS_IB/HAMeRS/src/extn/patch_hierarchies/ExtendedFlattenedHierarchy.cpp(212,1):remark #34051: REGISTER ALLOCATION : [_ZN26ExtendedFlattenedHierarchyD1Ev] /home/akula/HAMeRS_IB/HAMeRS/src/extn/patch_hierarchies/ExtendedFlattenedHierarchy.cpp:212

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rbx rbp rsi rdi r12-r15]
        
    Routine temporaries
        Total         :      34
            Global    :      17
            Local     :      17
        Regenerable   :       0
        Spilled       :       6
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Vector_base<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>>::~_Vector_base(std::_Vector_base<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(160,7):remark #34051: REGISTER ALLOCATION : [_ZNSt12_Vector_baseISt3mapIN6SAMRAI4hier5BoxIdENS2_12BoxContainerESt4lessIS3_ESaISt4pairIKS3_S4_EEESaISB_EED1Ev] /usr/include/c++/4.8.5/bits/stl_vector.h:160

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :      10
            Global    :       7
            Local     :       3
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: ExtendedFlattenedHierarchy::~ExtendedFlattenedHierarchy(ExtendedFlattenedHierarchy *const)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ExtendedFlattenedHierarchy::~ExtendedFlattenedHierarchy(ExtendedFlattenedHierarchy *const)) [42] /home/akula/HAMeRS_IB/HAMeRS/src/extn/patch_hierarchies/ExtendedFlattenedHierarchy.cpp(211,29)
  -> INLINE: (211,29) ExtendedFlattenedHierarchy::~ExtendedFlattenedHierarchy(ExtendedFlattenedHierarchy *)
    -> INLINE: (213,1) std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>>::~vector(std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: (213,1) std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>>::~vector(std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/extn/patch_hierarchies/ExtendedFlattenedHierarchy.cpp(211,29)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between __first->_M_t (96:11) and this->first (96:12)

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1123,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/extn/patch_hierarchies/ExtendedFlattenedHierarchy.cpp(211,29)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/extn/patch_hierarchies/ExtendedFlattenedHierarchy.cpp(211,29)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between __first->_M_t (96:11) and this->first (96:12)

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1123,7) inlined into /home/akula/HAMeRS_IB/HAMeRS/src/extn/patch_hierarchies/ExtendedFlattenedHierarchy.cpp(211,29)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/home/akula/HAMeRS_IB/HAMeRS/src/extn/patch_hierarchies/ExtendedFlattenedHierarchy.cpp(211,29):remark #34051: REGISTER ALLOCATION : [_ZN26ExtendedFlattenedHierarchyD2Ev] /home/akula/HAMeRS_IB/HAMeRS/src/extn/patch_hierarchies/ExtendedFlattenedHierarchy.cpp:211

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rbx rbp rsi rdi r12-r15]
        
    Routine temporaries
        Total         :      34
            Global    :      17
            Local     :      17
        Regenerable   :       0
        Spilled       :       6
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::tbox::Dimension::getValue(const SAMRAI::tbox::Dimension *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/tbox/Dimension.h(137,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::BlockId::operator==(const SAMRAI::hier::BlockId *, const SAMRAI::hier::BlockId &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::BlockId::operator==(const SAMRAI::hier::BlockId *, const SAMRAI::hier::BlockId &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BlockId.h(155,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::LocalId::operator++(SAMRAI::hier::LocalId *, SAMRAI::hier::LocalId *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::LocalId::operator++(SAMRAI::hier::LocalId *, SAMRAI::hier::LocalId *, int)) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/LocalId.h(160,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::LocalId::operator==(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::LocalId::operator==(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/LocalId.h(354,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::LocalId::operator!=(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::LocalId::operator!=(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/LocalId.h(368,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::LocalId::operator<(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::LocalId::operator<(const SAMRAI::hier::LocalId *, const SAMRAI::hier::LocalId &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/LocalId.h(382,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::GlobalId::getLocalId(const SAMRAI::hier::GlobalId *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/GlobalId.h(106,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::GlobalId::operator!=(const SAMRAI::hier::GlobalId *, const SAMRAI::hier::GlobalId &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::GlobalId::operator!=(const SAMRAI::hier::GlobalId *, const SAMRAI::hier::GlobalId &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/GlobalId.h(142,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::PeriodicId::zero()

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::PeriodicId::zero()) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PeriodicId.h(99,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::PeriodicId::operator!=(const SAMRAI::hier::PeriodicId *, const SAMRAI::hier::PeriodicId &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::PeriodicId::operator!=(const SAMRAI::hier::PeriodicId *, const SAMRAI::hier::PeriodicId &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PeriodicId.h(149,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::PeriodicId::operator<(const SAMRAI::hier::PeriodicId *, const SAMRAI::hier::PeriodicId &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::PeriodicId::operator<(const SAMRAI::hier::PeriodicId *, const SAMRAI::hier::PeriodicId &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PeriodicId.h(163,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::BoxId::getGlobalId(const SAMRAI::hier::BoxId *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::BoxId::getGlobalId(const SAMRAI::hier::BoxId *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h(119,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::BoxId::operator<(const SAMRAI::hier::BoxId *, const SAMRAI::hier::BoxId &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::BoxId::operator<(const SAMRAI::hier::BoxId *, const SAMRAI::hier::BoxId &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h(222,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::IntVector::getZero(const SAMRAI::tbox::Dimension &)) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(1132,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::IntVector::getOne(const SAMRAI::tbox::Dimension &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::IntVector::getOne(const SAMRAI::tbox::Dimension &)) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/IntVector.h(1145,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Box::getBoxId(const SAMRAI::hier::Box *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Box::getBoxId(const SAMRAI::hier::Box *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(315,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Box::getBlockId(const SAMRAI::hier::Box *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Box::getBlockId(const SAMRAI::hier::Box *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(330,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::BoxContainer::empty(const SAMRAI::hier::BoxContainer *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::BoxContainer::empty(const SAMRAI::hier::BoxContainer *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h(681,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::iterator *, SAMRAI::hier::BoxContainer *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::BoxContainer::begin(SAMRAI::hier::BoxContainer::iterator *, SAMRAI::hier::BoxContainer *)) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h(714,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::iterator *, SAMRAI::hier::BoxContainer *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::BoxContainer::end(SAMRAI::hier::BoxContainer::iterator *, SAMRAI::hier::BoxContainer *)) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h(725,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::BoxContainer::push_back(SAMRAI::hier::BoxContainer *, const SAMRAI::hier::Box &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::BoxContainer::push_back(SAMRAI::hier::BoxContainer *, const SAMRAI::hier::Box &)) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxContainer.h(1095,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Patch::getBox(const SAMRAI::hier::Patch *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Patch.h(93,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::BoxLevel::findConnector(const SAMRAI::hier::BoxLevel *, const SAMRAI::hier::BoxLevel &, const SAMRAI::hier::IntVector &, SAMRAI::hier::ConnectorNotFoundAction, bool) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::BoxLevel::findConnector(const SAMRAI::hier::BoxLevel *, const SAMRAI::hier::BoxLevel &, const SAMRAI::hier::IntVector &, SAMRAI::hier::ConnectorNotFoundAction, bool) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxLevel.h(1387,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::PatchLevel::getBoxLevel(const SAMRAI::hier::PatchLevel *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::PatchLevel::getBoxLevel(const SAMRAI::hier::PatchLevel *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h(604,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::PatchLevel::begin(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h(1260,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::PatchLevel::end(SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h(1270,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::PatchLevel::Iterator::operator*(const SAMRAI::hier::PatchLevel::Iterator *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h(1171,7)

===========================================================================

Begin optimization report for: SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::PatchLevel::Iterator::operator!=(const SAMRAI::hier::PatchLevel::Iterator *, const SAMRAI::hier::PatchLevel::Iterator &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h(1200,7)

===========================================================================

Begin optimization report for: SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::PatchLevel::Iterator::operator++(SAMRAI::hier::PatchLevel::Iterator *, SAMRAI::hier::PatchLevel::Iterator *, int)) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchLevel.h(1220,7)

===========================================================================

Begin optimization report for: SAMRAI::hier::PatchHierarchy::getNumberOfLevels(const SAMRAI::hier::PatchHierarchy *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::PatchHierarchy::getNumberOfLevels(const SAMRAI::hier::PatchHierarchy *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h(548,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::PatchHierarchy::getDim(const SAMRAI::hier::PatchHierarchy *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::PatchHierarchy::getDim(const SAMRAI::hier::PatchHierarchy *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/PatchHierarchy.h(1087,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::BoxNeighborhoodCollection::end(SAMRAI::hier::BoxNeighborhoodCollection::ConstIterator *, const SAMRAI::hier::BoxNeighborhoodCollection *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::BoxNeighborhoodCollection::end(SAMRAI::hier::BoxNeighborhoodCollection::ConstIterator *, const SAMRAI::hier::BoxNeighborhoodCollection *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxNeighborhoodCollection.h(896,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::BoxNeighborhoodCollection::find(SAMRAI::hier::BoxNeighborhoodCollection::ConstIterator *, const SAMRAI::hier::BoxNeighborhoodCollection *, const SAMRAI::hier::BoxId &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::BoxNeighborhoodCollection::find(SAMRAI::hier::BoxNeighborhoodCollection::ConstIterator *, const SAMRAI::hier::BoxNeighborhoodCollection *, const SAMRAI::hier::BoxId &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxNeighborhoodCollection.h(1043,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less::operator()(const SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less *, const SAMRAI::hier::BoxId *, const SAMRAI::hier::BoxId *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less::operator()(const SAMRAI::hier::BoxNeighborhoodCollection::box_id_ptr_less *, const SAMRAI::hier::BoxId *, const SAMRAI::hier::BoxId *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxNeighborhoodCollection.h(67,7)

===========================================================================

Begin optimization report for: SAMRAI::hier::BoxNeighborhoodCollection::box_id_less::operator()(const SAMRAI::hier::BoxNeighborhoodCollection::box_id_less *, const SAMRAI::hier::BoxId &, const SAMRAI::hier::BoxId &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::BoxNeighborhoodCollection::box_id_less::operator()(const SAMRAI::hier::BoxNeighborhoodCollection::box_id_less *, const SAMRAI::hier::BoxId &, const SAMRAI::hier::BoxId &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxNeighborhoodCollection.h(76,7)

===========================================================================

Begin optimization report for: SAMRAI::hier::BoxNeighborhoodCollection::ConstIterator::operator==(const SAMRAI::hier::BoxNeighborhoodCollection::ConstIterator *, const SAMRAI::hier::BoxNeighborhoodCollection::ConstIterator &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::BoxNeighborhoodCollection::ConstIterator::operator==(const SAMRAI::hier::BoxNeighborhoodCollection::ConstIterator *, const SAMRAI::hier::BoxNeighborhoodCollection::ConstIterator &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxNeighborhoodCollection.h(342,7)

===========================================================================

Begin optimization report for: SAMRAI::hier::BoxNeighborhoodCollection::ConstIterator::operator!=(const SAMRAI::hier::BoxNeighborhoodCollection::ConstIterator *, const SAMRAI::hier::BoxNeighborhoodCollection::ConstIterator &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::BoxNeighborhoodCollection::ConstIterator::operator!=(const SAMRAI::hier::BoxNeighborhoodCollection::ConstIterator *, const SAMRAI::hier::BoxNeighborhoodCollection::ConstIterator &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxNeighborhoodCollection.h(356,7)

===========================================================================

Begin optimization report for: SAMRAI::hier::Connector::getRatio(const SAMRAI::hier::Connector *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Connector::getRatio(const SAMRAI::hier::Connector *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Connector.h(798,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::Connector::getRelations(const SAMRAI::hier::Connector *, const SAMRAI::hier::BoxId &) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Connector::getRelations(const SAMRAI::hier::Connector *, const SAMRAI::hier::BoxId &) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Connector.h(1578,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::RealBoxConstIterator::operator*(const SAMRAI::hier::RealBoxConstIterator *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::RealBoxConstIterator::operator*(const SAMRAI::hier::RealBoxConstIterator *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/RealBoxConstIterator.h(72,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::RealBoxConstIterator::operator->(const SAMRAI::hier::RealBoxConstIterator *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::RealBoxConstIterator::operator->(const SAMRAI::hier::RealBoxConstIterator *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/RealBoxConstIterator.h(81,4)

===========================================================================

Begin optimization report for: __sti__$E()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (__sti__$E()) [349] <compiler generated>


    Report from: Code generation optimizations [cg]

<compiler generated>:remark #34051: REGISTER ALLOCATION : [__sti__$E] (null):0

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdx rsi rdi]
        
    Routine temporaries
        Total         :      13
            Global    :       7
            Local     :       6
        Regenerable   :       7
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Vector_base<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>>::_M_get_Tp_allocator(std::_Vector_base<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(114,7):remark #34051: REGISTER ALLOCATION : [_ZNSt12_Vector_baseISt3mapIN6SAMRAI4hier5BoxIdENS2_12BoxContainerESt4lessIS3_ESaISt4pairIKS3_S4_EEESaISB_EE19_M_get_Tp_allocatorEv] /usr/include/c++/4.8.5/bits/stl_vector.h:114

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rax rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Vector_base<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>>::_M_deallocate(std::_Vector_base<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>> *, std::_Vector_base<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>>::pointer, std::size_t)

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_vector.h(172,7):remark #34051: REGISTER ALLOCATION : [_ZNSt12_Vector_baseISt3mapIN6SAMRAI4hier5BoxIdENS2_12BoxContainerESt4lessIS3_ESaISt4pairIKS3_S4_EEESaISB_EE13_M_deallocateEPSB_m] /usr/include/c++/4.8.5/bits/stl_vector.h:172

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdx rsi rdi]
        
    Routine temporaries
        Total         :      11
            Global    :       7
            Local     :       4
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Destroy_aux<false>::__destroy<std::_Vector_base<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>>::pointer>(std::_Vector_base<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>>::pointer, std::_Vector_base<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>>::pointer)

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between __first->_M_t (96:11) and this->first (96:12)

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1123,7) inlined into /usr/include/c++/4.8.5/bits/stl_construct.h(104,6)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_construct.h(101,2):remark #34051: REGISTER ALLOCATION : [_ZNSt12_Destroy_auxILb0EE9__destroyIPSt3mapIN6SAMRAI4hier5BoxIdENS4_12BoxContainerESt4lessIS5_ESaISt4pairIKS5_S6_EEEEEvT_SF_] /usr/include/c++/4.8.5/bits/stl_construct.h:101

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rbx rbp rsi rdi r13-r15]
        
    Routine temporaries
        Total         :      20
            Global    :      11
            Local     :       9
        Regenerable   :       0
        Spilled       :       5
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      40 bytes*
            Reads     :       5 [4.93e+00 ~ 1.0%]
            Writes    :       5 [4.93e+00 ~ 1.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::_M_erase(std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type> *, std::_Rb_tree<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_type, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type, std::_Select1st<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::value_type>, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::key_compare, std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>::_Pair_alloc_type>::_Link_type)

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1123,7)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_tree.h(1121,5):remark #34051: REGISTER ALLOCATION : [_ZNSt8_Rb_treeIN6SAMRAI4hier5BoxIdESt4pairIKS2_NS1_12BoxContainerEESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E] /usr/include/c++/4.8.5/bits/stl_tree.h:1121

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rsi rdi r12-r15]
        
    Routine temporaries
        Total         :      19
            Global    :      10
            Local     :       9
        Regenerable   :       0
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      32 bytes*
            Reads     :       4 [3.99e+00 ~ 3.7%]
            Writes    :       4 [3.99e+00 ~ 3.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SAMRAI::hier::Box::getOwnerRank(const SAMRAI::hier::Box *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::Box::getOwnerRank(const SAMRAI::hier::Box *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/Box.h(358,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::BoxId::getOwnerRank(const SAMRAI::hier::BoxId *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::BoxId::getOwnerRank(const SAMRAI::hier::BoxId *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/BoxId.h(128,4)

===========================================================================

Begin optimization report for: SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SAMRAI::hier::GlobalId::getOwnerRank(const SAMRAI::hier::GlobalId *) const) /home/akula/libraries/SAMRAI/include/SAMRAI/hier/GlobalId.h(88,4)

===========================================================================

Begin optimization report for: std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>>::_M_default_append(std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>> *, std::vector<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>, std::allocator<std::map<SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer, std::less<SAMRAI::hier::BoxId>, std::allocator<std::pair<const SAMRAI::hier::BoxId, SAMRAI::hier::BoxContainer>>>>>::size_type)

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_uninitialized.h(494,8) inlined into /usr/include/c++/4.8.5/bits/vector.tcc(541,8)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between __cur->_M_t->_M_impl (648:7) and __cur->_M_t->_M_impl->_M_header (445:4)
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_uninitialized.h(74,23) inlined into /usr/include/c++/4.8.5/bits/vector.tcc(555,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between __first.__first->_M_t (193:14) and __cur->_M_t->_M_impl->_M_header (457:22)
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_uninitialized.h(494,8) inlined into /usr/include/c++/4.8.5/bits/vector.tcc(558,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between __cur->_M_t->_M_impl (648:7) and __cur->_M_t->_M_impl->_M_header (445:4)
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_construct.h(102,4) inlined into /usr/include/c++/4.8.5/bits/vector.tcc(569,8)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between __first->_M_t (96:11) and this->first (96:12)

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/stl_tree.h(1123,7) inlined into /usr/include/c++/4.8.5/bits/vector.tcc(569,8)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/stl_tree.h(457,22):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/stl_tree.h(445,4):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/stl_tree.h(445,4):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
/usr/include/c++/4.8.5/bits/vector.tcc(534,5):remark #34051: REGISTER ALLOCATION : [_ZNSt6vectorISt3mapIN6SAMRAI4hier5BoxIdENS2_12BoxContainerESt4lessIS3_ESaISt4pairIKS3_S4_EEESaISB_EE17_M_default_appendEm] /usr/include/c++/4.8.5/bits/vector.tcc:534

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      81
            Global    :      31
            Local     :      50
        Regenerable   :      12
        Spilled       :      10
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      40 bytes*
            Reads     :       5 [2.55e+00 ~ 0.6%]
            Writes    :       5 [2.55e+00 ~ 0.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
