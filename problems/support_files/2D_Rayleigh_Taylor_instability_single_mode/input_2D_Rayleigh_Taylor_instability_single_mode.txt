Application = "Navier-Stokes"

NavierStokes
{
    // Name of project
    project_name = "2D smooth Rayleigh-Taylor instability"

    // Number of species
    num_species = 2

    // Flow model to use
    flow_model = "FOUR_EQN_CONSERVATIVE"

    Flow_model
    {
        // Equation of state to use
        equation_of_state = "IDEAL_GAS"

        Equation_of_state_mixing_rules
        {
            species_gamma = 1.4, 1.4
            species_R = 249.833612324316, 270.653080018009
        }

        has_source_terms = TRUE

        Source_terms
        {
            has_gravity = TRUE
            gravity = 10.0, 0.0
        }
        // Equation of shear viscosity to use
        equation_of_shear_viscosity = "CONSTANT"

        Equation_of_shear_viscosity_mixing_rules
        {
            species_mu = 0.0,0.0
            species_M  = 1.0,1.0
        }

        // Equation of bulk viscosity to use
        equation_of_bulk_viscosity = "CONSTANT"

        Equation_of_bulk_viscosity_mixing_rules
        {
            species_mu_v = 0.0,0.0
            species_M    = 1.0,1.0
        }

        // Equation of mass diffusivity to use
        equation_of_mass_diffusivity = "CONSTANT"

        Equation_of_mass_diffusivity_mixing_rules
        {
            species_D = 0.0, 0.0
        }

        // Equation of thermal conductivity to use
        equation_of_thermal_conductivity = "PRANDTL"

        Equation_of_thermal_conductivity_mixing_rules
        {
            species_c_p = 1005,1000
            species_Pr = 0.72,0.7
            species_M = 1.0,1.0
            species_mu = 0.0,0.0

            equation_of_shear_viscosity = "CONSTANT"
        }
    }

    // Convective flux reconstructor to use
    convective_flux_reconstructor = "DRP4"

    Convective_flux_reconstructor{}

    use_conservative_form_diffusive_flux = FALSE
    
    // Non-conservative diffusive flux divergence operator to use
    nonconservative_diffusive_flux_divergence_operator = "SIXTH_ORDER"
    
    Nonconservative_diffusive_flux_divergence_operator{
    }

    Boundary_data
    {
        boundary_edge_xlo
        {
            // boundary_condition = "DIRICHLET"
            // partial_densities  = 0.917546375094821, 0.0
            // velocity           = 0.0, 0.0
            // pressure           = 68770.1776095063
            
            boundary_condition = "NONREFLECTING_OUTFLOW"
            pressure_target = 68770.1776095063
            sigma = 100.0
            beta = 0.0
            // beta = 0.283
            length_char = 701.53278340668
        }

        // Set the boundary conditions for edges
        boundary_edge_xhi
        {
            // boundary_condition = "DIRICHLET"
            // partial_densities  = 0.0, 1.74003484181604
            // velocity           = 0.0, 0.0
            // pressure           = 141283.736782848
            
            boundary_condition = "NONREFLECTING_OUTFLOW"
            pressure_target = 141283.736782848
            sigma = 100.0
            beta = 0.0
            // beta = 0.283
            length_char = 701.53278340668
        }

        // boundary_edge_yhi
        // {
        //     boundary_condition = "FLOW"
        // }

        // Set the boundary conditions for nodes
        // boundary_node_xlo_ylo
        // {
        //     boundary_condition = "XREFLECT"
        // }

        // boundary_node_xhi_ylo
        // {
        //     boundary_condition = "XREFLECT"
        // }

        // boundary_node_xlo_yhi
        // {
        //     boundary_condition = "XREFLECT"
        // }

        // boundary_node_xhi_yhi
        // {
        //     boundary_condition = "XREFLECT"
        // }
    }

    Value_tagger
    {
        variables = "MASS_FRACTION"

        uses_global_tol_up = FALSE
        uses_global_tol_lo = FALSE

        uses_local_tol_up = TRUE
        uses_local_tol_lo = TRUE

        local_tol_up = 0.999
        local_tol_lo = 0.001
    }

    Gradient_tagger
    {
        gradient_sensors = "JAMESON_GRADIENT"

        JAMESON_GRADIENT
        {
            Jameson_gradient_variables = "PRESSURE"

            Jameson_gradient_tol = 0.002
        }
    }
}

Main
{
    // Dimension of problem
    dim = 2
    
    // Base name of log file
    base_name = "2D_Rayleigh_Taylor_instability"
    
    // Whether all nodes log to individual files,
    // if false only node 0 will log 
    log_all_nodes = TRUE
    
    // Visualization dump parameters
    // Setting to dump viz output: CONSTANT_TIME_INTERVAL, CONSTANT_TIMESTEP_INTERVAL
    viz_dump_setting = "CONSTANT_TIMESTEP_INTERVAL"
    // Frequency at which to dump viz output (0 to turn off)
    viz_dump_interval = 20
    // viz_dump_interval = 3.5e-2
    // Name of directory in which to place viz output
    viz_dump_dirname = "viz_2D_Rayleigh_Taylor_instability"
    // Number of processors which write to each viz file
    visit_number_procs_per_file = 1
    
    // Restart dump parameters
    // Frequency at which to dump restart output
    // (-1 to be as same as viz_dump_interval, 0 to turn off)
    restart_interval = -1
}

CartesianGeometry
{
    // Lower and upper indices of computational domain
    domain_boxes = [(0, 0), (1023, 127)]
    x_lo         = -2806.13113362672,  0.0     // Lower end of computational domain
    x_up         =  2806.13113362672,  701.53278340668 // Upper end of computational domain

    // Periodic dimension. A non-zero value indicates that the direction is periodic
    periodic_dimension = 0, 1
}

ExtendedTagAndInitialize
{
    at_0
    {
        cycle = 0
        // First tagging method for refinement to use
        tag_0
        {
            tagging_method = "VALUE_DETECTOR"
        }
        // Second tagging method for refinement to use
        tag_1
        {
            tagging_method = "GRADIENT_DETECTOR"
        }
    }
}

PatchHierarchy
{
    // Maximum number of levels in hierarchy
    max_levels = 3

    ratio_to_coarser
    {
        // Vector ratio to next coarser level
        level_1 = 2, 2 // all finer levels will use same values as level_1...
    }

    largest_patch_size
    {
        level_0 = 128, 128 // all finer levels will use same values as level_0...
    }

    smallest_patch_size
    {
       level_0 = 8, 8 // all finer levels will use same values as level_0...
    }
}

GriddingAlgorithm{}

RungeKuttaLevelIntegrator
{
    cfl                      = 0.5e0 // Max cfl factor used in problem
    cfl_init                 = 0.5e0 // Initial cfl factor
    lag_dt_computation       = FALSE
    use_ghosts_to_compute_dt = FALSE
}

TimeRefinementIntegrator
{
    start_time           = 0.0e0  // Initial simulation time
    end_time             = 500.0e0 // Final simulation time
    grow_dt              = 1.0e0  // Growth factor for timesteps
    max_integrator_steps = 10000  // Max number of simulation timesteps
}

TimerManager
{
    print_threshold = 0.01
    timer_list      = "apps::main::*"
}

